{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-08-20T19:54:58.228511Z", "invocation_id": "257117f1-ca08-484f-8252-59bc076f62d0", "env": {}, "project_name": "ps_silver_gold", "project_id": "fb14c2459c3bd9a4a18cfe9cfff7ce27", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.ps_silver_gold.microsoft_ads__account_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__account_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__account_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__account_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__account_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__account_report"], "alias": "microsoft_ads__account_report", "checksum": {"name": "sha256", "checksum": "50a97c52bb00c65e07d4d396249b2f0825286353425db7e1f8105db019b073a5"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7543025, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__account_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_daily_report') }}\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        accounts.time_zone as account_timezone,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions\r\n        -- all_conversion_value is not available for the account_report\r\n    from report\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__account_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__account_daily_report", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__ad_group_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__ad_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__ad_group_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__ad_group_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__ad_group_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__ad_group_report"], "alias": "microsoft_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "5213f3f50d76b11118a7225993e123369ddfad8a82eb4d9896f84a5fc06f310b"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7572856, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__ad_group_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_group_daily_report') }}\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_group_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value, \r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__ad_group_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__ad_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__ad_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__ad_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__ad_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__ad_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__ad_report"], "alias": "microsoft_ads__ad_report", "checksum": {"name": "sha256", "checksum": "05ae3c24744bd2e320c97c7786eb11ce79afa01eee9d0d5ef2d2b2af036eb6ae"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7602031, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__ad_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_daily_report') }}\r\n), \r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_group_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        ads.ad_name,\r\n        report.ad_id,\r\n        ads.type as ad_type,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join ads\r\n        on report.ad_id = ads.ad_id\r\n        and report.source_relation = ads.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__ad_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__ad_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__campaign_country_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__campaign_country_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__campaign_country_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__campaign_country_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__campaign_country_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__campaign_country_report"], "alias": "microsoft_ads__campaign_country_report", "checksum": {"name": "sha256", "checksum": "788c96280d1c9a969c1eb5e7314120067bc480f8bdc80a12e2ecd5714d18c202"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7633588, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__campaign_country_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__geographic_daily_report') }}\r\n),  \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        report.country,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        campaigns.type as campaign_type,\r\n        campaigns.time_zone as campaign_timezone,\r\n        campaigns.status as campaign_status,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        report.location_id,\r\n        report.goal,\r\n        report.language as geo_language,\r\n        campaigns.budget as campaign_budget,\r\n        campaigns.budget_id as campaign_budget_id,\r\n        campaigns.budget_type as campaign_budget_type,\r\n        campaigns.language as campaign_language,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__geographic_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__campaign_region_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__campaign_region_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__campaign_region_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__campaign_region_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__campaign_region_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__campaign_region_report"], "alias": "microsoft_ads__campaign_region_report", "checksum": {"name": "sha256", "checksum": "68df45e48c3dbca897863238756664d0f59b2d67f55347f03e24b967b09a7356"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7663288, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__campaign_region_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__geographic_daily_report') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        report.region,\r\n        report.country,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        campaigns.type as campaign_type,\r\n        campaigns.time_zone as campaign_timezone,\r\n        campaigns.status as campaign_status,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        report.location_id,\r\n        report.goal,\r\n        report.language as geo_language,\r\n        campaigns.budget as campaign_budget,\r\n        campaigns.budget_id as campaign_budget_id,\r\n        campaigns.budget_type as campaign_budget_type,\r\n        campaigns.language as campaign_language,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n )\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__geographic_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__campaign_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__campaign_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__campaign_report"], "alias": "microsoft_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "f48b2387c8e48b8d8cd672e632d6f6a1dfb88a93e8bb31c8e9b25867a13aff09"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7708573, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__campaign_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_daily_report') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        campaigns.type as campaign_type,\r\n        campaigns.time_zone as campaign_timezone,\r\n        campaigns.status as campaign_status,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__campaign_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__keyword_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__keyword_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__keyword_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__keyword_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__keyword_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__keyword_report"], "alias": "microsoft_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "1f0bc0e2fbf2ab1d6fce8eefa42c6e3366ba0dd33c1a46d20989bbaf77214b89"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7745333, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__keyword_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__keyword_daily_report') }}\r\n), \r\n\r\nkeywords as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__keyword_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_group_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        ads.ad_name,\r\n        report.ad_id,\r\n        keywords.keyword_name,\r\n        report.keyword_id,\r\n        keywords.match_type,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join ads\r\n        on report.ad_id = ads.ad_id\r\n        and report.source_relation = ads.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join keywords\r\n        on report.keyword_id = keywords.keyword_id\r\n        and report.source_relation = keywords.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect * from joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__keyword_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__keyword_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report", "model.ps_silver_gold.stg_microsoft_ads__keyword_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__search_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__search_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__search_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__search_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__search_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__search_report"], "alias": "microsoft_ads__search_report", "checksum": {"name": "sha256", "checksum": "37803bad8edbae6545290e0e3e5e01804b3c645321afbe437f714484a590d685"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.777906, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__search_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__search_daily_report') }}\r\n), \r\n\r\nkeywords as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__keyword_history') }}\r\n    where is_most_recent_record = TRUE\r\n),\r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__ad_group_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_microsoft_ads__account_history') }}\r\n    where is_most_recent_record = TRUE\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'bing'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        ads.ad_name,\r\n        report.ad_id,\r\n        report.keyword_id,\r\n        keywords.keyword_name,\r\n        coalesce(report.delivered_match_type, report.bid_match_type) as match_type,\r\n        report.search_query,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(report.conversions) as conversions,\r\n        sum(report.conversions_value) as conversions_value,\r\n        sum(report.all_conversions) as all_conversions,\r\n        sum(report.all_conversions_value) as all_conversions_value\r\n    from report\r\n    left join ads\r\n        on report.ad_id = ads.ad_id\r\n        and report.source_relation = ads.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join accounts\r\n        on report.account_id = accounts.account_id\r\n        and report.source_relation = accounts.source_relation\r\n    left join keywords\r\n        on report.keyword_id = keywords.keyword_id\r\n        and report.source_relation = keywords.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_microsoft_ads__search_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__keyword_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__search_daily_report", "model.ps_silver_gold.stg_microsoft_ads__keyword_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads__url_report": {"database": "ps-silver-gold", "schema": "silver_bing_ads_dev", "name": "microsoft_ads__url_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\intermediate\\microsoft_ads__url_report.sql", "original_file_path": "models\\bing\\intermediate\\microsoft_ads__url_report.sql", "unique_id": "model.ps_silver_gold.microsoft_ads__url_report", "fqn": ["ps_silver_gold", "bing", "intermediate", "microsoft_ads__url_report"], "alias": "microsoft_ads__url_report", "checksum": {"name": "sha256", "checksum": "17d350b314083de46c544eb409790d9f41de8f5c4ad3a30292a50105ebf1b436"}, "config": {"enabled": true, "alias": null, "schema": "silver_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_bing_ads_' + target.name if target.name != 'prod' else 'silver_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7812386, "relation_name": "`ps-silver-gold`.`silver_bing_ads_dev`.`microsoft_ads__url_report`", "raw_code": "WITH report AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_microsoft_ads__ad_daily_report') }}\r\n),\r\n\r\nads AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_microsoft_ads__ad_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nad_groups AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_microsoft_ads__ad_group_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\ncampaigns AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_microsoft_ads__campaign_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\naccounts AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_microsoft_ads__account_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nmapping AS (\r\n    SELECT *\r\n    FROM `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'bing'\r\n),\r\n\r\njoined AS (\r\n    SELECT\r\n        report.source_relation,\r\n        report.date_day,\r\n        accounts.account_name,\r\n        report.account_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        ads.ad_name,\r\n        report.ad_id,\r\n        report.device_os,\r\n        report.device_type,\r\n        report.network,\r\n        report.currency_code,\r\n\r\n        -- Macro expands into multiple fields with aliases:\r\n        {{ parse_final_url('ads.final_url') }},\r\n\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n\r\n        SUM(report.clicks) AS clicks,\r\n        SUM(report.impressions) AS impressions,\r\n        SUM(report.spend) AS spend,\r\n        SUM(report.conversions) AS conversions,\r\n        SUM(report.conversions_value) AS conversions_value,\r\n        SUM(report.all_conversions) AS all_conversions,\r\n        SUM(report.all_conversions_value) AS all_conversions_value\r\n\r\n    FROM report\r\n    LEFT JOIN ads\r\n        ON report.ad_id = ads.ad_id\r\n        AND report.source_relation = ads.source_relation\r\n    LEFT JOIN ad_groups\r\n        ON report.ad_group_id = ad_groups.ad_group_id\r\n        AND report.source_relation = ad_groups.source_relation\r\n    LEFT JOIN campaigns\r\n        ON report.campaign_id = campaigns.campaign_id\r\n        AND report.source_relation = campaigns.source_relation\r\n    LEFT JOIN accounts\r\n        ON report.account_id = accounts.account_id\r\n        AND report.source_relation = accounts.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(report.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n    GROUP BY ALL\r\n)\r\n\r\nSELECT *\r\nFROM joined\r\nWHERE base_url IS NOT NULL", "language": "sql", "refs": [{"name": "stg_microsoft_ads__ad_daily_report", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__campaign_history", "package": null, "version": null}, {"name": "stg_microsoft_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.parse_final_url"], "nodes": ["model.ps_silver_gold.stg_microsoft_ads__ad_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__account_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__account_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__account_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__account_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__account_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__account_daily_report"], "alias": "stg_microsoft_ads__account_daily_report", "checksum": {"name": "sha256", "checksum": "2b35add4eccb75c288048afdda8cdfd91b76b34a88b875bde2ccb6b1ce64bd73"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7845085, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__account_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}`.`{{ var('bing_schmema') }}`.`account_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id as account_id, \r\n        ad_distribution as ad_distribution, \r\n        bid_match_type as bid_match_type, \r\n        clicks as clicks, \r\n        currency_code as currency_code, \r\n        date as date, \r\n        delivered_match_type as delivered_match_type, \r\n        device_os as device_os, \r\n        device_type as device_type, \r\n        impressions as impressions, \r\n        network as network, \r\n        spend as spend, \r\n        top_vs_other as top_vs_other, \r\n        conversions_qualified as conversions_qualified, \r\n        conversions as conversions, \r\n        revenue as revenue, \r\n        all_conversions_qualified as all_conversions_qualified,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        currency_code, \r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as integer), cast(conversions as integer)), 0) as conversions,\r\n        coalesce(cast(revenue as float64), 0) as conversions_value,\r\n        coalesce(cast(all_conversions_qualified as integer), 0) as all_conversions\r\n\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__account_history": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__account_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__account_history.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__account_history.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__account_history", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__account_history"], "alias": "stg_microsoft_ads__account_history", "checksum": {"name": "sha256", "checksum": "824cc357e51638b6cf5b7b15f3ead45ebbfd7f00a16661a8b122c33519437449"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7877362, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__account_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.account_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id as id, \r\n        name as name, \r\n        last_modified_time as last_modified_time, \r\n        time_zone as time_zone, \r\n        currency_code as currency_code,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        id as account_id,\r\n        name as account_name,\r\n        last_modified_time as modified_at,\r\n        time_zone,\r\n        currency_code,\r\n        row_number() over (\r\n            partition by source_relation, id \r\n            order by last_modified_time desc\r\n        ) = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__ad_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__ad_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__ad_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__ad_daily_report"], "alias": "stg_microsoft_ads__ad_daily_report", "checksum": {"name": "sha256", "checksum": "4a40ea7941818238c9a3613919fb1b12123742375ac195e72bafff7a8ddc96f7"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.7917402, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__ad_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.ad_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id as account_id, \r\n        ad_distribution as ad_distribution, \r\n        ad_group_id as ad_group_id, \r\n        ad_id as ad_id, \r\n        bid_match_type as bid_match_type, \r\n        campaign_id as campaign_id, \r\n        clicks as clicks, \r\n        currency_code as currency_code, \r\n        date as date, \r\n        delivered_match_type as delivered_match_type, \r\n        device_os as device_os, \r\n        device_type as device_type, \r\n        impressions as impressions, \r\n        language as language, \r\n        network as network, \r\n        spend as spend, \r\n        top_vs_other as top_vs_other, \r\n        conversions_qualified as conversions_qualified, \r\n        conversions as conversions, \r\n        revenue as revenue, \r\n        all_conversions as all_conversions, \r\n        all_conversions_qualified as all_conversions_qualified, \r\n        all_revenue as all_revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        ad_group_id,\r\n        ad_id,\r\n        currency_code,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        language,\r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as INT64), cast(conversions as INT64)), 0) as conversions,\r\n        coalesce(cast(revenue as FLOAT64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as INT64), cast(all_conversions as INT64)), 0) as all_conversions,\r\n        -- sometimes this field comes in as a string\r\n        coalesce(cast(replace(cast(all_revenue as STRING), ',', '') as FLOAT64), 0) as all_conversions_value\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__ad_group_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__ad_group_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__ad_group_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__ad_group_daily_report"], "alias": "stg_microsoft_ads__ad_group_daily_report", "checksum": {"name": "sha256", "checksum": "a83faeba2234e80689b53c06078d4afb3c3657042eb8e55e570c59de9222cb47"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.795179, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__ad_group_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.ad_group_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id as account_id, \r\n        ad_distribution as ad_distribution, \r\n        ad_group_id as ad_group_id, \r\n        bid_match_type as bid_match_type, \r\n        campaign_id as campaign_id, \r\n        clicks as clicks, \r\n        currency_code as currency_code, \r\n        date as date, \r\n        delivered_match_type as delivered_match_type, \r\n        device_os as device_os, \r\n        device_type as device_type, \r\n        impressions as impressions, \r\n        language as language, \r\n        network as network, \r\n        spend as spend, \r\n        top_vs_other as top_vs_other, \r\n        conversions_qualified as conversions_qualified, \r\n        conversions as conversions, \r\n        revenue as revenue, \r\n        all_conversions as all_conversions, \r\n        all_conversions_qualified as all_conversions_qualified, \r\n        all_revenue as all_revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        ad_group_id,\r\n        currency_code,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        language,\r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as INT64), cast(conversions as INT64)), 0) as conversions,\r\n        coalesce(cast(revenue as FLOAT64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as INT64), cast(all_conversions as INT64)), 0) as all_conversions,\r\n        -- sometimes this field comes in as a string\r\n        coalesce(cast(replace(cast(all_revenue as STRING), ',', '') as FLOAT64), 0) as all_conversions_value\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__ad_group_history": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__ad_group_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__ad_group_history.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__ad_group_history.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__ad_group_history"], "alias": "stg_microsoft_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "d07d92fbef7d776c63202cfb670e0cc6732cd21385373df8a6e0cb30ca541c85"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.798076, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__ad_group_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.ad_group_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id as id, \r\n        name as name, \r\n        campaign_id as campaign_id, \r\n        modified_time as modified_time, \r\n        start_date as start_date, \r\n        end_date as end_date, \r\n        status as status,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        id as ad_group_id,\r\n        name as ad_group_name,\r\n        campaign_id,\r\n        modified_time as modified_at,\r\n        start_date,\r\n        end_date,\r\n        status,\r\n        row_number() over (partition by source_relation, id order by modified_time desc) = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__ad_history": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__ad_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__ad_history.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__ad_history.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__ad_history", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__ad_history"], "alias": "stg_microsoft_ads__ad_history", "checksum": {"name": "sha256", "checksum": "0e615704b000984739bdb4a8c1054ff856dd5845911b87c6cedd66a0ce29df1c"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.800622, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__ad_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.ad_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id as id,\r\n        title as title,\r\n        title_part_1 as title_part_1,\r\n        title_part_2 as title_part_2,\r\n        title_part_3 as title_part_3,\r\n        final_url as final_url,\r\n        ad_group_id as ad_group_id,\r\n        modified_time as modified_time,\r\n        status as status,\r\n        type as type,\r\n        domain as domain,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        id as ad_id,\r\n        title_part_1 as ad_name,\r\n        title,\r\n        title_part_1,\r\n        title_part_2,\r\n        title_part_3,\r\n        final_url,\r\n        domain,\r\n        ad_group_id,\r\n        modified_time as modified_at,\r\n        status,\r\n        type,\r\n        row_number() over (partition by source_relation, id order by modified_time desc) = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__campaign_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__campaign_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__campaign_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__campaign_daily_report"], "alias": "stg_microsoft_ads__campaign_daily_report", "checksum": {"name": "sha256", "checksum": "ab73d00ec0bb57e0c8d02d326142155f4b50db857981ecbb8a22f6014b155a97"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.8054173, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__campaign_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.campaign_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id as account_id,\r\n        ad_distribution as ad_distribution,\r\n        bid_match_type as bid_match_type,\r\n        campaign_id as campaign_id,\r\n        clicks as clicks,\r\n        currency_code as currency_code,\r\n        date as date,\r\n        delivered_match_type as delivered_match_type,\r\n        device_os as device_os,\r\n        device_type as device_type,\r\n        impressions as impressions,\r\n        network as network,\r\n        spend as spend,\r\n        top_vs_other as top_vs_other,\r\n        budget_association_status as budget_association_status,\r\n        budget_name as budget_name,\r\n        cast(null as STRING) as budget_status,\r\n        conversions_qualified as conversions_qualified,\r\n        conversions as conversions,\r\n        revenue as revenue,\r\n        all_conversions as all_conversions,\r\n        all_conversions_qualified as all_conversions_qualified,\r\n        all_revenue as all_revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        currency_code,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        budget_association_status,\r\n        budget_name,\r\n        budget_status,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as int64), cast(conversions as int64)), 0) as conversions,\r\n        coalesce(cast(revenue as float64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as int64), cast(all_conversions as int64)), 0) as all_conversions,\r\n        -- sometimes this field comes in as a string\r\n        coalesce(cast(replace(cast(all_revenue as STRING), ',', '') as float64), 0) as all_conversions_value\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__campaign_history": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__campaign_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__campaign_history.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__campaign_history.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__campaign_history"], "alias": "stg_microsoft_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "ae0a5df121f5271917d5ccc12cd80052dc75c397ca1e5bc73bde18459eb701fc"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.8079414, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__campaign_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.campaign_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id as id, \r\n        name as name, \r\n        account_id as account_id, \r\n        modified_time as modified_time, \r\n        type as type, \r\n        time_zone as time_zone, \r\n        status as status, \r\n        budget as budget, \r\n        budget_id as budget_id, \r\n        budget_type as budget_type, \r\n        language as language,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        id as campaign_id,\r\n        name as campaign_name,\r\n        account_id,\r\n        modified_time as modified_at,\r\n        type,\r\n        time_zone,\r\n        status,\r\n        budget,\r\n        budget_id,\r\n        budget_type,\r\n        language,\r\n        row_number() over (\r\n            partition by source_relation, id \r\n            order by modified_time desc\r\n        ) = 1 as is_most_recent_record\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__geographic_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__geographic_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__geographic_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__geographic_daily_report"], "alias": "stg_microsoft_ads__geographic_daily_report", "checksum": {"name": "sha256", "checksum": "0c3a3e44fd89aa29d7cd6aeb8e71f373f061f1dbd4308535a8d6716743903362"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.810705, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__geographic_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.geographic_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id,\r\n        ad_distribution,\r\n        ad_group_id,\r\n        all_conversions,\r\n        all_conversions_qualified,\r\n        all_revenue,\r\n        bid_match_type,\r\n        campaign_id,\r\n        city,\r\n        clicks,\r\n        conversions,\r\n        conversions_qualified,\r\n        country,\r\n        county,\r\n        currency_code,\r\n        date,\r\n        delivered_match_type,\r\n        device_os,\r\n        device_type,\r\n        goal,\r\n        impressions,\r\n        language,\r\n        location_id,\r\n        location_type,\r\n        metro_area,\r\n        cast(null as STRING) as most_specific_location,\r\n        network,\r\n        postal_code,\r\n        spend,\r\n        state,\r\n        top_vs_other,\r\n        revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation,\r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        ad_group_id,\r\n        country,\r\n        state as region,\r\n        county,\r\n        postal_code,\r\n        city,\r\n        metro_area,\r\n        location_id,\r\n        location_type,\r\n        most_specific_location,\r\n        currency_code,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        language,\r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        goal,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as int64), cast(conversions as int64)), 0) as conversions,\r\n        coalesce(cast(revenue as float64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as int64), cast(all_conversions as int64)), 0) as all_conversions,\r\n        coalesce(cast(replace(cast(all_revenue as string), ',', '') as float64), 0) as all_conversions_value\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__keyword_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__keyword_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__keyword_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__keyword_daily_report"], "alias": "stg_microsoft_ads__keyword_daily_report", "checksum": {"name": "sha256", "checksum": "e7bd42e8a959bc669589379ef082a18bafd7b1989edd38295080aa9bed28de01"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.813197, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__keyword_daily_report`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.keyword_performance_daily_report`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        account_id,\r\n        ad_distribution,\r\n        ad_group_id,\r\n        ad_id,\r\n        bid_match_type,\r\n        campaign_id,\r\n        clicks,\r\n        currency_code,\r\n        date,\r\n        delivered_match_type,\r\n        device_os,\r\n        device_type,\r\n        impressions,\r\n        keyword_id,\r\n        language,\r\n        network,\r\n        spend,\r\n        top_vs_other,\r\n        conversions_qualified,\r\n        conversions,\r\n        revenue,\r\n        all_conversions,\r\n        all_conversions_qualified,\r\n        all_revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        ad_group_id,\r\n        ad_id,\r\n        keyword_id,\r\n        currency_code,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        language,\r\n        ad_distribution,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as int64), cast(conversions as int64)), 0) as conversions,\r\n        coalesce(cast(revenue as float64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as int64), cast(all_conversions as int64)), 0) as all_conversions,\r\n        coalesce(cast(replace(cast(all_revenue as STRING), ',', '') as float64), 0) as all_conversions_value\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__keyword_history": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__keyword_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__keyword_history.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__keyword_history.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__keyword_history", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__keyword_history"], "alias": "stg_microsoft_ads__keyword_history", "checksum": {"name": "sha256", "checksum": "442c5924354846d3fc663c719a8005b217258d9c64b911a8fdd18d85a53d9eb9"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.8158774, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__keyword_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.keyword_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id,\r\n        name,\r\n        modified_time,\r\n        ad_group_id,\r\n        match_type,\r\n        status,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        id as keyword_id,\r\n        name as keyword_name,\r\n        modified_time as modified_at,\r\n        ad_group_id,\r\n        match_type,\r\n        status,\r\n        row_number() over (partition by source_relation, id order by modified_time desc) = 1 as is_most_recent_record\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_microsoft_ads__search_daily_report": {"database": "ps-silver-gold", "schema": "staging_bing_ads_dev", "name": "stg_microsoft_ads__search_daily_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "bing\\staging\\stg_microsoft_ads__search_daily_report.sql", "original_file_path": "models\\bing\\staging\\stg_microsoft_ads__search_daily_report.sql", "unique_id": "model.ps_silver_gold.stg_microsoft_ads__search_daily_report", "fqn": ["ps_silver_gold", "bing", "staging", "stg_microsoft_ads__search_daily_report"], "alias": "stg_microsoft_ads__search_daily_report", "checksum": {"name": "sha256", "checksum": "f6b8d95495ae091ec682d5a3f9a2c58d6cd1b96bba715514a986469e8531b23a"}, "config": {"enabled": true, "alias": null, "schema": "staging_bing_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_bing_ads_' + target.name if target.name != 'prod' else 'staging_bing_ads' }}", "materialized": "table"}, "created_at": 1755717738.8189437, "relation_name": "`ps-silver-gold`.`staging_bing_ads_dev`.`stg_microsoft_ads__search_daily_report`", "raw_code": "with base as (\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('bing_schmema') }}.search_query_performance_daily_report`\r\n),\r\n\r\nfields as (\r\n    select\r\n        account_id,\r\n        ad_group_id,\r\n        ad_id,\r\n        bid_match_type,\r\n        campaign_id,\r\n        clicks,\r\n        date,\r\n        delivered_match_type,\r\n        device_os,\r\n        device_type,\r\n        impressions,\r\n        keyword_id,\r\n        language,\r\n        network,\r\n        search_query,\r\n        spend,\r\n        top_vs_other,\r\n        conversions_qualified,\r\n        conversions,\r\n        revenue,\r\n        all_conversions,\r\n        all_conversions_qualified,\r\n        all_revenue,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n    select\r\n        source_relation, \r\n        date as date_day,\r\n        account_id,\r\n        campaign_id,\r\n        ad_group_id,\r\n        ad_id,\r\n        keyword_id,\r\n        search_query,\r\n        device_os,\r\n        device_type,\r\n        network,\r\n        language,\r\n        bid_match_type,\r\n        delivered_match_type,\r\n        top_vs_other,\r\n        coalesce(clicks, 0) as clicks, \r\n        coalesce(impressions, 0) as impressions,\r\n        coalesce(spend, 0) as spend,\r\n        coalesce(coalesce(cast(conversions_qualified as INT64), cast(conversions as INT64)), 0) as conversions,\r\n        coalesce(cast(revenue as FLOAT64), 0) as conversions_value,\r\n        coalesce(coalesce(cast(all_conversions_qualified as INT64), cast(all_conversions as INT64)), 0) as all_conversions,\r\n        coalesce(cast(replace(cast(all_revenue as STRING), ',', '') as FLOAT64), 0) as all_conversions_value\r\n    from fields\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.int_facebook_ads__conversions": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "int_facebook_ads__conversions", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\connecting\\int_facebook_ads__conversions.sql", "original_file_path": "models\\facebook\\connecting\\int_facebook_ads__conversions.sql", "unique_id": "model.ps_silver_gold.int_facebook_ads__conversions", "fqn": ["ps_silver_gold", "facebook", "connecting", "int_facebook_ads__conversions"], "alias": "int_facebook_ads__conversions", "checksum": {"name": "sha256", "checksum": "faae08d11886d69ba45820c7efede20c091ba1b9f40889f9eb98b6dd1e4ac281"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8212729, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`int_facebook_ads__conversions`", "raw_code": "with actions_report as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__basic_ad_actions') }}\r\n),\r\n\r\naction_values_report as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__basic_ad_action_values') }}\r\n),\r\naction_metrics as (\r\n    select\r\n        source_relation,\r\n        ad_id,\r\n        date_day,\r\n        sum(conversions) as conversions\r\n    from actions_report\r\n    where action_type in (\r\n        'onsite_conversion.purchase',\r\n        'onsite_conversion.lead_grouped',\r\n        'offsite_conversion.fb_pixel_purchase',\r\n        'offsite_conversion.fb_pixel_lead',\r\n        'offsite_conversion.fb_pixel_custom'\r\n    )\r\n    group by all\r\n),\r\n\r\naction_value_metrics as (\r\n    select\r\n        source_relation,\r\n        ad_id,\r\n        date_day,\r\n        sum(conversions_value) as conversions_value\r\n    from action_values_report\r\n    where action_type in (\r\n        'onsite_conversion.purchase',\r\n        'onsite_conversion.lead_grouped',\r\n        'offsite_conversion.fb_pixel_purchase',\r\n        'offsite_conversion.fb_pixel_lead',\r\n        'offsite_conversion.fb_pixel_custom'\r\n    )\r\n    group by all\r\n),\r\n\r\nmetrics_join as (\r\n    select\r\n        am.source_relation,\r\n        am.ad_id,\r\n        am.date_day,\r\n        am.conversions,\r\n        avm.conversions_value\r\n    from action_metrics am\r\n    left join action_value_metrics avm\r\n      on am.source_relation = avm.source_relation\r\n      and am.ad_id = avm.ad_id\r\n      and am.date_day = avm.date_day\r\n)\r\n\r\nselect * from metrics_join", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad_actions", "package": null, "version": null}, {"name": "stg_facebook_ads__basic_ad_action_values", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad_actions", "model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__account_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__account_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__account_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__account_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__account_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__account_report"], "alias": "facebook_ads__account_report", "checksum": {"name": "sha256", "checksum": "154a58745267c0add3472a2561a06f8c04e065a740a613c100e097f1409c2616"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8224242, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__account_report`", "raw_code": "WITH report AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__basic_ad') }}\r\n), \r\n\r\nconversion_report AS (\r\n    SELECT *\r\n    FROM {{ ref('int_facebook_ads__conversions') }}\r\n), \r\n\r\naccounts AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nmapping AS (\r\n    SELECT *\r\n    FROM `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'meta'\r\n),\r\n\r\njoined AS (\r\n    SELECT \r\n        report.date_day,\r\n        report.account_id,\r\n        mapping.account_name,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        SUM(report.clicks) AS clicks,\r\n        SUM(report.impressions) AS impressions,\r\n        SUM(report.spend) AS spend,\r\n        SUM(COALESCE(conversion_report.conversions, 0)) AS conversions,\r\n        SUM(COALESCE(conversion_report.conversions_value, 0)) AS conversions_value\r\n\r\n    FROM report \r\n    LEFT JOIN conversion_report\r\n        ON report.date_day = conversion_report.date_day\r\n        AND report.ad_id = conversion_report.ad_id\r\n        AND report.source_relation = conversion_report.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(report.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n    GROUP BY ALL\r\n)\r\n\r\nSELECT *\r\nFROM joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad", "package": null, "version": null}, {"name": "int_facebook_ads__conversions", "package": null, "version": null}, {"name": "stg_facebook_ads__account_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__ad_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__ad_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__ad_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__ad_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__ad_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__ad_report"], "alias": "facebook_ads__ad_report", "checksum": {"name": "sha256", "checksum": "55df8192c3710b2ecf523816add091df79db0b63f664bfcb99b68bd50c0f0817"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8253732, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__ad_report`", "raw_code": "WITH report AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__basic_ad') }}\r\n), \r\n\r\nconversion_report AS (\r\n    SELECT *\r\n    FROM {{ ref('int_facebook_ads__conversions') }}\r\n), \r\n\r\naccounts AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\ncampaigns AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__campaign_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nad_sets AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__ad_set_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nads AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__ad_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nmapping AS (\r\n    SELECT *\r\n    FROM `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'meta'\r\n),\r\n\r\njoined AS (\r\n    SELECT \r\n        report.date_day,\r\n        report.account_id,\r\n        mapping.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_sets.ad_set_id,\r\n        ad_sets.ad_set_name,\r\n        ads.ad_id,\r\n        ads.ad_name,\r\n        ads.conversion_domain,\r\n\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n\r\n        SUM(report.clicks) AS clicks,\r\n        SUM(report.impressions) AS impressions,\r\n        SUM(report.spend) AS spend,\r\n        SUM(COALESCE(conversion_report.conversions, 0)) AS conversions,\r\n        SUM(COALESCE(conversion_report.conversions_value, 0)) AS conversions_value\r\n\r\n    FROM report \r\n    LEFT JOIN conversion_report\r\n        ON report.date_day = conversion_report.date_day\r\n        AND report.ad_id = conversion_report.ad_id\r\n        AND report.source_relation = conversion_report.source_relation\r\n    LEFT JOIN ads \r\n        ON report.ad_id = ads.ad_id\r\n        AND report.source_relation = ads.source_relation\r\n    LEFT JOIN campaigns\r\n        ON ads.campaign_id = campaigns.campaign_id\r\n        AND ads.source_relation = campaigns.source_relation\r\n    LEFT JOIN ad_sets\r\n        ON ads.ad_set_id = ad_sets.ad_set_id\r\n        AND ads.source_relation = ad_sets.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(report.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n    GROUP BY ALL\r\n)\r\n\r\nSELECT *\r\nFROM joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad", "package": null, "version": null}, {"name": "int_facebook_ads__conversions", "package": null, "version": null}, {"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__campaign_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_set_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__campaign_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__ad_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__ad_set_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__ad_set_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__ad_set_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__ad_set_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__ad_set_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__ad_set_report"], "alias": "facebook_ads__ad_set_report", "checksum": {"name": "sha256", "checksum": "55df8192c3710b2ecf523816add091df79db0b63f664bfcb99b68bd50c0f0817"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.828067, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__ad_set_report`", "raw_code": "WITH report AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__basic_ad') }}\r\n), \r\n\r\nconversion_report AS (\r\n    SELECT *\r\n    FROM {{ ref('int_facebook_ads__conversions') }}\r\n), \r\n\r\naccounts AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\ncampaigns AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__campaign_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nad_sets AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__ad_set_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nads AS (\r\n    SELECT *\r\n    FROM {{ ref('stg_facebook_ads__ad_history') }}\r\n    WHERE is_most_recent_record = TRUE\r\n),\r\n\r\nmapping AS (\r\n    SELECT *\r\n    FROM `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'meta'\r\n),\r\n\r\njoined AS (\r\n    SELECT \r\n        report.date_day,\r\n        report.account_id,\r\n        mapping.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_sets.ad_set_id,\r\n        ad_sets.ad_set_name,\r\n        ads.ad_id,\r\n        ads.ad_name,\r\n        ads.conversion_domain,\r\n\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n\r\n        SUM(report.clicks) AS clicks,\r\n        SUM(report.impressions) AS impressions,\r\n        SUM(report.spend) AS spend,\r\n        SUM(COALESCE(conversion_report.conversions, 0)) AS conversions,\r\n        SUM(COALESCE(conversion_report.conversions_value, 0)) AS conversions_value\r\n\r\n    FROM report \r\n    LEFT JOIN conversion_report\r\n        ON report.date_day = conversion_report.date_day\r\n        AND report.ad_id = conversion_report.ad_id\r\n        AND report.source_relation = conversion_report.source_relation\r\n    LEFT JOIN ads \r\n        ON report.ad_id = ads.ad_id\r\n        AND report.source_relation = ads.source_relation\r\n    LEFT JOIN campaigns\r\n        ON ads.campaign_id = campaigns.campaign_id\r\n        AND ads.source_relation = campaigns.source_relation\r\n    LEFT JOIN ad_sets\r\n        ON ads.ad_set_id = ad_sets.ad_set_id\r\n        AND ads.source_relation = ad_sets.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(report.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n    GROUP BY ALL\r\n)\r\n\r\nSELECT *\r\nFROM joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad", "package": null, "version": null}, {"name": "int_facebook_ads__conversions", "package": null, "version": null}, {"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__campaign_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_set_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__campaign_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__ad_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__campaign_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__campaign_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__campaign_report"], "alias": "facebook_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "b23d9d1bf54d9ffa602845415ef730a96850f7ef4f066ca9257aecf4afd05d5c"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.831529, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__campaign_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__basic_ad') }}\r\n), \r\n\r\nconversion_report as (\r\n    select *\r\n    from {{ ref('int_facebook_ads__conversions') }}\r\n), \r\n\r\naccounts as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__account_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__campaign_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__ad_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'meta'\r\n),\r\n\r\njoined as (\r\n    select \r\n        report.date_day,\r\n        report.account_id,\r\n        mapping.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.start_at,\r\n        campaigns.end_at,\r\n        campaigns.status,\r\n        campaigns.daily_budget,\r\n        campaigns.lifetime_budget,\r\n        campaigns.budget_remaining,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.spend) as spend,\r\n        sum(coalesce(conversion_report.conversions, 0)) as conversions,\r\n        sum(coalesce(conversion_report.conversions_value, 0)) as conversions_value\r\n    from report\r\n    left join conversion_report\r\n        on report.date_day = conversion_report.date_day\r\n        and report.ad_id = conversion_report.ad_id\r\n        and report.source_relation = conversion_report.source_relation\r\n    left join ads\r\n        on report.ad_id = ads.ad_id\r\n        and report.source_relation = ads.source_relation\r\n    left join campaigns\r\n        on ads.campaign_id = campaigns.campaign_id\r\n        and ads.source_relation = campaigns.source_relation\r\n    left join mapping\r\n        on cast(report.account_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad", "package": null, "version": null}, {"name": "int_facebook_ads__conversions", "package": null, "version": null}, {"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__campaign_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__campaign_history", "model.ps_silver_gold.stg_facebook_ads__ad_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__country_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__country_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__country_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__country_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__country_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__country_report"], "alias": "facebook_ads__country_report", "checksum": {"name": "sha256", "checksum": "7d86def4824d02c15ddbf266b93e26ab96766aefbbd6e87d973d2cda1d516123"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.834666, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__country_report`", "raw_code": "WITH accounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\ndemographics_country AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__demographics_country') }}\r\n),\r\ndemographics_country_actions AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__demographics_country_actions') }}\r\n),\r\ncountry_conversions AS (\r\n    SELECT\r\n        source_relation,\r\n        account_id,\r\n        country_id,\r\n        date_day,\r\n        SUM(conversions) AS conversions\r\n    FROM\r\n        {{ ref('stg_facebook_ads__demographics_country_actions') }}\r\n    WHERE\r\n        action_type IN (\r\n            'onsite_conversion.purchase',\r\n            'onsite_conversion.lead_grouped',\r\n            'offsite_conversion.fb_pixel_purchase',\r\n            'offsite_conversion.fb_pixel_lead',\r\n            'offsite_conversion.fb_pixel_custom'\r\n        )\r\n    GROUP BY\r\n        ALL\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE\r\n        ad_platform = 'meta'\r\n),\r\njoined AS (\r\n    SELECT\r\n        dc.source_relation,\r\n        dc.date_day,\r\n        dc.country_id,\r\n        dc.country,\r\n        dc.account_id,\r\n        mapping.account_name,\r\n        /* A.account_name, A.business_country_code AS account_business_country_code, A.timezone_name AS account_timezone, A.timezone_offset_hours_utc AS account_timezone_offset_hours_utc, A.currency AS account_currency, A.min_daily_budget AS account_min_daily_budget, */\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        SUM(\r\n            dc.impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            dc.clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            dc.spend\r\n        ) AS spend,\r\n        SUM(\r\n            dc.reach\r\n        ) AS reach,\r\n        SUM(\r\n            dc.frequency\r\n        ) AS frequency,\r\n        SUM(COALESCE(cc.conversions, 0)) AS conversions\r\n    FROM\r\n        demographics_country dc\r\n        LEFT JOIN country_conversions cc\r\n        ON dc.country_id = cc.country_id\r\n        AND dc.account_id = cc.account_id\r\n        AND dc.date_day = cc.date_day\r\n        AND dc.source_relation = cc.source_relation\r\n        /* left join accounts a on dc.account_id = a.account_id and dc.source_relation = a.source_relation */\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            dc.account_id AS STRING\r\n        ) = CAST(\r\n            mapping.account_id AS STRING\r\n        )\r\n    GROUP BY\r\n        ALL\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__demographics_country", "package": null, "version": null}, {"name": "stg_facebook_ads__demographics_country_actions", "package": null, "version": null}, {"name": "stg_facebook_ads__demographics_country_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__demographics_country", "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__region_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__region_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__region_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__region_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__region_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__region_report"], "alias": "facebook_ads__region_report", "checksum": {"name": "sha256", "checksum": "167e4a7928614f5a43c49e5eecd5b206964e6dde871de83d1310e603422b05d2"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8380096, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__region_report`", "raw_code": "WITH accounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\ndemographics_region AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__demographics_region') }}\r\n),\r\ndemographics_region_actions AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__demographics_region_actions') }}\r\n),\r\nregion_conversions AS (\r\n    SELECT\r\n        source_relation,\r\n        account_id,\r\n        region_id,\r\n        date_day,\r\n        SUM(conversions) AS conversions\r\n    FROM\r\n        demographics_region_actions\r\n    WHERE\r\n        action_type IN (\r\n            'onsite_conversion.purchase',\r\n            'onsite_conversion.lead_grouped',\r\n            'offsite_conversion.fb_pixel_purchase',\r\n            'offsite_conversion.fb_pixel_lead',\r\n            'offsite_conversion.fb_pixel_custom'\r\n        )\r\n    GROUP BY\r\n        ALL\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE\r\n        ad_platform = 'meta'\r\n),\r\njoined AS (\r\n    SELECT\r\n        dr.date_day,\r\n        dr.region_id,\r\n        dr.region,\r\n        dr.account_id,\r\n        m.account_name,\r\n        /*\r\n                a.business_state as account_business_state,\r\n                a.business_country_code as account_business_country_code,\r\n                a.timezone_name as account_timezone,\r\n                a.timezone_offset_hours_utc as account_timezone_offset_hours_utc,\r\n                a.currency as account_currency,\r\n                a.min_daily_budget as account_min_daily_budget,\r\n        */\r\n        m.client_name,\r\n        m.client_id,\r\n        m.ad_platform,\r\n        m.sub_client_name,\r\n        SUM(\r\n            dr.impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            dr.clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            dr.spend\r\n        ) AS spend,\r\n        SUM(\r\n            dr.reach\r\n        ) AS reach,\r\n        SUM(\r\n            dr.frequency\r\n        ) AS frequency,\r\n        SUM(COALESCE(rc.conversions, 0)) AS conversions\r\n    FROM\r\n        demographics_region dr\r\n        LEFT JOIN region_conversions rc\r\n        ON dr.region_id = rc.region_id\r\n        AND dr.account_id = rc.account_id\r\n        AND dr.date_day = rc.date_day\r\n        AND dr.source_relation = rc.source_relation\r\n        /*left join accounts a\r\n                on dr.account_id = a.account_id\r\n                and dr.source_relation = a.source_relation*/\r\n        LEFT JOIN mapping m\r\n        ON CAST(\r\n            dr.account_id AS STRING\r\n        ) = CAST(\r\n            m.account_id AS STRING\r\n        )\r\n    GROUP BY\r\n        ALL\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__demographics_region", "package": null, "version": null}, {"name": "stg_facebook_ads__demographics_region_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__demographics_region", "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__url_report": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__url_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__url_report.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__url_report.sql", "unique_id": "model.ps_silver_gold.facebook_ads__url_report", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__url_report"], "alias": "facebook_ads__url_report", "checksum": {"name": "sha256", "checksum": "9628be889069b8f00d2628c04a030fa8a1b135436e7a2283b1646ed95bbc8909"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8409996, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__url_report`", "raw_code": "WITH report AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__basic_ad') }}\r\n),\r\nconversion_report AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('int_facebook_ads__conversions') }}\r\n),\r\ncreatives AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('int_facebook_ads__creative_history') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__account_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\nads AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__ad_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\nad_sets AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__ad_set_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_facebook_ads__campaign_history') }}\r\n    WHERE\r\n        is_most_recent_record = TRUE\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE\r\n        ad_platform = 'meta'\r\n),\r\njoined AS (\r\n    SELECT\r\n        report.date_day,\r\n        /*accounts.account_id,\r\n                accounts.account_name,*/\r\n        report.account_id,\r\n        mapping.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_sets.ad_set_id,\r\n        ad_sets.ad_set_name,\r\n        ads.ad_id,\r\n        ads.ad_name,\r\n        creatives.creative_id,\r\n        creatives.creative_name,\r\n        creatives.base_url,\r\n        creatives.url_host,\r\n        creatives.url_path,\r\n        creatives.utm_source,\r\n        creatives.utm_medium,\r\n        creatives.utm_campaign,\r\n        creatives.utm_content,\r\n        creatives.utm_term,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        SUM(\r\n            report.clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            report.impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            report.spend\r\n        ) AS spend,\r\n        SUM(COALESCE(conversion_report.conversions, 0)) AS conversions,\r\n        SUM(COALESCE(conversion_report.conversions_value, 0)) AS conversions_value\r\n    FROM\r\n        report\r\n        LEFT JOIN conversion_report\r\n        ON report.date_day = conversion_report.date_day\r\n        AND report.ad_id = conversion_report.ad_id\r\n        AND report.source_relation = conversion_report.source_relation\r\n        LEFT JOIN ads\r\n        ON report.ad_id = ads.ad_id\r\n        AND report.source_relation = ads.source_relation\r\n        LEFT JOIN creatives\r\n        ON ads.creative_id = creatives.creative_id\r\n        AND ads.source_relation = creatives.source_relation\r\n        LEFT JOIN ad_sets\r\n        ON ads.ad_set_id = ad_sets.ad_set_id\r\n        AND ads.source_relation = ad_sets.source_relation\r\n        LEFT JOIN campaigns\r\n        ON ads.campaign_id = campaigns.campaign_id\r\n        AND ads.source_relation = campaigns.source_relation\r\n        /*LEFT JOIN accounts\r\n        ON report.account_id = accounts.account_id\r\n        AND report.source_relation = accounts.source_relation*/\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            report.account_id AS STRING\r\n        ) = CAST(\r\n            mapping.account_id AS STRING\r\n        )\r\n    WHERE\r\n        creatives.url IS NOT NULL\r\n    GROUP BY\r\n        ALL\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    joined", "language": "sql", "refs": [{"name": "stg_facebook_ads__basic_ad", "package": null, "version": null}, {"name": "int_facebook_ads__conversions", "package": null, "version": null}, {"name": "int_facebook_ads__creative_history", "package": null, "version": null}, {"name": "stg_facebook_ads__account_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_history", "package": null, "version": null}, {"name": "stg_facebook_ads__ad_set_history", "package": null, "version": null}, {"name": "stg_facebook_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.int_facebook_ads__creative_history", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__ad_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__campaign_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.facebook_ads__url_tags": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "facebook_ads__url_tags", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\facebook_ads__url_tags.sql", "original_file_path": "models\\facebook\\intermediate\\facebook_ads__url_tags.sql", "unique_id": "model.ps_silver_gold.facebook_ads__url_tags", "fqn": ["ps_silver_gold", "facebook", "intermediate", "facebook_ads__url_tags"], "alias": "facebook_ads__url_tags", "checksum": {"name": "sha256", "checksum": "94fed9b8289a873ce48127991f30d968a6886e4e305a937e6e75db3e3bc28f33"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.843778, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`facebook_ads__url_tags`", "raw_code": "with base as (\r\n\r\n    select *\r\n    from {{ ref('stg_facebook_ads__creative_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nrequired_fields as (\r\n\r\n    select\r\n        source_relation,\r\n        _fivetran_id,\r\n        creative_id,\r\n        url_tags\r\n    from base\r\n    where url_tags is not null\r\n), \r\n\r\ncleaned_json as (\r\n\r\n    select\r\n        source_relation,\r\n        _fivetran_id,\r\n        creative_id,\r\n        json_extract_array(replace(trim(url_tags, '\"'),'\\\\','')) as cleaned_url_tags\r\n    from required_fields\r\n), \r\n\r\nunnested as (\r\n\r\n    select \r\n        source_relation,\r\n        _fivetran_id, \r\n        creative_id, \r\n        url_tag_element\r\n    from cleaned_json,\r\n    unnest(cleaned_url_tags) as url_tag_element\r\n    where cleaned_url_tags is not null\r\n), \r\n\r\nfields as (\r\n\r\n    select\r\n        source_relation,\r\n        _fivetran_id,\r\n        creative_id,\r\n        json_extract_scalar(url_tag_element, '$.key') as key,\r\n        json_extract_scalar(url_tag_element, '$.value') as value,\r\n        json_extract_scalar(url_tag_element, '$.type') as type\r\n    from unnested\r\n)\r\n\r\nselect *\r\nfrom fields", "language": "sql", "refs": [{"name": "stg_facebook_ads__creative_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_facebook_ads__creative_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.int_facebook_ads__creative_history": {"database": "ps-silver-gold", "schema": "silver_facebook_ads_dev", "name": "int_facebook_ads__creative_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\intermediate\\int_facebook_ads__creative_history.sql", "original_file_path": "models\\facebook\\intermediate\\int_facebook_ads__creative_history.sql", "unique_id": "model.ps_silver_gold.int_facebook_ads__creative_history", "fqn": ["ps_silver_gold", "facebook", "intermediate", "int_facebook_ads__creative_history"], "alias": "int_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "633a69446cfba1305da8710514d0b48b81fab58368023efbe9a8abebaa7940ab"}, "config": {"enabled": true, "alias": null, "schema": "silver_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_facebook_ads_' + target.name if target.name != 'prod' else 'silver_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8447423, "relation_name": "`ps-silver-gold`.`silver_facebook_ads_dev`.`int_facebook_ads__creative_history`", "raw_code": "with base as (\r\n    select *\r\n    from {{ ref('stg_facebook_ads__creative_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\nurl_tags as (\r\n    select *\r\n    from {{ ref('facebook_ads__url_tags') }}\r\n),\r\n\r\nurl_tags_pivoted as (\r\n    select \r\n        source_relation,\r\n        _fivetran_id,\r\n        creative_id,\r\n        min(case when key = 'utm_source' then value end) as utm_source,\r\n        min(case when key = 'utm_medium' then value end) as utm_medium,\r\n        min(case when key = 'utm_campaign' then value end) as utm_campaign,\r\n        min(case when key = 'utm_content' then value end) as utm_content,\r\n        min(case when key = 'utm_term' then value end) as utm_term\r\n    from url_tags\r\n    group by 1,2,3\r\n),\r\n\r\nfields as (\r\n    select\r\n        base.source_relation,\r\n        base._fivetran_id,\r\n        base.creative_id,\r\n        base.account_id,\r\n        base.creative_name,\r\n        coalesce(page_link, template_page_link) as url,\r\n        split(coalesce(page_link, template_page_link), '?')[safe_offset(0)] as base_url,\r\n        \r\n        -- Using macros for cleaner code\r\n        {{ get_url_host('coalesce(page_link, template_page_link)') }} as url_host,\r\n        {{ get_url_path('coalesce(page_link, template_page_link)') }} as url_path,\r\n        \r\n        -- UTM parameters with fallback to URL parsing\r\n        coalesce(\r\n            url_tags_pivoted.utm_source,\r\n            {{ extract_utm_param('coalesce(page_link, template_page_link)', 'utm_source') }}\r\n        ) as utm_source,\r\n        \r\n        coalesce(\r\n            url_tags_pivoted.utm_medium,\r\n            {{ extract_utm_param('coalesce(page_link, template_page_link)', 'utm_medium') }}\r\n        ) as utm_medium,\r\n        \r\n        coalesce(\r\n            url_tags_pivoted.utm_campaign,\r\n            {{ extract_utm_param('coalesce(page_link, template_page_link)', 'utm_campaign') }}\r\n        ) as utm_campaign,\r\n        \r\n        coalesce(\r\n            url_tags_pivoted.utm_content,\r\n            {{ extract_utm_param('coalesce(page_link, template_page_link)', 'utm_content') }}\r\n        ) as utm_content,\r\n        \r\n        coalesce(\r\n            url_tags_pivoted.utm_term,\r\n            {{ extract_utm_param('coalesce(page_link, template_page_link)', 'utm_term') }}\r\n        ) as utm_term\r\n\r\n    from base\r\n    left join url_tags_pivoted\r\n        on base._fivetran_id = url_tags_pivoted._fivetran_id\r\n        and base.source_relation = url_tags_pivoted.source_relation\r\n        and base.creative_id = url_tags_pivoted.creative_id\r\n)\r\n\r\nselect * from fields", "language": "sql", "refs": [{"name": "stg_facebook_ads__creative_history", "package": null, "version": null}, {"name": "facebook_ads__url_tags", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.get_url_host", "macro.ps_silver_gold.get_url_path", "macro.ps_silver_gold.extract_utm_param"], "nodes": ["model.ps_silver_gold.stg_facebook_ads__creative_history", "model.ps_silver_gold.facebook_ads__url_tags"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__account_history": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__account_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__account_history.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__account_history.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__account_history", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__account_history"], "alias": "stg_facebook_ads__account_history", "checksum": {"name": "sha256", "checksum": "1ba3648f4125f27bde9d23d4c10c024dd562947e0fe3017fb249a0be203e29fa"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8487604, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__account_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{var('bronze_project')}}.{{ var('rawfb_schema') }}.account_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        id as id,\r\n        _fivetran_synced as _fivetran_synced,\r\n        name as name,\r\n        cast(null as string) as account_status,\r\n        cast(null as string) as business_country_code,\r\n        cast(null as timestamp) as created_time,\r\n        cast(null as string) as currency,\r\n        cast(null as string) as timezone_name,\r\n        cast(null as float64) as timezone_offset_hours_utc,\r\n        cast(null as string) as business_state,\r\n        cast(null as int64) as min_daily_budget,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        cast(id as bigint) as account_id,\r\n        _fivetran_synced,\r\n        name as account_name,\r\n        account_status,\r\n        business_country_code,\r\n        business_state,\r\n        created_time as created_at,\r\n        currency,\r\n        timezone_name,\r\n        timezone_offset_hours_utc,\r\n        min_daily_budget,\r\n        case \r\n            when id is null and _fivetran_synced is null then \r\n                row_number() over (partition by source_relation order by source_relation)\r\n            else \r\n                row_number() over (partition by source_relation, id order by _fivetran_synced desc) \r\n        end = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__ad_history": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__ad_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__ad_history.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__ad_history.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__ad_history", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__ad_history"], "alias": "stg_facebook_ads__ad_history", "checksum": {"name": "sha256", "checksum": "d10f2569e7a9782c24334f0c09f23db97064509af69056a5ac4ea2be9d9dcdd9"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.851509, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__ad_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.ad_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        updated_time as updated_time, \r\n        id as id, \r\n        name as name, \r\n        account_id as account_id, \r\n        ad_set_id as ad_set_id, \r\n        campaign_id as campaign_id, \r\n        creative_id as creative_id, \r\n        cast(null as string) as conversion_domain,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        updated_time as updated_at,\r\n        cast(id as bigint) as ad_id,\r\n        name as ad_name,\r\n        cast(account_id as bigint) as account_id,\r\n        cast(ad_set_id as bigint) as ad_set_id,   \r\n        cast(campaign_id as bigint) as campaign_id,\r\n        cast(creative_id as bigint) as creative_id,\r\n        conversion_domain,\r\n        case \r\n            when id is null and updated_time is null then \r\n                row_number() over (partition by source_relation order by source_relation)\r\n            else \r\n                row_number() over (partition by source_relation, id order by updated_time desc) \r\n        end = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__ad_set_history": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__ad_set_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__ad_set_history.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__ad_set_history.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__ad_set_history"], "alias": "stg_facebook_ads__ad_set_history", "checksum": {"name": "sha256", "checksum": "60e4af28c0d5efd0daca112caefc44b452124fc08fb88474bbc48f1bb68932f2"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8544486, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__ad_set_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.ad_set_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        updated_time as updated_time, \r\n        id as id, \r\n        name as name, \r\n        account_id as account_id, \r\n        campaign_id as campaign_id, \r\n        cast(null as timestamp) as start_time, \r\n        cast(null as timestamp) as end_time, \r\n        cast(null as string) as bid_strategy, \r\n        cast(null as int64) as daily_budget, \r\n        cast(null as int64) as budget_remaining, \r\n        cast(null as string) as status, \r\n        cast(null as string) as optimization_goal,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        updated_time as updated_at,\r\n        cast(id as bigint) as ad_set_id,\r\n        name as ad_set_name,\r\n        cast(account_id as bigint) as account_id,\r\n        cast(campaign_id as bigint) as campaign_id,\r\n        start_time as start_at,\r\n        end_time as end_at,\r\n        bid_strategy,\r\n        daily_budget,\r\n        budget_remaining,\r\n        status,\r\n        optimization_goal,\r\n        case \r\n            when id is null and updated_time is null then \r\n                row_number() over (partition by source_relation order by source_relation)\r\n            else \r\n                row_number() over (partition by source_relation, id order by updated_time desc) \r\n        end = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__basic_ad": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__basic_ad", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__basic_ad.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__basic_ad.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__basic_ad", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__basic_ad"], "alias": "stg_facebook_ads__basic_ad", "checksum": {"name": "sha256", "checksum": "85917758316ab46fc9ad015824160eae444be7eee114bc14ef55e5b2217ad4d1"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8571734, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__basic_ad`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.basic_ad`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        ad_id as ad_id, \r\n        cast(null as string) as ad_name, \r\n        cast(null as string) as adset_name, \r\n        date as date, \r\n        account_id as account_id, \r\n        impressions as impressions, \r\n        inline_link_clicks as inline_link_clicks, \r\n        spend as spend, \r\n        reach as reach, \r\n        cast(null as FLOAT64) as frequency,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        cast(ad_id as bigint) as ad_id,\r\n        ad_name,\r\n        adset_name as ad_set_name,\r\n        date as date_day,\r\n        cast(account_id as bigint) as account_id,\r\n        impressions,\r\n        coalesce(inline_link_clicks, 0) as clicks,\r\n        spend,\r\n        reach,\r\n        frequency\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__basic_ad_actions": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__basic_ad_actions", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__basic_ad_actions.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__basic_ad_actions.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__basic_ad_actions", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__basic_ad_actions"], "alias": "stg_facebook_ads__basic_ad_actions", "checksum": {"name": "sha256", "checksum": "80cde3a5c18c7f01f1804252c0fd82af22579b5f2481faf028938f3528f64702"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8593485, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__basic_ad_actions`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.basic_ad_actions`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id as _fivetran_id, \r\n        _fivetran_synced as _fivetran_synced, \r\n        action_type as action_type, \r\n        ad_id as ad_id, \r\n        date as date, \r\n        index as index, \r\n        value as value,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n    \r\n    select \r\n        source_relation, \r\n        lower(action_type) as action_type,\r\n        cast(ad_id as bigint) as ad_id,\r\n        date as date_day,\r\n        cast(coalesce(value, 0) as FLOAT64) as conversions\r\n    from fields\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__basic_ad_action_values", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__basic_ad_action_values.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__basic_ad_action_values.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__basic_ad_action_values"], "alias": "stg_facebook_ads__basic_ad_action_values", "checksum": {"name": "sha256", "checksum": "4abbf0a2ee1db68b2f2d21db5baca8e498933900d3fcfd321e2434b3da503feb"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.862275, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__basic_ad_action_values`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.basic_ad_action_values`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id as _fivetran_id, \r\n        _fivetran_synced as _fivetran_synced, \r\n        action_type as action_type, \r\n        ad_id as ad_id, \r\n        date as date, \r\n        index as index, \r\n        value as value,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n    \r\n    select \r\n        source_relation, \r\n        lower(action_type) as action_type,\r\n        cast(ad_id as bigint) as ad_id,\r\n        date as date_day,\r\n        cast(coalesce(value, 0) as FLOAT64) as conversions_value\r\n    from fields\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__campaign_history": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__campaign_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__campaign_history.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__campaign_history.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__campaign_history", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__campaign_history"], "alias": "stg_facebook_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "17cf841630aae806b3c365a68d5d9af21fca1465131800436801d9e26ab31cc6"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.864716, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__campaign_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.campaign_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        updated_time as updated_time, \r\n        cast(null as timestamp) as created_time, \r\n        account_id as account_id, \r\n        id as id, \r\n        name as name, \r\n        cast(null as timestamp) as start_time, \r\n        cast(null as timestamp) as stop_time, \r\n        cast(null as string) as status, \r\n        cast(null as INT64) as daily_budget, \r\n        cast(null as INT64) as lifetime_budget, \r\n        cast(null as FLOAT64) as budget_remaining,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        updated_time as updated_at,\r\n        created_time as created_at,\r\n        cast(account_id as bigint) as account_id,\r\n        cast(id as bigint) as campaign_id,\r\n        name as campaign_name,\r\n        start_time as start_at,\r\n        stop_time as end_at,\r\n        status,\r\n        daily_budget,\r\n        lifetime_budget,\r\n        budget_remaining,\r\n        case \r\n            when id is null and updated_time is null \r\n                then row_number() over (partition by source_relation order by source_relation)\r\n            else \r\n                row_number() over (partition by source_relation, id order by updated_time desc) \r\n        end = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__creative_history": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__creative_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__creative_history.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__creative_history.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__creative_history", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__creative_history"], "alias": "stg_facebook_ads__creative_history", "checksum": {"name": "sha256", "checksum": "4412ae9c4541c01496fe849571e681f7756589198c0920db4228897ab4ad35c8"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8671002, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__creative_history`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.creative_history`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        id,\r\n        account_id,\r\n        name,\r\n        page_link,\r\n        template_page_link,\r\n        url_tags,\r\n        asset_feed_spec_link_urls,\r\n        object_story_link_data_child_attachments,\r\n        object_story_link_data_caption,\r\n        object_story_link_data_description,\r\n        object_story_link_data_link,\r\n        object_story_link_data_message,\r\n        cast(null as string) as template_app_link_spec_android,\r\n        template_app_link_spec_ios,\r\n        cast(null as string) as template_app_link_spec_ipad,\r\n        cast(null as string) as template_app_link_spec_iphone,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        source_relation, \r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        cast(id as bigint) as creative_id,\r\n        cast(account_id as bigint) as account_id,\r\n        name as creative_name,\r\n        page_link,\r\n        template_page_link,\r\n        url_tags,\r\n        asset_feed_spec_link_urls,\r\n        object_story_link_data_child_attachments,\r\n        object_story_link_data_caption, \r\n        object_story_link_data_description, \r\n        object_story_link_data_link, \r\n        object_story_link_data_message,\r\n        template_app_link_spec_ios,\r\n        template_app_link_spec_ipad,\r\n        template_app_link_spec_android,\r\n        template_app_link_spec_iphone,\r\n        case \r\n            when id is null and _fivetran_synced is null \r\n                then row_number() over (partition by source_relation order by source_relation)\r\n            else row_number() over (partition by source_relation, id order by _fivetran_synced desc) \r\n        end = 1 as is_most_recent_record\r\n    from fields\r\n\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__demographics_country": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__demographics_country", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__demographics_country.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__demographics_country.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__demographics_country", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__demographics_country"], "alias": "stg_facebook_ads__demographics_country", "checksum": {"name": "sha256", "checksum": "b4cbacf859145a93fed49b7a8aac325e2bc8ef56c594339f5ea69ddf00a08f71"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8703437, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__demographics_country`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.demographics_country`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id as _fivetran_id,\r\n        _fivetran_synced as _fivetran_synced,\r\n        account_id as account_id,\r\n        country as country,\r\n        date as date,\r\n        frequency as frequency,\r\n        impressions as impressions,\r\n        inline_link_clicks as inline_link_clicks,\r\n        reach as reach,\r\n        spend as spend,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        source_relation, \r\n        _fivetran_id as country_id,\r\n        country,\r\n        date as date_day,\r\n        cast(account_id as bigint) as account_id,\r\n        impressions,\r\n        coalesce(inline_link_clicks, 0) as clicks,\r\n        spend,\r\n        reach,\r\n        frequency\r\n    from fields\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__demographics_country_actions", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__demographics_country_actions.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__demographics_country_actions.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__demographics_country_actions"], "alias": "stg_facebook_ads__demographics_country_actions", "checksum": {"name": "sha256", "checksum": "d440ee685cd4b8776f709e8052ba6567391dc5175f180d88e4ed3c597a78dd1f"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8728564, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__demographics_country_actions`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('rawfb_schema') }}.demographics_country_actions`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        account_id,\r\n        action_type,\r\n        date,\r\n        index,\r\n        value,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n    \r\n    select \r\n        source_relation, \r\n        _fivetran_id as country_id,\r\n        lower(action_type) as action_type,\r\n        cast(account_id as bigint) as account_id,\r\n        date as date_day,\r\n        cast(coalesce(value, 0) as FLOAT64) as conversions\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__demographics_region": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__demographics_region", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__demographics_region.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__demographics_region.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__demographics_region", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__demographics_region"], "alias": "stg_facebook_ads__demographics_region", "checksum": {"name": "sha256", "checksum": "5cba83416c286777bc929e012a7c3d49739fd8e78c12e65a4391608e7a10e11f"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8752723, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__demographics_region`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `secure-electron-279822`.`raw_facebook_ads`.`demographics_region`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        account_id,\r\n        date,\r\n        frequency,\r\n        impressions,\r\n        inline_link_clicks,\r\n        reach,\r\n        region,\r\n        spend,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n    \r\n    select \r\n        source_relation, \r\n        _fivetran_id as region_id,\r\n        region,\r\n        date as date_day,\r\n        cast(account_id as bigint) as account_id,\r\n        impressions,\r\n        coalesce(inline_link_clicks, 0) as clicks,\r\n        spend,\r\n        reach,\r\n        frequency\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions": {"database": "ps-silver-gold", "schema": "staging_facebook_ads_dev", "name": "stg_facebook_ads__demographics_region_actions", "resource_type": "model", "package_name": "ps_silver_gold", "path": "facebook\\staging\\stg_facebook_ads__demographics_region_actions.sql", "original_file_path": "models\\facebook\\staging\\stg_facebook_ads__demographics_region_actions.sql", "unique_id": "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions", "fqn": ["ps_silver_gold", "facebook", "staging", "stg_facebook_ads__demographics_region_actions"], "alias": "stg_facebook_ads__demographics_region_actions", "checksum": {"name": "sha256", "checksum": "b07ca4ef894c4a3e389c1b133b104724b4af4be8c57a1dae2e2f92f823988fea"}, "config": {"enabled": true, "alias": null, "schema": "staging_facebook_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_facebook_ads_' + target.name if target.name != 'prod' else 'staging_facebook_ads' }}", "materialized": "table"}, "created_at": 1755717738.8767173, "relation_name": "`ps-silver-gold`.`staging_facebook_ads_dev`.`stg_facebook_ads__demographics_region_actions`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from `secure-electron-279822`.`raw_facebook_ads`.`demographics_region_actions`\r\n\r\n),\r\n\r\nfields as (\r\n\r\n    select\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        account_id,\r\n        action_type,\r\n        date,\r\n        value,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfinal as (\r\n    \r\n    select \r\n        source_relation, \r\n        _fivetran_id as region_id,\r\n        lower(action_type) as action_type,\r\n        cast(account_id as bigint) as account_id,\r\n        date as date_day,\r\n        cast(coalesce(value, 0) as FLOAT64) as conversions\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.microsoft_ads_accounts": {"database": "ps-silver-gold", "schema": "fact_lookup_dev", "name": "microsoft_ads_accounts", "resource_type": "model", "package_name": "ps_silver_gold", "path": "fact_lookup\\bing\\microsoft_ads_accounts.sql", "original_file_path": "models\\fact_lookup\\bing\\microsoft_ads_accounts.sql", "unique_id": "model.ps_silver_gold.microsoft_ads_accounts", "fqn": ["ps_silver_gold", "fact_lookup", "bing", "microsoft_ads_accounts"], "alias": "microsoft_ads_accounts", "checksum": {"name": "sha256", "checksum": "71cb3f3b2814989140bcf9dd17c779d56eb24facd730d3617902dde8e3bb3ad1"}, "config": {"enabled": true, "alias": null, "schema": "fact_lookup_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'fact_lookup_' + target.name if target.name != 'prod' else 'fact_lookup' }}", "materialized": "table"}, "created_at": 1755717738.8777075, "relation_name": "`ps-silver-gold`.`fact_lookup_dev`.`microsoft_ads_accounts`", "raw_code": "select distinct account_name, account_id from {{ ref('microsoft_ads__account_report') }}", "language": "sql", "refs": [{"name": "microsoft_ads__account_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.microsoft_ads__account_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads_accounts": {"database": "ps-silver-gold", "schema": "fact_lookup_dev", "name": "pinterest_ads_accounts", "resource_type": "model", "package_name": "ps_silver_gold", "path": "fact_lookup\\pinterest\\pinterest_ads_accounts.sql", "original_file_path": "models\\fact_lookup\\pinterest\\pinterest_ads_accounts.sql", "unique_id": "model.ps_silver_gold.pinterest_ads_accounts", "fqn": ["ps_silver_gold", "fact_lookup", "pinterest", "pinterest_ads_accounts"], "alias": "pinterest_ads_accounts", "checksum": {"name": "sha256", "checksum": "c3c973b09a627f96a80a87e6e4c94a697a4303e2347192d63f5cea8a10a64ebb"}, "config": {"enabled": true, "alias": null, "schema": "fact_lookup_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'fact_lookup_' + target.name if target.name != 'prod' else 'fact_lookup' }}", "materialized": "table"}, "created_at": 1755717738.8786166, "relation_name": "`ps-silver-gold`.`fact_lookup_dev`.`pinterest_ads_accounts`", "raw_code": "select distinct advertiser_name, advertiser_id from {{ ref('pinterest_ads__advertiser_report') }}", "language": "sql", "refs": [{"name": "pinterest_ads__advertiser_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.pinterest_ads__advertiser_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads_accounts": {"database": "ps-silver-gold", "schema": "fact_lookup_dev", "name": "tiktok_ads_accounts", "resource_type": "model", "package_name": "ps_silver_gold", "path": "fact_lookup\\tiktok\\tiktok_ads_accounts.sql", "original_file_path": "models\\fact_lookup\\tiktok\\tiktok_ads_accounts.sql", "unique_id": "model.ps_silver_gold.tiktok_ads_accounts", "fqn": ["ps_silver_gold", "fact_lookup", "tiktok", "tiktok_ads_accounts"], "alias": "tiktok_ads_accounts", "checksum": {"name": "sha256", "checksum": "1bf954616223684d7f9ceb849b4929a505a66f9886226948d2dfe39be1b26144"}, "config": {"enabled": true, "alias": null, "schema": "fact_lookup_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'fact_lookup_' + target.name if target.name != 'prod' else 'fact_lookup' }}", "materialized": "table"}, "created_at": 1755717738.8795722, "relation_name": "`ps-silver-gold`.`fact_lookup_dev`.`tiktok_ads_accounts`", "raw_code": "select distinct advertiser_name, advertiser_id from {{ ref('tiktok_ads__advertiser_report') }}", "language": "sql", "refs": [{"name": "tiktok_ads__advertiser_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.tiktok_ads__advertiser_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__account_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__account_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__account_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__account_report.sql", "unique_id": "model.ps_silver_gold.google_ads__account_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__account_report"], "alias": "google_ads__account_report", "checksum": {"name": "sha256", "checksum": "84f68a54961e6eaeb6d6dbf5e91d6e2b88c1fb4ed141ce6ffa9b528d44aa8579"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "intermediate"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["account_id", "date_day"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "intermediate"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["account_id", "date_day"], "tags": ["google_ads", "intermediate"]}, "created_at": 1755717738.880468, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__account_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = ['account_id', 'date_day'],\r\n    tags = ['google_ads', 'intermediate']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\nvideo AS (\r\n    SELECT\r\n        customer_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        customer_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        stats.customer_id AS account_id,\r\n        accounts.account_name,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        ROUND(\r\n            safe_divide(video.video_views, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS video_view_rate_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, video.video_views),\r\n            2\r\n        ) AS daily_CPV_usd,\r\n        ROUND(\r\n            safe_divide(video.engagements, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CPE_usd,\r\n        ROUND(\r\n            safe_divide(\r\n                video.video_completion,\r\n                video.video_views\r\n            ) * 100,\r\n            2\r\n        ) AS daily_VCR_percent,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN accounts\r\n        ON stats.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.customer_id = video.customer_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(stats.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        stats.customer_id,\r\n        accounts.account_name,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_account_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_account_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_video_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__ad_group_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__ad_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__ad_group_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__ad_group_report.sql", "unique_id": "model.ps_silver_gold.google_ads__ad_group_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__ad_group_report"], "alias": "google_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "29a8cb638054ddd01dcad62f829bb664af0ff44dc559984b8ac54b4f6208b28c"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.886512, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__ad_group_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = ['date_day', 'account_id', 'campaign_id', 'ad_group_id'],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nvideo AS (\r\n    SELECT\r\n        ad_group_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        ad_group_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        ROUND(\r\n            safe_divide(video.video_views, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS video_view_rate_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, video.video_views),\r\n            2\r\n        ) AS daily_CPV_usd,\r\n        ROUND(\r\n            safe_divide(video.engagements, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CPE_usd,\r\n        ROUND(\r\n            safe_divide(\r\n                video.video_completion,\r\n                video.video_views\r\n            ) * 100,\r\n            2\r\n        ) AS daily_VCR_percent,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.ad_group_id = video.ad_group_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    date_day,\r\n    account_id,\r\n    account_name,\r\n    campaign_id,\r\n    campaign_name,\r\n    NULL AS ad_group_id,\r\n    NULL AS ad_group_name,\r\n    NULL AS ad_group_status,\r\n    NULL AS ad_group_type,\r\n    spend_usd,\r\n    clicks,\r\n    impressions,\r\n    conversions,\r\n    conversions_value,\r\n    daily_CVR_percent,\r\n    daily_CTR_percent,\r\n    daily_CPC_usd,\r\n    daily_CPM_usd,\r\n    daily_CPA_usd,\r\n    daily_ROAS_usd,\r\n    NULL AS video_views,\r\n    NULL AS engagements,\r\n    NULL AS video_completion,\r\n    NULL AS video_view_rate_percent,\r\n    NULL AS daily_CPV_usd,\r\n    NULL AS daily_CPE_usd,\r\n    NULL AS daily_VCR_percent,\r\n    client_id,\r\n    client_name,\r\n    sub_client_name,\r\n    ad_platform\r\nFROM\r\n    {{ ref('google_ads__PMAX_report') }}\r\nUNION ALL\r\nSELECT\r\n    date_day,\r\n    account_id,\r\n    account_name,\r\n    campaign_id,\r\n    campaign_name,\r\n    ad_group_id,\r\n    ad_group_name,\r\n    ad_group_status,\r\n    ad_group_type,\r\n    spend_usd,\r\n    clicks,\r\n    impressions,\r\n    conversions,\r\n    conversions_value,\r\n    daily_CVR_percent,\r\n    daily_CTR_percent,\r\n    daily_CPC_usd,\r\n    daily_CPM_usd,\r\n    daily_CPA_usd,\r\n    daily_ROAS_usd,\r\n    video_views,\r\n    engagements,\r\n    video_completion,\r\n    video_view_rate_percent,\r\n    daily_CPV_usd,\r\n    daily_CPE_usd,\r\n    daily_VCR_percent,\r\n    client_id,\r\n    client_name,\r\n    sub_client_name,\r\n    ad_platform\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_ad_group_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}, {"name": "google_ads__PMAX_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_ad_group_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_video_stats", "model.ps_silver_gold.google_ads__PMAX_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__ad_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__ad_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__ad_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__ad_report.sql", "unique_id": "model.ps_silver_gold.google_ads__ad_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__ad_report"], "alias": "google_ads__ad_report", "checksum": {"name": "sha256", "checksum": "7792454f620f75bcb767d7d90c77d22a6b1f63a37962083d95ce1d22d4b15ae8"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["ad_id", "date_day", "account_id", "campaign_id", "ad_group_id", "account_name", "campaign_name", "ad_group_name", "ad_type", "final_urls", "ad_description", "video_views", "engagements"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["ad_id", "date_day", "account_id", "campaign_id", "ad_group_id", "account_name", "campaign_name", "ad_group_name", "ad_type", "final_urls", "ad_description", "video_views", "engagements"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.8886318, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__ad_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = [ 'ad_id', 'date_day', 'account_id', 'campaign_id', 'ad_group_id', 'account_name', 'campaign_name', 'ad_group_name', 'ad_type', 'final_urls', 'ad_description', 'video_views', 'engagements' ],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nads AS (\r\n    SELECT\r\n        DISTINCT ad_group_ad_ad_id,\r\n        ad_group_ad_ad_type,\r\n        ad_group_ad_ad_final_urls,\r\n        ad_group_ad_ad_name,\r\n        ad_group_ad_ad_expanded_text_ad_description,\r\n        ad_group_ad_status\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                `secure-electron-279822.google_ads_2025.ads_Ad_8196795413`\r\n            UNION ALL\r\n            SELECT\r\n                *\r\n            FROM\r\n                `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_Ad_2828502255`\r\n        )\r\n    WHERE\r\n        AND _LATEST_DATE = _DATA_DATE\r\n    GROUP BY\r\n        ad_group_ad_ad_id,\r\n        ad_group_ad_ad_type,\r\n        ad_group_ad_ad_final_urls,\r\n        ad_group_ad_ad_name,\r\n        ad_group_ad_ad_expanded_text_ad_description,\r\n        ad_group_ad_status\r\n),\r\nvideo AS (\r\n    SELECT\r\n        ad_group_ad_ad_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        ad_group_ad_ad_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        ads.ad_group_ad_ad_id AS ad_id,\r\n        ads.ad_group_ad_ad_name AS ad_name,\r\n        ads.ad_group_ad_ad_expanded_text_ad_description AS ad_description,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ads.ad_group_ad_ad_type AS ad_type,\r\n        ads.ad_group_ad_ad_final_urls AS final_urls,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        ROUND(\r\n            safe_divide(video.video_views, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS video_view_rate_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, video.video_views),\r\n            2\r\n        ) AS daily_CPV_usd,\r\n        ROUND(\r\n            safe_divide(video.engagements, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CPE_usd,\r\n        ROUND(\r\n            safe_divide(\r\n                video.video_completion,\r\n                video.video_views\r\n            ) * 100,\r\n            2\r\n        ) AS daily_VCR_percent,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN ads\r\n        ON stats.ad_group_ad_ad_id = ads.ad_group_ad_ad_id\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.ad_group_ad_ad_id = video.ad_group_ad_ad_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS STRING\r\n        ) = CAST(\r\n            campaigns.customer_id AS STRING\r\n        )\r\n    GROUP BY\r\n        stats.segments_date,\r\n        ads.ad_group_ad_ad_id,\r\n        ads.ad_group_ad_ad_expanded_text_ad_description,\r\n        campaigns.customer_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ads.ad_group_ad_ad_type,\r\n        ads.ad_group_ad_ad_final_urls,\r\n        ads.ad_group_ad_ad_name,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_ad_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_ad_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_video_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__age_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__age_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__age_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__age_report.sql", "unique_id": "model.ps_silver_gold.google_ads__age_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__age_report"], "alias": "google_ads__age_report", "checksum": {"name": "sha256", "checksum": "8ba27ac5fda8516f7e407460ebc09b3bdc4592cc52ff9d3adaa5bcc0c2810071"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.8929145, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__age_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = ['date_day', 'account_id', 'campaign_id', 'ad_group_id'],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_age_stats') }}\r\n),\r\nage AS (\r\n    SELECT\r\n        DISTINCT ad_group_criterion_criterion_id,\r\n        ad_group_criterion_age_range_type\r\n    FROM\r\n        `secure-electron-279822.google_ads_2025.ads_AgeRange_8196795413`\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        age.ad_group_criterion_criterion_id,\r\n        age.ad_group_criterion_age_range_type,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN age\r\n        ON age.ad_group_criterion_criterion_id = stats.ad_group_criterion_criterion_id\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        age.ad_group_criterion_criterion_id,\r\n        age.ad_group_criterion_age_range_type,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_age_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_age_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__campaign_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.google_ads__campaign_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__campaign_report"], "alias": "google_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "383ea59ed8defff623f95f57f9ff5cdfb832c20bf98e9f2e21a8450fae950f1a"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "campaign_id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "campaign_id"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.8941796, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__campaign_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = ['date_day', 'account_id', 'campaign_id'],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign_stats') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\nvideo AS (\r\n    SELECT\r\n        campaign_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        campaign_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        stats.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_advertising_channel_type,\r\n        campaigns.campaign_status,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        ROUND(\r\n            safe_divide(video.video_views, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS video_view_rate_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, video.video_views),\r\n            2\r\n        ) AS daily_CPV_usd,\r\n        ROUND(\r\n            safe_divide(video.engagements, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CPE_usd,\r\n        ROUND(\r\n            safe_divide(\r\n                video.video_completion,\r\n                video.video_views\r\n            ) * 100,\r\n            2\r\n        ) AS daily_VCR_percent,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN campaigns\r\n        ON stats.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.campaign_id = video.campaign_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        stats.campaign_id,\r\n        campaigns.campaign_advertising_channel_type,\r\n        campaigns.campaign_status,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields\r\nWHERE\r\n    campaign_status = 'ENABLED'", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_stats", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_campaign_stats", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_video_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__device_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__device_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__device_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__device_report.sql", "unique_id": "model.ps_silver_gold.google_ads__device_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__device_report"], "alias": "google_ads__device_report", "checksum": {"name": "sha256", "checksum": "7b529f6231185602ce2447df6c4cf28a9d7e78cbc38afcf1b5f4d6bf8d0a1d7b"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "account_name", "campaign_id", "campaign_name", "ad_group_id", "ad_group_name", "ad_group_status", "ad_group_type", "segments_device", "video_views", "engagements"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "account_name", "campaign_id", "campaign_name", "ad_group_id", "ad_group_name", "ad_group_status", "ad_group_type", "segments_device", "video_views", "engagements"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.895376, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__device_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = [ 'date_day', 'account_id', 'account_name', 'campaign_id', 'campaign_name', 'ad_group_id', 'ad_group_name', 'ad_group_status', 'ad_group_type', 'segments_device', 'video_views', 'engagements' ],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nvideo AS (\r\n    SELECT\r\n        ad_group_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        ad_group_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        stats.segments_device,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        ROUND(\r\n            safe_divide(video.video_views, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS video_view_rate_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, video.video_views),\r\n            2\r\n        ) AS daily_CPV_usd,\r\n        ROUND(\r\n            safe_divide(video.engagements, SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CPE_usd,\r\n        ROUND(\r\n            safe_divide(\r\n                video.video_completion,\r\n                video.video_views\r\n            ) * 100,\r\n            2\r\n        ) AS daily_VCR_percent,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.ad_group_id = video.ad_group_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        stats.segments_device,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_ad_group_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_ad_group_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_video_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__DMA_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__DMA_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__DMA_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__DMA_report.sql", "unique_id": "model.ps_silver_gold.google_ads__DMA_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__DMA_report"], "alias": "google_ads__DMA_report", "checksum": {"name": "sha256", "checksum": "5ed2917e8077ac35875b10e1cc8aa8bed626ba7140df20d455ab2b89347a9566"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "account_name", "campaign_id", "campaign_name", "criteria_id", "geo_name", "geo_target"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "account_name", "campaign_id", "campaign_name", "criteria_id", "geo_name", "geo_target"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.8967662, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__DMA_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = [ 'date_day', 'account_id', 'account_name', 'campaign_id', 'campaign_name', 'criteria_id', 'geo_name', 'geo_target' ],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_geo_stats') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ngeo AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('fact_lookups_raw') }}.google_geotarget`\r\n),\r\nvideo AS (\r\n    SELECT\r\n        campaign_id,\r\n        segments_date,\r\n        SUM(metrics_video_views) AS video_views,\r\n        SUM(metrics_engagements) AS engagements,\r\n        SUM(\r\n            metrics_video_views * metrics_video_quartile_p100_rate\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('stg_google_ads_video_stats') }}\r\n    GROUP BY\r\n        campaign_id,\r\n        segments_date\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        stats.campaign_id,\r\n        campaigns.campaign_name,\r\n        stats.segments_geo_target_most_specific_location AS criteria_id,\r\n        geo.name AS geo_name,\r\n        geo.canonical_name AS geo_target,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN geo\r\n        ON CAST(\r\n            regexp_extract(\r\n                stats.segments_geo_target_most_specific_location,\r\n                'geoTargetConstants\\\\/(\\\\d+)'\r\n            ) AS int64\r\n        ) = geo.criteria_id\r\n        LEFT JOIN campaigns\r\n        ON stats.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON stats.customer_id = accounts.customer_id\r\n        LEFT JOIN video\r\n        ON stats.campaign_id = video.campaign_id\r\n        AND stats.segments_date = video.segments_date\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(stats.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        stats.campaign_id,\r\n        stats.segments_geo_target_most_specific_location,\r\n        geo.name,\r\n        geo.canonical_name,\r\n        video.video_views,\r\n        video.engagements,\r\n        video.video_completion,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_geo_stats", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_video_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_geo_stats", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_video_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__gender_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__gender_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__gender_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__gender_report.sql", "unique_id": "model.ps_silver_gold.google_ads__gender_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__gender_report"], "alias": "google_ads__gender_report", "checksum": {"name": "sha256", "checksum": "3393b0b37c7accbdc678cba1bbac685b885f9d6697f6da044618cc8bfb5d6545"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["date_day", "account_id", "campaign_id", "ad_group_id"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.9025939, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__gender_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = ['date_day', 'account_id', 'campaign_id', 'ad_group_id'],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_gender_stats') }}\r\n),\r\ngender AS (\r\n    SELECT\r\n        DISTINCT ad_group_criterion_criterion_id,\r\n        ad_group_criterion_gender_type\r\n    FROM\r\n        `secure-electron-279822.google_ads_2025.ads_Gender_8196795413`\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        gender.ad_group_criterion_criterion_id,\r\n        gender.ad_group_criterion_gender_type,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN gender\r\n        ON gender.ad_group_criterion_criterion_id = stats.ad_group_criterion_criterion_id\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_status,\r\n        ad_groups.ad_group_type,\r\n        gender.ad_group_criterion_criterion_id,\r\n        gender.ad_group_criterion_gender_type,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_gender_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_gender_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__keyword_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__keyword_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__keyword_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__keyword_report.sql", "unique_id": "model.ps_silver_gold.google_ads__keyword_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__keyword_report"], "alias": "google_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "57117372e89022ef404cbd142bb7104815c751e86558290e004ac92766352d04"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["keyword_id", "date_day", "account_id", "account_name", "campaign_id", "campaign_name", "ad_group_id", "ad_group_name", "keyword_text", "keyword_type"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["keyword_id", "date_day", "account_id", "account_name", "campaign_id", "campaign_name", "ad_group_id", "ad_group_name", "keyword_text", "keyword_type"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.9038613, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__keyword_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = [ 'keyword_id', 'date_day', 'account_id', 'account_name', 'campaign_id', 'campaign_name', 'ad_group_id', 'ad_group_name', 'keyword_text', 'keyword_type', ],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_keyword_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nkeywords AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_keyword') }}\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        keywords.ad_group_criterion_criterion_id AS keyword_id,\r\n        keywords.ad_group_criterion_keyword_text AS keyword_text,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        keywords.ad_group_criterion_keyword_match_type AS keyword_type,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN keywords\r\n        ON stats.ad_group_criterion_criterion_id = keywords.ad_group_criterion_criterion_id\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN mapping\r\n        ON cast(mapping.account_id as string) = CAST(campaigns.customer_id AS STRING)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        keywords.ad_group_criterion_criterion_id,\r\n        keywords.ad_group_criterion_keyword_text,\r\n        campaigns.customer_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        keywords.ad_group_criterion_keyword_match_type,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_keyword_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}, {"name": "stg_google_ads_keyword", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_keyword_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_keyword"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__PMAX_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__PMAX_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__PMAX_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__PMAX_report.sql", "unique_id": "model.ps_silver_gold.google_ads__PMAX_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__PMAX_report"], "alias": "google_ads__PMAX_report", "checksum": {"name": "sha256", "checksum": "af0ab2242b0898fd1ee9d1d46c7005f03c4fc010098e0fcf363db4edf49887e4"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": ["google_ads", "silver"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["campaign_id", "date_day", "account_id", "account_name", "campaign_name", "campaign_advertising_channel_type", "campaign_status"], "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["google_ads", "silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table", "unique_key": ["campaign_id", "date_day", "account_id", "account_name", "campaign_name", "campaign_advertising_channel_type", "campaign_status"], "tags": ["google_ads", "silver"]}, "created_at": 1755717738.905131, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__PMAX_report`", "raw_code": "{{ config(\r\n    materialized = 'table',\r\n    unique_key = [ 'campaign_id', 'date_day', 'account_id', 'account_name', 'campaign_name', 'campaign_advertising_channel_type', 'campaign_status' ],\r\n    tags = ['google_ads', 'silver']\r\n) }}\r\n\r\nWITH stats AS (\r\n\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign_stats') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_PMAX') }}\r\n    WHERE\r\n        campaign_advertising_channel_type = 'PERFORMANCE_MAX'\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_advertising_channel_type,\r\n        campaigns.campaign_status,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(\r\n            stats.metrics_clicks\r\n        ) AS clicks,\r\n        SUM(\r\n            stats.metrics_impressions\r\n        ) AS impressions,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100,\r\n            2\r\n        ) AS daily_CVR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100,\r\n            2\r\n        ) AS daily_CTR_percent,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)),\r\n            2\r\n        ) AS daily_CPC_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000,\r\n            2\r\n        ) AS daily_CPM_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)),\r\n            2\r\n        ) AS daily_CPA_usd,\r\n        ROUND(\r\n            safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100,\r\n            2\r\n        ) AS daily_ROAS_usd,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        JOIN campaigns\r\n        ON stats.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS string\r\n        ) = cast(campaigns.customer_id as string)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        accounts.account_name,\r\n        campaigns.customer_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_advertising_channel_type,\r\n        campaigns.campaign_status,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_campaign_stats", "package": null, "version": null}, {"name": "stg_google_ads_PMAX", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_campaign_stats", "model.ps_silver_gold.stg_google_ads_PMAX", "model.ps_silver_gold.stg_google_ads_account"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__search_term_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__search_term_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__search_term_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__search_term_report.sql", "unique_id": "model.ps_silver_gold.google_ads__search_term_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__search_term_report"], "alias": "google_ads__search_term_report", "checksum": {"name": "sha256", "checksum": "1d32dc81d0bd5e4d3a6aea1dc06623b51bc978fcfadc7e23abda2c6ee7c9c554"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9065523, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__search_term_report`", "raw_code": "WITH stats AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_search_term_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nsearch AS ( -- This CTE (search) doesn't seem to be used. Can remove if not needed.\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_search_term') }}\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        stats.ad_group_ad_ad_id AS ad_id,\r\n        stats.search_term_view_search_term AS search_term,\r\n        stats.segments_search_term_match_type AS segments_search_term_match_type,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ROUND(SUM(stats.metrics_cost_micros) / 1e6, 2) AS spend_usd,\r\n        SUM(stats.metrics_clicks) AS clicks,\r\n        SUM(stats.metrics_impressions) AS impressions,\r\n        SUM(stats.metrics_conversions) AS conversions,\r\n        SUM(stats.metrics_conversions_value) AS conversions_value,\r\n        ROUND(safe_divide(SUM(stats.metrics_conversions), SUM(stats.metrics_clicks)) * 100, 2) AS daily_CVR_percent,\r\n        ROUND(safe_divide(SUM(stats.metrics_clicks), SUM(stats.metrics_impressions)) * 100, 2) AS daily_CTR_percent,\r\n        ROUND(safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_clicks)), 2) AS daily_CPC_usd,\r\n        ROUND(safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_impressions)) * 1000, 2) AS daily_CPM_usd,\r\n        ROUND(safe_divide(SUM(stats.metrics_cost_micros) / 1e6, SUM(stats.metrics_conversions)), 2) AS daily_CPA_usd,\r\n        ROUND(safe_divide(SUM(stats.metrics_conversions_value), SUM(stats.metrics_cost_micros) / 1e6) * 100, 2) AS daily_ROAS_usd,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n    LEFT JOIN\r\n        ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n    LEFT JOIN\r\n        campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n    LEFT JOIN\r\n        accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n    LEFT JOIN\r\n        mapping\r\n        ON CAST(mapping.account_id AS STRING) = CAST(campaigns.customer_id AS STRING)\r\n    GROUP BY\r\n        stats.segments_date,\r\n        stats.ad_group_ad_ad_id,\r\n        stats.search_term_view_search_term,\r\n        stats.segments_search_term_match_type,\r\n        campaigns.customer_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_search_term_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}, {"name": "stg_google_ads_search_term", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_search_term_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_search_term"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_account": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_account", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_account.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_account.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_account", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_account"], "alias": "stg_google_ads_account", "checksum": {"name": "sha256", "checksum": "4a0304f53878e5b21401b89bd2c3b32b6ac8856cb01605e441c982422f609209"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9077115, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_account`", "raw_code": "with\r\n    base as (\r\n        select\r\n            *\r\n        from\r\n            `{{ var('bronze_project') }}.{{ var('fact_lookups_raw') }}.google_ads_accounts`\r\n    )\r\nselect\r\n    account_name,\r\n    customer_id\r\nfrom\r\n    base", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_account_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_account_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_account_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_account_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_account_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_account_stats"], "alias": "stg_google_ads_account_stats", "checksum": {"name": "sha256", "checksum": "fa27a392dc3171231591d1dc7f1483b1e7df20579096117aabcbf76f88fd94ff"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9101143, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_account_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AccountBasicStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AccountBasicStats_2828502255`\r\n)\r\nSELECT\r\n    customer_id,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    customer_id,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_ad_conversion_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_ad_conversion_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_ad_conversion_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_ad_conversion_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_ad_conversion_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_ad_conversion_stats"], "alias": "stg_google_ads_ad_conversion_stats", "checksum": {"name": "sha256", "checksum": "cc5efa9cda8b453c017d34f535a33d5d1710a73946314ee95b9b4e0942198f23"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.91302, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_ad_conversion_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AdConversionStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AdConversionStats_2828502255`\r\n)\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    ad_group_ad_ad_group,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_value_per_conversion,\r\n    segments_ad_network_type,\r\n    segments_click_type,\r\n    segments_conversion_action,\r\n    segments_conversion_action_category,\r\n    segments_conversion_action_name,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_slot,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    ad_group_ad_ad_group,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_value_per_conversion,\r\n    segments_ad_network_type,\r\n    segments_click_type,\r\n    segments_conversion_action,\r\n    segments_conversion_action_category,\r\n    segments_conversion_action_name,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_slot,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_ad_group": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_ad_group", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_ad_group.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_ad_group.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_ad_group", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_ad_group"], "alias": "stg_google_ads_ad_group", "checksum": {"name": "sha256", "checksum": "359705a524a285755d5ba959049250d6721891a83ed810d906e87501cde4091f"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9160414, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_ad_group`", "raw_code": "WITH all_ad_group_history AS (\r\n    SELECT\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_group_status,\r\n        ad_group_type,\r\n        campaign_id,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AdGroup_8196795413`\r\n    UNION ALL\r\n    SELECT\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_group_status,\r\n        ad_group_type,\r\n        campaign_id,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AdGroup_2828502255`\r\n),\r\nranked_ad_groups AS (\r\n    SELECT\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_group_status,\r\n        ad_group_type,\r\n        campaign_id,\r\n        customer_id,\r\n        _DATA_DATE,\r\n        ROW_NUMBER() over(\r\n            PARTITION BY ad_group_id,\r\n            campaign_id,\r\n            customer_id\r\n            ORDER BY\r\n                _DATA_DATE DESC\r\n        ) AS rn\r\n    FROM\r\n        all_ad_group_history\r\n)\r\nSELECT\r\n    ad_group_id,\r\n    ad_group_name,\r\n    ad_group_status,\r\n    ad_group_type,\r\n    campaign_id,\r\n    customer_id\r\nFROM\r\n    ranked_ad_groups\r\nWHERE\r\n    rn = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_ad_group_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_ad_group_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_ad_group_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_ad_group_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_ad_group_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_ad_group_stats"], "alias": "stg_google_ads_ad_group_stats", "checksum": {"name": "sha256", "checksum": "a527e9c55bf2ee23c047eda607e9f0267f88a5337b66fd10f715ea455e514fe3"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.918741, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_ad_group_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AdGroupBasicStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AdGroupBasicStats_2828502255`\r\n)\r\nSELECT\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_ad_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_ad_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_ad_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_ad_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_ad_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_ad_stats"], "alias": "stg_google_ads_ad_stats", "checksum": {"name": "sha256", "checksum": "b5bb2a9c10a080da743f86d33a82c76d4a0b8783b40569e2f3e9ee7cc7ae084e"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9217412, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_ad_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AdBasicStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AdBasicStats_2828502255`\r\n)\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    customer_id,\r\n    ad_group_ad_ad_group,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    customer_id,\r\n    ad_group_ad_ad_group,\r\n    ad_group_base_ad_group,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_age_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_age_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_age_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_age_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_age_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_age_stats"], "alias": "stg_google_ads_age_stats", "checksum": {"name": "sha256", "checksum": "354973b2be1187276c5a6433046661dd384cb25be220ab78e3d68258aefcc703"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9243422, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_age_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        ad_group_base_ad_group,\r\n        campaign_base_campaign,\r\n        metrics_active_view_impressions,\r\n        metrics_active_view_measurability,\r\n        metrics_active_view_measurable_cost_micros,\r\n        metrics_active_view_measurable_impressions,\r\n        metrics_active_view_viewability,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_value,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cross_device_conversions,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interactions,\r\n        metrics_view_through_conversions,\r\n        segments_ad_network_type,\r\n        segments_date,\r\n        segments_device,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_AgeRangeBasicStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        ad_group_base_ad_group,\r\n        campaign_base_campaign,\r\n        metrics_active_view_impressions,\r\n        metrics_active_view_measurability,\r\n        metrics_active_view_measurable_cost_micros,\r\n        metrics_active_view_measurable_impressions,\r\n        metrics_active_view_viewability,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_value,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cross_device_conversions,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interactions,\r\n        metrics_view_through_conversions,\r\n        segments_ad_network_type,\r\n        segments_date,\r\n        segments_device,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_AgeRangeBasicStats_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_campaign": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_campaign", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_campaign.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_campaign.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_campaign", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_campaign"], "alias": "stg_google_ads_campaign", "checksum": {"name": "sha256", "checksum": "b20f32eec08cf0c30bbd8caa704432d969c1b65cbb9ddcc2d01db548460d7d5e"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9271932, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_campaign`", "raw_code": "WITH all_campaign_history AS (\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_Campaign_8196795413`\r\n    UNION ALL\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_Campaign_2828502255`\r\n),\r\nranked_campaigns AS (\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE,\r\n        ROW_NUMBER() over(\r\n            PARTITION BY campaign_id,\r\n            customer_id\r\n            ORDER BY\r\n                _DATA_DATE DESC\r\n        ) AS rn\r\n    FROM\r\n        all_campaign_history\r\n)\r\nSELECT\r\n    campaign_id,\r\n    campaign_name,\r\n    campaign_advertising_channel_type,\r\n    campaign_status,\r\n    customer_id\r\nFROM\r\n    ranked_campaigns\r\nWHERE\r\n    rn = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_campaign_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_campaign_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_campaign_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_campaign_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_campaign_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_campaign_stats"], "alias": "stg_google_ads_campaign_stats", "checksum": {"name": "sha256", "checksum": "7830125a77f4ff26b900f90138321482d7af311cd3260c379c7cff50b3421853"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9303942, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_campaign_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_CampaignBasicStats_8196795413`\r\n),\r\nblue_vine AS(\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_CampaignBasicStats_2828502255`\r\n)\r\nSELECT\r\n    campaign_id,\r\n    customer_id,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    campaign_id,\r\n    customer_id,\r\n    campaign_base_campaign,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interactions,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_device,\r\n    segments_slot,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_gender_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_gender_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_gender_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_gender_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_gender_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_gender_stats"], "alias": "stg_google_ads_gender_stats", "checksum": {"name": "sha256", "checksum": "774c3d6d7f68e62a6c1dd199ed0cf248e8a9270ddc401093e5f13180a26357fb"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9330215, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_gender_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        ad_group_base_ad_group,\r\n        campaign_base_campaign,\r\n        metrics_active_view_cpm,\r\n        metrics_active_view_ctr,\r\n        metrics_active_view_impressions,\r\n        metrics_active_view_measurability,\r\n        metrics_active_view_measurable_cost_micros,\r\n        metrics_active_view_measurable_impressions,\r\n        metrics_active_view_viewability,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_from_interactions_rate,\r\n        metrics_all_conversions_value,\r\n        metrics_average_cost,\r\n        metrics_average_cpc,\r\n        metrics_average_cpm,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_from_interactions_rate,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cost_per_all_conversions,\r\n        metrics_cost_per_conversion,\r\n        metrics_cross_device_conversions,\r\n        metrics_ctr,\r\n        metrics_gmail_forwards,\r\n        metrics_gmail_saves,\r\n        metrics_gmail_secondary_clicks,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interaction_rate,\r\n        metrics_interactions,\r\n        metrics_value_per_all_conversions,\r\n        metrics_value_per_conversion,\r\n        segments_ad_network_type,\r\n        segments_click_type,\r\n        segments_date,\r\n        segments_day_of_week,\r\n        segments_device,\r\n        segments_month,\r\n        segments_quarter,\r\n        segments_week,\r\n        segments_year,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_GenderStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        ad_group_base_ad_group,\r\n        campaign_base_campaign,\r\n        metrics_active_view_cpm,\r\n        metrics_active_view_ctr,\r\n        metrics_active_view_impressions,\r\n        metrics_active_view_measurability,\r\n        metrics_active_view_measurable_cost_micros,\r\n        metrics_active_view_measurable_impressions,\r\n        metrics_active_view_viewability,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_from_interactions_rate,\r\n        metrics_all_conversions_value,\r\n        metrics_average_cost,\r\n        metrics_average_cpc,\r\n        metrics_average_cpm,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_from_interactions_rate,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cost_per_all_conversions,\r\n        metrics_cost_per_conversion,\r\n        metrics_cross_device_conversions,\r\n        metrics_ctr,\r\n        metrics_gmail_forwards,\r\n        metrics_gmail_saves,\r\n        metrics_gmail_secondary_clicks,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interaction_rate,\r\n        metrics_interactions,\r\n        metrics_value_per_all_conversions,\r\n        metrics_value_per_conversion,\r\n        segments_ad_network_type,\r\n        segments_click_type,\r\n        segments_date,\r\n        segments_day_of_week,\r\n        segments_device,\r\n        segments_month,\r\n        segments_quarter,\r\n        segments_week,\r\n        segments_year,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_GenderStats_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_geo_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_geo_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_geo_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_geo_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_geo_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_geo_stats"], "alias": "stg_google_ads_geo_stats", "checksum": {"name": "sha256", "checksum": "f280327c10ce154a2ff479533a357344a24cc561ff197e209033d5ff7bb1ea6d"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9371667, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_geo_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_GeoStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_GeoStats_2828502255`\r\n)\r\nSELECT\r\n    campaign_id,\r\n    customer_id,\r\n    geographic_view_country_criterion_id,\r\n    campaign_status,\r\n    geographic_view_location_type,\r\n    metrics_all_conversions,\r\n    metrics_all_conversions_from_interactions_rate,\r\n    metrics_all_conversions_value,\r\n    metrics_average_cost,\r\n    metrics_average_cpc,\r\n    metrics_average_cpm,\r\n    metrics_average_cpv,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_from_interactions_rate,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_cost_per_all_conversions,\r\n    metrics_cost_per_conversion,\r\n    metrics_cross_device_conversions,\r\n    metrics_ctr,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interaction_rate,\r\n    metrics_interactions,\r\n    metrics_value_per_all_conversions,\r\n    metrics_value_per_conversion,\r\n    metrics_video_view_rate,\r\n    metrics_video_views,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_geo_target_most_specific_location,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    campaign_id,\r\n    customer_id,\r\n    geographic_view_country_criterion_id,\r\n    campaign_status,\r\n    geographic_view_location_type,\r\n    metrics_all_conversions,\r\n    metrics_all_conversions_from_interactions_rate,\r\n    metrics_all_conversions_value,\r\n    metrics_average_cost,\r\n    metrics_average_cpc,\r\n    metrics_average_cpm,\r\n    metrics_average_cpv,\r\n    metrics_clicks,\r\n    metrics_conversions,\r\n    metrics_conversions_from_interactions_rate,\r\n    metrics_conversions_value,\r\n    metrics_cost_micros,\r\n    metrics_cost_per_all_conversions,\r\n    metrics_cost_per_conversion,\r\n    metrics_cross_device_conversions,\r\n    metrics_ctr,\r\n    metrics_impressions,\r\n    metrics_interaction_event_types,\r\n    metrics_interaction_rate,\r\n    metrics_interactions,\r\n    metrics_value_per_all_conversions,\r\n    metrics_value_per_conversion,\r\n    metrics_video_view_rate,\r\n    metrics_video_views,\r\n    metrics_view_through_conversions,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_geo_target_most_specific_location,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_keyword": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_keyword", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_keyword.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_keyword.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_keyword", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_keyword"], "alias": "stg_google_ads_keyword", "checksum": {"name": "sha256", "checksum": "18345dd97f6ec9aca6c1c6d6379e0b748ace19ecb384f7d0d9c8c5b7e2e78080"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9404898, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_keyword`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        DISTINCT ad_group_criterion_criterion_id,\r\n        ad_group_criterion_keyword_match_type,\r\n        ad_group_criterion_keyword_text\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_Keyword_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        DISTINCT ad_group_criterion_criterion_id,\r\n        ad_group_criterion_keyword_match_type,\r\n        ad_group_criterion_keyword_text\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_Keyword_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_keyword_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_keyword_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_keyword_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_keyword_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_keyword_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_keyword_stats"], "alias": "stg_google_ads_keyword_stats", "checksum": {"name": "sha256", "checksum": "a25c53fc701d41ff4184dad4cdbc43dd636c54e892f1fc5a63803b0f234c58e5"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9434385, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_keyword_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        metrics_cost_micros,\r\n        metrics_clicks,\r\n        metrics_impressions,\r\n        metrics_conversions,\r\n        metrics_conversions_value,\r\n        segments_date\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_KeywordBasicStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        ad_group_criterion_criterion_id,\r\n        ad_group_id,\r\n        metrics_cost_micros,\r\n        metrics_clicks,\r\n        metrics_impressions,\r\n        metrics_conversions,\r\n        metrics_conversions_value,\r\n        segments_date\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_KeywordBasicStats_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_PMAX": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_PMAX", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_PMAX.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_PMAX.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_PMAX", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_PMAX"], "alias": "stg_google_ads_PMAX", "checksum": {"name": "sha256", "checksum": "481e3fa99df7d742478cb7ed76c198e91c4af7d39f6e526c5454642efc4911f5"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9460812, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_PMAX`", "raw_code": "WITH all_pmax_campaign_history AS (\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_Campaign_8196795413`\r\n    WHERE\r\n        campaign_advertising_channel_type = 'PERFORMANCE_MAX'\r\n    UNION ALL\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_Campaign_2828502255`\r\n    WHERE\r\n        campaign_advertising_channel_type = 'PERFORMANCE_MAX'\r\n),\r\nranked_pmax_campaigns AS (\r\n    SELECT\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_advertising_channel_type,\r\n        campaign_status,\r\n        customer_id,\r\n        _DATA_DATE,\r\n        ROW_NUMBER() over(\r\n            PARTITION BY campaign_id,\r\n            customer_id\r\n            ORDER BY\r\n                _DATA_DATE DESC\r\n        ) AS rn\r\n    FROM\r\n        all_pmax_campaign_history\r\n)\r\nSELECT\r\n    campaign_id,\r\n    campaign_name,\r\n    campaign_advertising_channel_type,\r\n    campaign_status,\r\n    customer_id\r\nFROM\r\n    ranked_pmax_campaigns\r\nWHERE\r\n    rn = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_search_term": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_search_term", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_search_term.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_search_term.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_search_term", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_search_term"], "alias": "stg_google_ads_search_term", "checksum": {"name": "sha256", "checksum": "92da71fb4cc3ae95804bbc72b184755e7aec5d738e85dd2e606057ff4bf8d001"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.9508672, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_search_term`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        DISTINCT ad_group_ad_ad_id,\r\n        search_term_view_search_term,\r\n        segments_search_term_match_type\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_SearchQueryConversionStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        DISTINCT ad_group_ad_ad_id,\r\n        search_term_view_search_term,\r\n        segments_search_term_match_type\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_SearchQueryConversionStats_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_search_term_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_search_term_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_search_term_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_search_term_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_search_term_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_search_term_stats"], "alias": "stg_google_ads_search_term_stats", "checksum": {"name": "sha256", "checksum": "666d853e93d5a6e2e27c8ada1b967e656b434a8d754a5907ff4faf081feb5aef"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.954018, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_search_term_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        ad_group_ad_ad_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        metrics_absolute_top_impression_percentage,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_from_interactions_rate,\r\n        metrics_all_conversions_value,\r\n        metrics_average_cost,\r\n        metrics_average_cpc,\r\n        metrics_average_cpe,\r\n        metrics_average_cpm,\r\n        metrics_average_cpv,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_from_interactions_rate,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cost_per_all_conversions,\r\n        metrics_cost_per_conversion,\r\n        metrics_cross_device_conversions,\r\n        metrics_ctr,\r\n        metrics_engagement_rate,\r\n        metrics_engagements,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interaction_rate,\r\n        metrics_interactions,\r\n        metrics_top_impression_percentage,\r\n        metrics_value_per_all_conversions,\r\n        metrics_value_per_conversion,\r\n        metrics_video_quartile_p100_rate,\r\n        metrics_video_quartile_p25_rate,\r\n        metrics_video_quartile_p50_rate,\r\n        metrics_video_quartile_p75_rate,\r\n        metrics_video_view_rate,\r\n        metrics_video_views,\r\n        metrics_view_through_conversions,\r\n        search_term_view_search_term,\r\n        search_term_view_status,\r\n        segments_ad_network_type,\r\n        segments_date,\r\n        segments_day_of_week,\r\n        segments_device,\r\n        segments_keyword_ad_group_criterion,\r\n        segments_month,\r\n        segments_quarter,\r\n        segments_search_term_match_type,\r\n        segments_week,\r\n        segments_year,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_SearchQueryStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        ad_group_ad_ad_id,\r\n        ad_group_id,\r\n        campaign_id,\r\n        customer_id,\r\n        metrics_absolute_top_impression_percentage,\r\n        metrics_all_conversions,\r\n        metrics_all_conversions_from_interactions_rate,\r\n        metrics_all_conversions_value,\r\n        metrics_average_cost,\r\n        metrics_average_cpc,\r\n        metrics_average_cpe,\r\n        metrics_average_cpm,\r\n        metrics_average_cpv,\r\n        metrics_clicks,\r\n        metrics_conversions,\r\n        metrics_conversions_from_interactions_rate,\r\n        metrics_conversions_value,\r\n        metrics_cost_micros,\r\n        metrics_cost_per_all_conversions,\r\n        metrics_cost_per_conversion,\r\n        metrics_cross_device_conversions,\r\n        metrics_ctr,\r\n        metrics_engagement_rate,\r\n        metrics_engagements,\r\n        metrics_impressions,\r\n        metrics_interaction_event_types,\r\n        metrics_interaction_rate,\r\n        metrics_interactions,\r\n        metrics_top_impression_percentage,\r\n        metrics_value_per_all_conversions,\r\n        metrics_value_per_conversion,\r\n        metrics_video_quartile_p100_rate,\r\n        metrics_video_quartile_p25_rate,\r\n        metrics_video_quartile_p50_rate,\r\n        metrics_video_quartile_p75_rate,\r\n        metrics_video_view_rate,\r\n        metrics_video_views,\r\n        metrics_view_through_conversions,\r\n        search_term_view_search_term,\r\n        search_term_view_status,\r\n        segments_ad_network_type,\r\n        segments_date,\r\n        segments_day_of_week,\r\n        segments_device,\r\n        segments_keyword_ad_group_criterion,\r\n        segments_month,\r\n        segments_quarter,\r\n        segments_search_term_match_type,\r\n        segments_week,\r\n        segments_year,\r\n        _LATEST_DATE,\r\n        _DATA_DATE\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_SearchQueryStats_2828502255`\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_google_ads_video_stats": {"database": "ps-silver-gold", "schema": "staging_google_ads_dev", "name": "stg_google_ads_video_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\staging\\stg_google_ads_video_stats.sql", "original_file_path": "models\\google\\staging\\stg_google_ads_video_stats.sql", "unique_id": "model.ps_silver_gold.stg_google_ads_video_stats", "fqn": ["ps_silver_gold", "google", "staging", "stg_google_ads_video_stats"], "alias": "stg_google_ads_video_stats", "checksum": {"name": "sha256", "checksum": "64e6f0be13a4d4ae8f873cc95c326ed34e5fe9eb06649e10c717ee177f45c23f"}, "config": {"enabled": true, "alias": null, "schema": "staging_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_google_ads_' + target.name if target.name != 'prod' else 'staging_google_ads' }}", "materialized": "table"}, "created_at": 1755717738.956742, "relation_name": "`ps-silver-gold`.`staging_google_ads_dev`.`stg_google_ads_video_stats`", "raw_code": "WITH base AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_schema') }}.ads_VideoNonClickStats_8196795413`\r\n),\r\nblue_vine AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_VideoNonClickStats_2828502255`\r\n)\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    video_channel_id,\r\n    video_id,\r\n    ad_group_ad_status,\r\n    metrics_all_conversions,\r\n    metrics_all_conversions_from_interactions_rate,\r\n    metrics_all_conversions_value,\r\n    metrics_average_cpv,\r\n    metrics_cost_per_all_conversions,\r\n    metrics_cross_device_conversions,\r\n    metrics_engagement_rate,\r\n    metrics_engagements,\r\n    metrics_value_per_all_conversions,\r\n    metrics_video_quartile_p100_rate,\r\n    metrics_video_quartile_p25_rate,\r\n    metrics_video_quartile_p50_rate,\r\n    metrics_video_quartile_p75_rate,\r\n    metrics_video_view_rate,\r\n    metrics_video_views,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    base\r\nUNION ALL\r\nSELECT\r\n    ad_group_ad_ad_id,\r\n    ad_group_id,\r\n    campaign_id,\r\n    customer_id,\r\n    video_channel_id,\r\n    video_id,\r\n    ad_group_ad_status,\r\n    metrics_all_conversions,\r\n    metrics_all_conversions_from_interactions_rate,\r\n    metrics_all_conversions_value,\r\n    metrics_average_cpv,\r\n    metrics_cost_per_all_conversions,\r\n    metrics_cross_device_conversions,\r\n    metrics_engagement_rate,\r\n    metrics_engagements,\r\n    metrics_value_per_all_conversions,\r\n    metrics_video_quartile_p100_rate,\r\n    metrics_video_quartile_p25_rate,\r\n    metrics_video_quartile_p50_rate,\r\n    metrics_video_quartile_p75_rate,\r\n    metrics_video_view_rate,\r\n    metrics_video_views,\r\n    segments_ad_network_type,\r\n    segments_date,\r\n    segments_day_of_week,\r\n    segments_device,\r\n    segments_month,\r\n    segments_quarter,\r\n    segments_week,\r\n    segments_year,\r\n    _LATEST_DATE,\r\n    _DATA_DATE\r\nFROM\r\n    blue_vine", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__account_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__account_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__account_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__account_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__account_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__account_report"], "alias": "linkedin_ads__account_report", "checksum": {"name": "sha256", "checksum": "7662b58c8406b58afe6d1486066764c2a5d67ad6f8b1aeeef964dda92e37ca70"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9595976, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__account_report`", "raw_code": "with account as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\ncampaign as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\nreport as (\r\n\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_campaign') }}\r\n\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        report.source_relation,\r\n        report.date_day,\r\n        account.account_id,\r\n        account.account_name,\r\n        account.version_tag,\r\n        account.currency,\r\n        account.status,\r\n        account.type,\r\n        account.last_modified_at,\r\n        account.created_at,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,        \r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(report.external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(report.one_click_leads, 0)) as one_click_leads\r\n\r\n    from report \r\n    left join campaign \r\n        on report.campaign_id = campaign.campaign_id\r\n        and report.source_relation = campaign.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n    GROUP BY ALL\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__ad_analytics_by_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__campaign_group_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__campaign_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__campaign_group_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__campaign_group_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__campaign_group_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__campaign_group_report"], "alias": "linkedin_ads__campaign_group_report", "checksum": {"name": "sha256", "checksum": "9231da098b7ca417fc8e369bcce4628c5f597879d1f135ae23f5b1cf2bf22387"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9621189, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__campaign_group_report`", "raw_code": "with campaign_group as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\ncampaign as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\naccount as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\nreport as (\r\n\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_campaign') }}\r\n\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        report.source_relation,\r\n        report.date_day,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        campaign_group.status,\r\n        account.currency,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        campaign_group.is_backfilled,\r\n        campaign_group.run_schedule_start_at,\r\n        campaign_group.run_schedule_end_at,\r\n        campaign_group.last_modified_at,\r\n        campaign_group.created_at,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(report.external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(report.one_click_leads, 0)) as one_click_leads\r\n\r\n    from report \r\n    left join campaign \r\n        on report.campaign_id = campaign.campaign_id\r\n        and report.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    group by all\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__ad_analytics_by_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__campaign_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__campaign_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__campaign_report"], "alias": "linkedin_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "2edada278dd308cbb120664b68c7c1d1876fb14b2455238599791fa012887735"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9646773, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__campaign_report`", "raw_code": "with campaign as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\ncampaign_group as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\naccount as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\nreport as (\r\n\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_campaign') }}\r\n\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        report.source_relation,\r\n        report.date_day,\r\n        report.campaign_id,\r\n        campaign.campaign_name,\r\n        campaign.version_tag,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        campaign.status as campaign_status,\r\n        campaign_group.status as campaign_group_status,\r\n        campaign.type as campaign_type,\r\n        campaign.cost_type,\r\n        campaign.creative_selection,\r\n        campaign.daily_budget_amount,\r\n        campaign.daily_budget_currency_code,\r\n        campaign.unit_cost_amount,\r\n        campaign.unit_cost_currency_code,\r\n        account.currency,\r\n        campaign.format,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        campaign.locale_country,\r\n        campaign.locale_language,\r\n        campaign.objective_type,\r\n        campaign.optimization_target_type,\r\n        campaign.is_audience_expansion_enabled,\r\n        campaign.is_offsite_delivery_enabled,\r\n        campaign.run_schedule_start_at,\r\n        campaign.run_schedule_end_at,\r\n        campaign.last_modified_at,\r\n        campaign.created_at,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(report.external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(report.one_click_leads, 0)) as one_click_leads\r\n\r\n    from report \r\n    left join campaign \r\n        on report.campaign_id = campaign.campaign_id\r\n        and report.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    group by all\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__ad_analytics_by_campaign", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__creative_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__creative_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__creative_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__creative_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__creative_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__creative_report"], "alias": "linkedin_ads__creative_report", "checksum": {"name": "sha256", "checksum": "83c1067d91bd5d336cde60ccc97aeb86c772b2deab07e8dc5f7c9676a15ca715"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9680605, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__creative_report`", "raw_code": "with creative as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__creative_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\ncampaign as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\ncampaign_group as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\naccount as (\r\n\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n\r\n),\r\n\r\nreport as (\r\n\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_creative') }}\r\n\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        report.source_relation,\r\n        report.date_day,\r\n        report.creative_id,\r\n        campaign.campaign_id,\r\n        campaign.campaign_name,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        creative.click_uri,\r\n        creative.click_uri_type,\r\n        creative.status as creative_status,\r\n        campaign.status as campaign_status,\r\n        campaign_group.status as campaign_group_status,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        account.currency,\r\n        creative.last_modified_at,\r\n        creative.created_at,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(report.external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(report.one_click_leads, 0)) as one_click_leads\r\n\r\n    from report\r\n    left join creative\r\n        on report.creative_id = creative.creative_id\r\n        and report.source_relation = creative.source_relation\r\n    left join campaign\r\n        on creative.campaign_id = campaign.campaign_id\r\n        and creative.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account\r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    group by all\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__creative_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__ad_analytics_by_creative", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__creative_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__monthly_campaign_country_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__monthly_campaign_country_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__monthly_campaign_country_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__monthly_campaign_country_report"], "alias": "linkedin_ads__monthly_campaign_country_report", "checksum": {"name": "sha256", "checksum": "4d5a775c7ff14a6f70585d9c2e3875542a2cd01b08141696f87347d8e6c0cd3c"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9710255, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__monthly_campaign_country_report`", "raw_code": "with campaign as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ncampaign_group as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n),\r\n\r\naccount as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ngeo as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__geo') }}\r\n),\r\n\r\nreport as (\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__monthly_ad_analytics_by_country') }}\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n\r\n    select \r\n        report.source_relation,\r\n        report.date_month,\r\n        geo.value as country_name,\r\n        report.campaign_id,\r\n        campaign.campaign_name,\r\n        campaign.version_tag,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        campaign.status as campaign_status,\r\n        campaign_group.status as campaign_group_status,\r\n        campaign.type as campaign_type,\r\n        campaign.cost_type,\r\n        campaign.creative_selection,\r\n        campaign.daily_budget_amount,\r\n        campaign.daily_budget_currency_code,\r\n        campaign.unit_cost_amount,\r\n        campaign.unit_cost_currency_code,\r\n        account.currency as account_currency,\r\n        campaign.format,\r\n        campaign.locale_country as campaign_locale_country,\r\n        campaign.locale_language as campaign_locale_language,\r\n        campaign.objective_type,\r\n        campaign.optimization_target_type,\r\n        campaign.is_audience_expansion_enabled,\r\n        campaign.is_offsite_delivery_enabled,\r\n        campaign.run_schedule_start_at,\r\n        campaign.run_schedule_end_at,\r\n        campaign.last_modified_at,\r\n        campaign.created_at,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(one_click_leads, 0)) as one_click_leads\r\n\r\n    from report \r\n    left join geo\r\n        on geo.geo_id = report.member_country_geo_id\r\n        and report.source_relation = geo.source_relation\r\n    left join campaign \r\n        on report.campaign_id = campaign.campaign_id\r\n        and report.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    group by all\r\n\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__geo", "package": null, "version": null}, {"name": "stg_linkedin_ads__monthly_ad_analytics_by_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__geo", "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__monthly_campaign_region_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__monthly_campaign_region_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__monthly_campaign_region_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__monthly_campaign_region_report"], "alias": "linkedin_ads__monthly_campaign_region_report", "checksum": {"name": "sha256", "checksum": "f58e64c35b44015fd7260519236532ab5dc0c871d64aa2eb09f86fee51bd2337"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9741375, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__monthly_campaign_region_report`", "raw_code": "with campaign as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ncampaign_group as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n),\r\n\r\naccount as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ngeo as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__geo') }}\r\n),\r\n\r\nreport as (\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__monthly_ad_analytics_by_region') }}\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n    select \r\n        report.source_relation,\r\n        report.date_month,\r\n        geo.value as region_name,\r\n        report.campaign_id,\r\n        campaign.campaign_name,\r\n        campaign.version_tag,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        campaign.status as campaign_status,\r\n        campaign_group.status as campaign_group_status,\r\n        campaign.type as campaign_type,\r\n        campaign.cost_type,\r\n        campaign.creative_selection,\r\n        campaign.daily_budget_amount,\r\n        campaign.daily_budget_currency_code,\r\n        campaign.unit_cost_amount,\r\n        campaign.unit_cost_currency_code,\r\n        account.currency as account_currency,\r\n        campaign.format,\r\n        campaign.locale_country as campaign_locale_country,\r\n        campaign.locale_language as campaign_locale_language,\r\n        campaign.objective_type,\r\n        campaign.optimization_target_type,\r\n        campaign.is_audience_expansion_enabled,\r\n        campaign.is_offsite_delivery_enabled,\r\n        campaign.run_schedule_start_at,\r\n        campaign.run_schedule_end_at,\r\n        campaign.last_modified_at,\r\n        campaign.created_at,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(one_click_leads, 0)) as one_click_leads\r\n    from report\r\n    left join geo\r\n        on geo.geo_id = report.member_region_geo_id\r\n        and report.source_relation = geo.source_relation\r\n    left join campaign \r\n        on report.campaign_id = campaign.campaign_id\r\n        and report.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    group by all\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__geo", "package": null, "version": null}, {"name": "stg_linkedin_ads__monthly_ad_analytics_by_region", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__geo", "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.linkedin_ads__url_report": {"database": "ps-silver-gold", "schema": "silver_linkedin_ads_dev", "name": "linkedin_ads__url_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\intermediate\\linkedin_ads__url_report.sql", "original_file_path": "models\\linkedin\\intermediate\\linkedin_ads__url_report.sql", "unique_id": "model.ps_silver_gold.linkedin_ads__url_report", "fqn": ["ps_silver_gold", "linkedin", "intermediate", "linkedin_ads__url_report"], "alias": "linkedin_ads__url_report", "checksum": {"name": "sha256", "checksum": "458635cb3dbe47c3c67ba98a92538e244dc8b8cadb82e827ef6cf5f86061f2eb"}, "config": {"enabled": true, "alias": null, "schema": "silver_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_linkedin_ads_' + target.name if target.name != 'prod' else 'silver_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9773517, "relation_name": "`ps-silver-gold`.`silver_linkedin_ads_dev`.`linkedin_ads__url_report`", "raw_code": "with creative as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__creative_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ncampaign as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_history') }}\r\n    where is_latest_version\r\n),\r\n\r\ncampaign_group as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__campaign_group_history') }}\r\n    where is_latest_version\r\n),\r\n\r\naccount as (\r\n    select *\r\n    from {{ ref('stg_linkedin_ads__account_history') }}\r\n    where is_latest_version\r\n),\r\n\r\nreport as (\r\n    select *,\r\n        external_website_conversions + one_click_leads as total_conversions\r\n    from {{ ref('stg_linkedin_ads__ad_analytics_by_creative') }}\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    WHERE ad_platform = 'linkedin'\r\n),\r\n\r\nfinal as (\r\n    select \r\n        report.source_relation,\r\n        report.date_day,\r\n        creative.click_uri,\r\n        creative.click_uri_type,\r\n        creative.base_url,\r\n        creative.url_host,\r\n        creative.url_path,\r\n        creative.utm_source,\r\n        creative.utm_medium,\r\n        creative.utm_campaign,\r\n        creative.utm_content,\r\n        creative.utm_term,\r\n        report.creative_id,\r\n        campaign.campaign_id,\r\n        campaign.campaign_name,\r\n        campaign_group.campaign_group_id,\r\n        campaign_group.campaign_group_name,\r\n        account.account_id,\r\n        account.account_name,\r\n        account.currency,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,   \r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.cost) as cost,\r\n        sum(coalesce(report.conversion_value_in_local_currency, 0)) as conversion_value_in_local_currency,\r\n        sum(coalesce(external_website_conversions, 0)) as external_website_conversions,\r\n        sum(coalesce(one_click_leads, 0)) as one_click_leads\r\n    from report\r\n    left join creative \r\n        on report.creative_id = creative.creative_id\r\n        and report.source_relation = creative.source_relation\r\n    left join campaign \r\n        on creative.campaign_id = campaign.campaign_id\r\n        and creative.source_relation = campaign.source_relation\r\n    left join campaign_group\r\n        on campaign.campaign_group_id = campaign_group.campaign_group_id\r\n        and campaign.source_relation = campaign_group.source_relation\r\n    left join account \r\n        on campaign.account_id = account.account_id\r\n        and campaign.source_relation = account.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(account.account_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n    where creative.click_uri is not null\r\n    group by all\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "stg_linkedin_ads__creative_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__campaign_group_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__account_history", "package": null, "version": null}, {"name": "stg_linkedin_ads__ad_analytics_by_creative", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_linkedin_ads__creative_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__account_history": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__account_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__account_history.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__account_history.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__account_history", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__account_history"], "alias": "stg_linkedin_ads__account_history", "checksum": {"name": "sha256", "checksum": "c9895d0e52edf04e347c0b24c87091aade21d34423da2563aeab5a05f4397817"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.980462, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__account_history`", "raw_code": "WITH base AS (\r\n    SELECT *\r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.account_history`\r\n),\r\n\r\nmacro AS (\r\n    SELECT\r\n        created_time AS created_time,\r\n        currency AS currency,\r\n        id AS id,\r\n        last_modified_time AS last_modified_time,\r\n        name AS name,\r\n        CAST(NULL AS STRING) AS status,\r\n        CAST(NULL AS STRING) AS type,\r\n        version_tag AS version_tag,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfields AS (\r\n    SELECT \r\n        source_relation,\r\n        id AS account_id,\r\n        name AS account_name,\r\n        currency,\r\n        CAST(version_tag AS NUMERIC) AS version_tag,\r\n        status,\r\n        type,\r\n        CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,\r\n        CAST(created_time AS TIMESTAMP) AS created_at,\r\n        ROW_NUMBER() OVER (PARTITION BY id ORDER BY last_modified_time DESC) = 1 AS is_latest_version\r\n    FROM macro\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__ad_analytics_by_campaign", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__ad_analytics_by_campaign.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__ad_analytics_by_campaign.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__ad_analytics_by_campaign"], "alias": "stg_linkedin_ads__ad_analytics_by_campaign", "checksum": {"name": "sha256", "checksum": "b3c25d025ba26ae186248befc2309aaf0a80d73be0c6fad4d91d600b4b900231"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9829755, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__ad_analytics_by_campaign`", "raw_code": "WITH base AS (\r\n    SELECT * \r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.ad_analytics_by_campaign`\r\n),\r\n\r\nmacro AS (\r\n    SELECT\r\n        campaign_id AS campaign_id,\r\n        clicks AS clicks,\r\n        cost_in_local_currency AS cost_in_local_currency,\r\n        cost_in_usd AS cost_in_usd,\r\n        day AS day,\r\n        impressions AS impressions,\r\n        conversion_value_in_local_currency AS conversion_value_in_local_currency,\r\n        external_website_conversions AS external_website_conversions,\r\n        one_click_leads AS one_click_leads,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfields AS (\r\n    SELECT \r\n        source_relation,\r\n        DATE(day) AS date_day,\r\n        campaign_id,\r\n        clicks,\r\n        impressions,\r\n        cost_in_usd AS cost,\r\n        COALESCE(CAST(conversion_value_in_local_currency AS FLOAT64), 0) AS conversion_value_in_local_currency,\r\n        COALESCE(CAST(external_website_conversions AS INT64), 0) AS external_website_conversions,\r\n        COALESCE(CAST(one_click_leads AS INT64), 0) AS one_click_leads\r\n    FROM macro\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__ad_analytics_by_creative", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__ad_analytics_by_creative.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__ad_analytics_by_creative.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__ad_analytics_by_creative"], "alias": "stg_linkedin_ads__ad_analytics_by_creative", "checksum": {"name": "sha256", "checksum": "98137c7b19e1862333f97e2c4b8cd7cb8378f8d54862e28c40d366270ca29bac"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.985583, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__ad_analytics_by_creative`", "raw_code": "WITH base AS (\r\n    SELECT *\r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.ad_analytics_by_creative`\r\n),\r\n\r\nmacro AS (\r\n    SELECT\r\n        clicks AS clicks,\r\n        cost_in_local_currency AS cost_in_local_currency,\r\n        cost_in_usd AS cost_in_usd,\r\n        creative_id AS creative_id,\r\n        day AS day,\r\n        impressions AS impressions,\r\n        conversion_value_in_local_currency AS conversion_value_in_local_currency,\r\n        external_website_conversions AS external_website_conversions,\r\n        one_click_leads AS one_click_leads,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfields AS (\r\n    SELECT\r\n        source_relation,\r\n        DATE(day) AS date_day,\r\n        creative_id,\r\n        clicks,\r\n        impressions,\r\n        cost_in_usd AS cost,\r\n        COALESCE(CAST(conversion_value_in_local_currency AS FLOAT64), 0) AS conversion_value_in_local_currency,\r\n        COALESCE(CAST(external_website_conversions AS INT64), 0) AS external_website_conversions,\r\n        COALESCE(CAST(one_click_leads AS INT64), 0) AS one_click_leads\r\n    FROM macro\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__campaign_group_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__campaign_group_history.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__campaign_group_history.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__campaign_group_history"], "alias": "stg_linkedin_ads__campaign_group_history", "checksum": {"name": "sha256", "checksum": "3581ed61610d9e0fdcacde3e5fa116bf825d7262973b7f3a66df266497dc195a"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9892304, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__campaign_group_history`", "raw_code": "WITH base AS (\r\n    SELECT *\r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.campaign_group_history`\r\n),\r\n\r\nmacro AS (\r\n    SELECT\r\n        account_id AS account_id,\r\n        CAST(NULL AS BOOL) AS backfilled,\r\n        created_time AS created_time,\r\n        id AS id,\r\n        last_modified_time AS last_modified_time,\r\n        name AS name,\r\n        CAST(NULL AS TIMESTAMP) AS run_schedule_end,\r\n        CAST(NULL AS TIMESTAMP) AS run_schedule_start,\r\n        CAST(NULL AS STRING) AS status,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfields AS (\r\n    SELECT \r\n        source_relation,\r\n        id AS campaign_group_id,\r\n        name AS campaign_group_name,\r\n        account_id,\r\n        status,\r\n        backfilled AS is_backfilled,\r\n        CAST(run_schedule_start AS TIMESTAMP) AS run_schedule_start_at,\r\n        CAST(run_schedule_end AS TIMESTAMP) AS run_schedule_end_at,\r\n        CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,\r\n        CAST(created_time AS TIMESTAMP) AS created_at,\r\n        ROW_NUMBER() OVER (PARTITION BY id ORDER BY last_modified_time DESC) = 1 AS is_latest_version\r\n    FROM macro\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__campaign_history": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__campaign_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__campaign_history.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__campaign_history.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__campaign_history"], "alias": "stg_linkedin_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "d5204bdeafedc413c0179c582ec3b5187ca163a76db56084b33757497ab43e6c"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.991966, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__campaign_history`", "raw_code": "WITH base AS (\r\n\r\n    SELECT *\r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.campaign_history`\r\n\r\n), macro AS (\r\n\r\n    SELECT \r\n        account_id AS account_id,\r\n        CAST(NULL AS BOOL) AS audience_expansion_enabled,\r\n        campaign_group_id AS campaign_group_id,\r\n        CAST(NULL AS STRING) AS cost_type,\r\n        created_time AS created_time,\r\n        CAST(NULL AS STRING) AS creative_selection,\r\n        CAST(NULL AS FLOAT64) AS daily_budget_amount,\r\n        CAST(NULL AS STRING) AS daily_budget_currency_code,\r\n        CAST(NULL AS STRING) AS format,\r\n        id AS id,\r\n        last_modified_time AS last_modified_time,\r\n        CAST(NULL AS STRING) AS locale_country,\r\n        CAST(NULL AS STRING) AS locale_language,\r\n        name AS name,\r\n        CAST(NULL AS STRING) AS objective_type,\r\n        CAST(NULL AS BOOL) AS offsite_delivery_enabled,\r\n        CAST(NULL AS STRING) AS optimization_target_type,\r\n        CAST(NULL AS TIMESTAMP) AS run_schedule_end,\r\n        CAST(NULL AS TIMESTAMP) AS run_schedule_start,\r\n        CAST(NULL AS STRING) AS status,\r\n        CAST(NULL AS STRING) AS type,\r\n        CAST(NULL AS FLOAT64) AS unit_cost_amount,\r\n        CAST(NULL AS STRING) AS unit_cost_currency_code,\r\n        version_tag AS version_tag,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n\r\n), fields AS (\r\n\r\n    SELECT \r\n        source_relation,\r\n        id AS campaign_id,\r\n        name AS campaign_name,\r\n        CAST(version_tag AS NUMERIC) AS version_tag,\r\n        campaign_group_id,\r\n        account_id,\r\n        status,\r\n        type,\r\n        cost_type,\r\n        creative_selection,\r\n        daily_budget_amount,\r\n        daily_budget_currency_code,\r\n        unit_cost_amount,\r\n        unit_cost_currency_code,\r\n        format,\r\n        locale_country,\r\n        locale_language,\r\n        objective_type,\r\n        optimization_target_type,\r\n        audience_expansion_enabled AS is_audience_expansion_enabled,\r\n        offsite_delivery_enabled AS is_offsite_delivery_enabled,\r\n        CAST(run_schedule_start AS TIMESTAMP) AS run_schedule_start_at,\r\n        CAST(run_schedule_end AS TIMESTAMP) AS run_schedule_end_at,\r\n        CAST(last_modified_time AS TIMESTAMP) AS last_modified_at,\r\n        CAST(created_time AS TIMESTAMP) AS created_at,\r\n        ROW_NUMBER() OVER (PARTITION BY id ORDER BY last_modified_time DESC) = 1 AS is_latest_version\r\n    FROM macro\r\n\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__creative_history": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__creative_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__creative_history.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__creative_history.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__creative_history", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__creative_history"], "alias": "stg_linkedin_ads__creative_history", "checksum": {"name": "sha256", "checksum": "2b74fa19bd4633414450188711751a09cc547e681bc9909219d66f4eaf0dbeca"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9956737, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__creative_history`", "raw_code": "with base as (\r\n\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.creative_history`\r\n\r\n), macro as (\r\n\r\n    select \r\n        campaign_id,\r\n        created_at as created_time,\r\n        timestamp(null) as created_at,\r\n        id,\r\n        timestamp(null) as last_modified_time,\r\n        last_modified_at,\r\n        intended_status,\r\n        cast(null as string) as status,\r\n        text_ad_landing_page,\r\n        spotlight_landing_page,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n), fields as (\r\n\r\n    select\r\n        source_relation,\r\n        id as creative_id,\r\n        campaign_id,\r\n        coalesce(status, intended_status) as status,\r\n        coalesce(text_ad_landing_page, spotlight_landing_page) as click_uri,\r\n        cast(coalesce(last_modified_time, last_modified_at) as timestamp) as last_modified_at,\r\n        cast(coalesce(created_time, created_at) as timestamp) as created_at,\r\n        case \r\n            when text_ad_landing_page is not null then 'text_ad'\r\n            when spotlight_landing_page is not null then 'spotlight'\r\n            else null\r\n        end as click_uri_type\r\n    from macro\r\n\r\n), url_fields as (\r\n\r\n    select \r\n        *,\r\n        row_number() over (partition by creative_id order by last_modified_at desc) = 1 as is_latest_version,\r\n\r\n        split(click_uri, '?')[safe_offset(0)] as base_url,\r\n\r\n        cast(\r\n            split(\r\n                split(\r\n                    replace(replace(replace(click_uri, 'android-app://', ''), 'http://', ''), 'https://', ''), \r\n                    '/'\r\n                )[safe_offset(0)], \r\n                '?'\r\n            )[safe_offset(0)] as string\r\n        ) as url_host,\r\n\r\n        '/' || cast(\r\n            split(\r\n                right(\r\n                    replace(replace(click_uri, 'http://', ''), 'https://', ''),\r\n                    length(\r\n                        replace(replace(click_uri, 'http://', ''), 'https://', '')\r\n                    )\r\n                    - coalesce(\r\n                        nullif(\r\n                            strpos(replace(replace(click_uri, 'http://', ''), 'https://', ''), '/'),\r\n                            0\r\n                        ),\r\n                        strpos(replace(replace(click_uri, 'http://', ''), 'https://', ''), '?') - 1\r\n                    )\r\n                ),\r\n                '?'\r\n            )[safe_offset(0)] as string\r\n        ) as url_path,\r\n\r\n        nullif(split(split(click_uri, 'utm_source=')[safe_offset(1)], '&')[safe_offset(0)], '') as utm_source,\r\n        nullif(split(split(click_uri, 'utm_medium=')[safe_offset(1)], '&')[safe_offset(0)], '') as utm_medium,\r\n        nullif(split(split(click_uri, 'utm_campaign=')[safe_offset(1)], '&')[safe_offset(0)], '') as utm_campaign,\r\n        nullif(split(split(click_uri, 'utm_content=')[safe_offset(1)], '&')[safe_offset(0)], '') as utm_content,\r\n        nullif(split(split(click_uri, 'utm_term=')[safe_offset(1)], '&')[safe_offset(0)], '') as utm_term\r\n\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom url_fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__geo": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__geo", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__geo.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__geo.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__geo", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__geo"], "alias": "stg_linkedin_ads__geo", "checksum": {"name": "sha256", "checksum": "467338ba95abcec5a5812f1b94da87e912883b490e68a03b419d45bdff3fafb5"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717738.9981084, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__geo`", "raw_code": "WITH base AS (\r\n\r\n    SELECT * \r\n    FROM {{ var('bronze_project') }}.{{ var('linked_in_schema') }}.geo\r\n\r\n),\r\n\r\nmacro AS (\r\n\r\n    SELECT\r\n        id AS id,\r\n        value AS value,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n\r\n),\r\n\r\nfields AS (\r\n    \r\n    SELECT \r\n        source_relation,\r\n        id AS geo_id,\r\n        value\r\n    FROM macro\r\n\r\n)\r\n\r\nSELECT *\r\nFROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__monthly_ad_analytics_by_country", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__monthly_ad_analytics_by_country.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__monthly_ad_analytics_by_country.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__monthly_ad_analytics_by_country"], "alias": "stg_linkedin_ads__monthly_ad_analytics_by_country", "checksum": {"name": "sha256", "checksum": "10d8e675d5e42b4bc097a1f726c68e2408a83d6b09bf3b5fe068a6ba6bca8414"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717739.0002663, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__monthly_ad_analytics_by_country`", "raw_code": "with base as (\r\n\r\n    select * \r\n    from {{ var('bronze_project') }}.{{ var('linked_in_schema') }}.monthly_ad_analytics_by_member_country\r\n\r\n),\r\n\r\nmacro as (\r\n\r\n    select\r\n        campaign_id,\r\n        month as date_month,\r\n        clicks,\r\n        member_country,\r\n        impressions,\r\n        conversion_value_in_local_currency,\r\n        cost_in_local_currency,\r\n        cost_in_usd,\r\n        cast(null as string) as external_website_conversions,\r\n        one_click_leads,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n),\r\n\r\nfields as (\r\n    \r\n    select \r\n        source_relation,\r\n\r\n        -- Convert 'YYYY-MM' \u2192 first day of month\r\n        parse_date('%Y-%m-%d', concat(split(date_month, '-')[offset(0)], '-', lpad(split(date_month, '-')[offset(1)], 2, '0'), '-01')) as date_month,\r\n\r\n        campaign_id,\r\n        member_country as member_country_geo_id,\r\n        clicks,\r\n        impressions,\r\n        cost_in_usd as cost,\r\n        coalesce(cast(conversion_value_in_local_currency as float64), 0) as conversion_value_in_local_currency,\r\n        coalesce(cast(external_website_conversions as int64), 0) as external_website_conversions,\r\n        coalesce(cast(one_click_leads as int64), 0) as one_click_leads\r\n\r\n    from macro\r\n)\r\n\r\nselect *\r\nfrom fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region": {"database": "ps-silver-gold", "schema": "staging_linkedin_ads_dev", "name": "stg_linkedin_ads__monthly_ad_analytics_by_region", "resource_type": "model", "package_name": "ps_silver_gold", "path": "linkedin\\staging\\stg_linkedin_ads__monthly_ad_analytics_by_region.sql", "original_file_path": "models\\linkedin\\staging\\stg_linkedin_ads__monthly_ad_analytics_by_region.sql", "unique_id": "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region", "fqn": ["ps_silver_gold", "linkedin", "staging", "stg_linkedin_ads__monthly_ad_analytics_by_region"], "alias": "stg_linkedin_ads__monthly_ad_analytics_by_region", "checksum": {"name": "sha256", "checksum": "4b8b7b84c995c42384f48fbbed6ae8304e8c8aace9f111606f2a350b43307f4e"}, "config": {"enabled": true, "alias": null, "schema": "staging_linkedin_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_linkedin_ads_' + target.name if target.name != 'prod' else 'staging_linkedin_ads' }}", "materialized": "table"}, "created_at": 1755717739.0036638, "relation_name": "`ps-silver-gold`.`staging_linkedin_ads_dev`.`stg_linkedin_ads__monthly_ad_analytics_by_region`", "raw_code": "WITH base AS (\r\n    SELECT * \r\n    FROM `{{ var('bronze_project') }}.{{ var('linked_in_schema') }}.monthly_ad_analytics_by_member_region`\r\n),\r\n\r\nmacro AS (\r\n    SELECT\r\n        campaign_id AS campaign_id,\r\n        month AS date_month, \r\n        clicks AS clicks,\r\n        member_region AS member_region,\r\n        impressions AS impressions,\r\n        conversion_value_in_local_currency AS conversion_value_in_local_currency,\r\n        cost_in_local_currency AS cost_in_local_currency,\r\n        cost_in_usd AS cost_in_usd,\r\n        CAST(NULL AS STRING) AS external_website_conversions,\r\n        one_click_leads AS one_click_leads,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfields AS (\r\n    SELECT \r\n        source_relation,\r\n        PARSE_DATE('%Y-%m-%d', CONCAT(SPLIT(date_month, '-')[OFFSET(0)], '-', LPAD(SPLIT(date_month, '-')[OFFSET(1)], 2, '0'), '-01')) AS date_month,\r\n        campaign_id,\r\n        member_region AS member_region_geo_id,\r\n        impressions,\r\n        clicks,\r\n        cost_in_usd AS cost,\r\n        COALESCE(CAST(conversion_value_in_local_currency AS FLOAT64), 0) AS conversion_value_in_local_currency,\r\n        COALESCE(CAST(external_website_conversions AS INT64), 0) AS external_website_conversions,\r\n        COALESCE(CAST(one_click_leads AS INT64), 0) AS one_click_leads\r\n    FROM macro\r\n)\r\n\r\nSELECT * FROM fields", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.brand_metadata": {"database": "ps-silver-gold", "schema": "mapping_dev", "name": "brand_metadata", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mapping\\brand_metadata.sql", "original_file_path": "models\\mapping\\brand_metadata.sql", "unique_id": "model.ps_silver_gold.brand_metadata", "fqn": ["ps_silver_gold", "mapping", "brand_metadata"], "alias": "brand_metadata", "checksum": {"name": "sha256", "checksum": "e2f831e1b29c2892d2001a78b4d88466b7dcfe9308b0a6d5c9525b3b1e1ddcfd"}, "config": {"enabled": true, "alias": null, "schema": "mapping_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'mapping_' + target.name if target.name != 'prod' else 'mapping' }}", "materialized": "table"}, "created_at": 1755717739.006953, "relation_name": "`ps-silver-gold`.`mapping_dev`.`brand_metadata`", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Ensure the external table exists by calling the macro\r\n{% do create_external_brand_table(var('mapping')) %}\r\n\r\n-- Dummy SELECT so dbt parses the model\r\nSELECT \r\n    'external table ensured' AS status,\r\n    CURRENT_TIMESTAMP() AS created_at", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.create_external_brand_table"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.client_metadata": {"database": "ps-silver-gold", "schema": "mapping_dev", "name": "client_metadata", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mapping\\client_metadata.sql", "original_file_path": "models\\mapping\\client_metadata.sql", "unique_id": "model.ps_silver_gold.client_metadata", "fqn": ["ps_silver_gold", "mapping", "client_metadata"], "alias": "client_metadata", "checksum": {"name": "sha256", "checksum": "aaf42b6d682f5afe2cef65afd694343dfc0cbec94b92237ab3ee12a116eca663"}, "config": {"enabled": true, "alias": null, "schema": "mapping_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'mapping_' + target.name if target.name != 'prod' else 'mapping' }}", "materialized": "table"}, "created_at": 1755717739.0102475, "relation_name": "`ps-silver-gold`.`mapping_dev`.`client_metadata`", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Ensure the external table exists by calling the macro\r\n{% do create_external_client_table(var('mapping')) %}\r\n\r\n-- Dummy SELECT so dbt parses the model\r\nSELECT \r\n    'external table ensured' AS status,\r\n    CURRENT_TIMESTAMP() AS created_at", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.create_external_client_table"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.mapping_metadata": {"database": "ps-silver-gold", "schema": "mapping_dev", "name": "mapping_metadata", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mapping\\mapping_metadata.sql", "original_file_path": "models\\mapping\\mapping_metadata.sql", "unique_id": "model.ps_silver_gold.mapping_metadata", "fqn": ["ps_silver_gold", "mapping", "mapping_metadata"], "alias": "mapping_metadata", "checksum": {"name": "sha256", "checksum": "5a826c340b190583feb728ac8476f786481245593312f962b3d50ebbdcbf0c25"}, "config": {"enabled": true, "alias": null, "schema": "mapping_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'mapping_' + target.name if target.name != 'prod' else 'mapping' }}", "materialized": "table"}, "created_at": 1755717739.0134609, "relation_name": "`ps-silver-gold`.`mapping_dev`.`mapping_metadata`", "raw_code": "{{ config(materialized='table') }}\r\n\r\n-- Ensure the external table exists by calling the macro\r\n{% do create_external_mapping_table(var('mapping')) %}\r\n\r\n-- Dummy SELECT so dbt parses the model\r\nSELECT \r\n    'external table ensured' AS status,\r\n    CURRENT_TIMESTAMP() AS created_at", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.create_external_mapping_table"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.account_unified_stats": {"database": "ps-silver-gold", "schema": "account_performance_dev", "name": "account_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\account_performance\\account_unified_stats.sql", "original_file_path": "models\\mart\\account_performance\\account_unified_stats.sql", "unique_id": "model.ps_silver_gold.account_unified_stats", "fqn": ["ps_silver_gold", "mart", "account_performance", "account_unified_stats"], "alias": "account_unified_stats", "checksum": {"name": "sha256", "checksum": "4e63319f90c0a21a138ea6d613daf6b6869765f63a66eccda196ef97e8a7b4fe"}, "config": {"enabled": true, "alias": null, "schema": "account_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'account_performance_' + target.name if target.name != 'prod' else 'account_performance' }}", "materialized": "table"}, "created_at": 1755717739.0162168, "relation_name": "`ps-silver-gold`.`account_performance_dev`.`account_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion\r\n    FROM\r\n        {{ ref('google_ads__account_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('facebook_ads__account_report') }}\r\n),\r\ntiktok_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversion AS conversions,\r\n        CAST(\r\n            NULL AS numeric\r\n        ) AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('tiktok_ads__advertiser_report') }}\r\n),\r\npinterest_stats AS (\r\n    SELECT\r\n        DATE(date_day) AS date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        total_conversions AS conversions,\r\n        total_conversions_value AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('pinterest_ads__advertiser_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('microsoft_ads__account_report') }}\r\n),\r\nlinkedin_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        cost AS spend,\r\n        total_conversions AS conversions,\r\n        CAST(\r\n            NULL AS numeric\r\n        ) AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('linkedin_ads__account_report') }}\r\n),\r\nstackadapt_stats AS (\r\n    SELECT\r\n        DATE(DATE) AS date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        CAST(\r\n            NULL AS numeric\r\n        ) AS conversions_value,\r\n        video_start AS video_views,\r\n        engagements,\r\n        video_completes AS video_completion\r\n    FROM\r\n        {{ ref('unified_data') }}\r\n    WHERE\r\n        ad_platform = 'stackadapt'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    tiktok_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    pinterest_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    linkedin_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    stackadapt_stats", "language": "sql", "refs": [{"name": "google_ads__account_report", "package": null, "version": null}, {"name": "facebook_ads__account_report", "package": null, "version": null}, {"name": "tiktok_ads__advertiser_report", "package": null, "version": null}, {"name": "pinterest_ads__advertiser_report", "package": null, "version": null}, {"name": "microsoft_ads__account_report", "package": null, "version": null}, {"name": "linkedin_ads__account_report", "package": null, "version": null}, {"name": "unified_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__account_report", "model.ps_silver_gold.facebook_ads__account_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.pinterest_ads__advertiser_report", "model.ps_silver_gold.microsoft_ads__account_report", "model.ps_silver_gold.linkedin_ads__account_report", "model.ps_silver_gold.unified_data"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.ad_group_unified_stats": {"database": "ps-silver-gold", "schema": "ad_group_performance_dev", "name": "ad_group_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\ad_group_performance\\ad_group_unified_stats.sql", "original_file_path": "models\\mart\\ad_group_performance\\ad_group_unified_stats.sql", "unique_id": "model.ps_silver_gold.ad_group_unified_stats", "fqn": ["ps_silver_gold", "mart", "ad_group_performance", "ad_group_unified_stats"], "alias": "ad_group_unified_stats", "checksum": {"name": "sha256", "checksum": "6cba2145d2ce52707bdc5372d6017c92dce526fb2b34c4fea6b48646246157b2"}, "config": {"enabled": true, "alias": null, "schema": "ad_group_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'ad_group_performance_' + target.name if target.name != 'prod' else 'ad_group_performance' }}", "materialized": "table"}, "created_at": 1755717739.0188825, "relation_name": "`ps-silver-gold`.`ad_group_performance_dev`.`ad_group_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            ad_group_id AS STRING\r\n        ) AS ad_group_id,\r\n        ad_group_name,\r\n        ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion\r\n    FROM\r\n        {{ ref('google_ads__ad_group_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            ad_set_id AS STRING\r\n        ) AS ad_group_id,\r\n        ad_set_name AS ad_group_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion\r\n    FROM\r\n        {{ ref('facebook_ads__ad_set_report') }}\r\n),\r\ntiktok_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            ad_group_id AS STRING\r\n        ) AS ad_group_id,\r\n        ad_group_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversion AS conversions,\r\n        NULL AS conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion\r\n    FROM\r\n        {{ ref('tiktok_ads__ad_group_report') }}\r\n),\r\npinterest_stats AS (\r\n    SELECT\r\n        DATE(date_day) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            ad_group_id AS STRING\r\n        ) AS ad_group_id,\r\n        ad_group_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        total_conversions AS conversions,\r\n        total_conversions_value AS conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion\r\n    FROM\r\n        {{ ref('pinterest_ads__ad_group_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            ad_group_id AS STRING\r\n        ) AS ad_group_id,\r\n        ad_group_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion,\r\n    FROM\r\n        {{ ref('microsoft_ads__ad_group_report') }}\r\n),\r\nstackadapt_stats AS (\r\n    SELECT\r\n        DATE(DATE) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            campaign_group_id AS STRING\r\n        ) AS ad_group_id,\r\n        campaign_group_name AS ad_group_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS bid_stratagy,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        NULL AS conversions_value,\r\n        video_start AS video_views,\r\n        engagements,\r\n        video_completes AS video_completion\r\n    FROM\r\n        {{ ref('unified_data') }}\r\n    WHERE\r\n        ad_platform = 'stackadapt'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    tiktok_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    pinterest_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    stackadapt_stats", "language": "sql", "refs": [{"name": "google_ads__ad_group_report", "package": null, "version": null}, {"name": "facebook_ads__ad_set_report", "package": null, "version": null}, {"name": "tiktok_ads__ad_group_report", "package": null, "version": null}, {"name": "pinterest_ads__ad_group_report", "package": null, "version": null}, {"name": "microsoft_ads__ad_group_report", "package": null, "version": null}, {"name": "unified_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.tiktok_ads__ad_group_report", "model.ps_silver_gold.pinterest_ads__ad_group_report", "model.ps_silver_gold.microsoft_ads__ad_group_report", "model.ps_silver_gold.unified_data"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.ad_unified_stats": {"database": "ps-silver-gold", "schema": "ad_performance_dev", "name": "ad_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\ad_performance\\ad_unified_stats.sql", "original_file_path": "models\\mart\\ad_performance\\ad_unified_stats.sql", "unique_id": "model.ps_silver_gold.ad_unified_stats", "fqn": ["ps_silver_gold", "mart", "ad_performance", "ad_unified_stats"], "alias": "ad_unified_stats", "checksum": {"name": "sha256", "checksum": "d9861635fbad4b097bc1bf13b289e82c5726260434df1f01fe47138aa6ad0ba7"}, "config": {"enabled": true, "alias": null, "schema": "ad_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'ad_performance_' + target.name if target.name != 'prod' else 'ad_performance' }}", "materialized": "table"}, "created_at": 1755717739.0203068, "relation_name": "`ps-silver-gold`.`ad_performance_dev`.`ad_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_id,\r\n        ad_name,\r\n        ad_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion\r\n    FROM\r\n        {{ ref('google_ads__ad_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_set_id AS ad_group_id,\r\n        ad_set_name AS ad_group_name,\r\n        ad_id,\r\n        ad_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_type,\r\n        creative_name,\r\n        base_url AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion,\r\n    FROM\r\n        {{ ref('facebook_ads__url_report') }}\r\n),\r\ntiktok_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_id,\r\n        ad_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_name,\r\n        base_url AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversion AS conversions,\r\n        NULL AS conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion,\r\n    FROM\r\n        {{ ref('tiktok_ads__url_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        ad_id,\r\n        ad_name,\r\n        ad_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        NULL AS video_views,\r\n        NULL AS engagements,\r\n        NULL AS video_completion,\r\n    FROM\r\n        {{ ref('microsoft_ads__ad_report') }}\r\n),\r\nlinkedin_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_group_id AS int64\r\n        ) AS campaign_id,\r\n        campaign_group_name AS campaign_name,\r\n        NULL AS ad_group_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_group_name,\r\n        creative_id AS ad_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS ad_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_name,\r\n        click_uri AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        click_uri_type AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        cost AS spend,\r\n        total_conversions AS conversions,\r\n        CAST(\r\n            NULL AS numeric\r\n        ) AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion,\r\n    FROM\r\n        {{ ref('linkedin_ads__creative_report') }}\r\n),\r\nstackadapt_stats AS (\r\n    SELECT\r\n        DATE(DATE) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS int64\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            campaign_group_id AS int64\r\n        ) AS ad_group_id,\r\n        campaign_group_name AS ad_group_name,\r\n        CAST(\r\n            advertiser_id AS int64\r\n        ) AS ad_id,\r\n        creative_name AS ad_name,\r\n        channels AS ad_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS tagline,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_type,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS creative_size,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        NULL AS conversions_value,\r\n        video_start AS video_views,\r\n        engagements,\r\n        video_completes AS video_completion,\r\n    FROM\r\n        {{ ref('unified_data') }}\r\n    WHERE\r\n        ad_platform = 'stackadapt'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    tiktok_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    linkedin_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    stackadapt_stats", "language": "sql", "refs": [{"name": "google_ads__ad_report", "package": null, "version": null}, {"name": "facebook_ads__url_report", "package": null, "version": null}, {"name": "tiktok_ads__url_report", "package": null, "version": null}, {"name": "microsoft_ads__ad_report", "package": null, "version": null}, {"name": "linkedin_ads__creative_report", "package": null, "version": null}, {"name": "unified_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.facebook_ads__url_report", "model.ps_silver_gold.tiktok_ads__url_report", "model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.unified_data"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.campaign_unified_stats": {"database": "ps-silver-gold", "schema": "campaign_performance_dev", "name": "campaign_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\campaign_performance\\campaign_unified_stats.sql", "original_file_path": "models\\mart\\campaign_performance\\campaign_unified_stats.sql", "unique_id": "model.ps_silver_gold.campaign_unified_stats", "fqn": ["ps_silver_gold", "mart", "campaign_performance", "campaign_unified_stats"], "alias": "campaign_unified_stats", "checksum": {"name": "sha256", "checksum": "958af15dc7771cd0178f06d2470d27dbea2838d124838f2f48f076dee11ac55c"}, "config": {"enabled": true, "alias": null, "schema": "campaign_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'campaign_performance_' + target.name if target.name != 'prod' else 'campaign_performance' }}", "materialized": "table"}, "created_at": 1755717739.021805, "relation_name": "`ps-silver-gold`.`campaign_performance_dev`.`campaign_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            campaign_status AS STRING\r\n        ) AS status,\r\n        campaign_advertising_channel_type AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion,\r\n    FROM\r\n        {{ ref('google_ads__campaign_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            status AS STRING\r\n        ) AS status,\r\n        CAST (\r\n            NULL AS STRING\r\n        ) AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('facebook_ads__campaign_report') }}\r\n),\r\ntiktok_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS status,\r\n        CAST (\r\n            NULL AS STRING\r\n        ) AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversion AS conversions,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('tiktok_ads__campaign_report') }}\r\n),\r\npinterest_stats AS (\r\n    SELECT\r\n        DATE(date_day) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            campaign_status AS STRING\r\n        ) AS status,\r\n        CAST (\r\n            NULL AS STRING\r\n        ) AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        total_conversions AS conversions,\r\n        total_conversions_value AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('pinterest_ads__campaign_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            campaign_status AS STRING\r\n        ) AS status,\r\n        campaign_type AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('microsoft_ads__campaign_report') }}\r\n),\r\nlinkedin_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_group_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_group_name AS campaign_name,\r\n        CAST(\r\n            campaign_group_status AS STRING\r\n        ) AS status,\r\n        campaign_type AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        cost AS spend,\r\n        total_conversions AS conversions,\r\n        conversion_value_in_local_currency AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('linkedin_ads__campaign_report') }}\r\n),\r\nstackadapt_stats AS (\r\n    SELECT\r\n        CAST(\r\n            date AS DATE\r\n        ) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS status,\r\n        CAST (\r\n            NULL AS STRING\r\n        ) AS campaign_type,\r\n        CAST( NULL as STRING) as time_of_day,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS conversions_value,\r\n        video_completes AS video_views,\r\n        engagements,\r\n        video_completion_rate AS video_completion\r\n    FROM\r\n        {{ ref('unified_data') }}\r\n    WHERE\r\n        ad_platform = 'stackadapt'\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    tiktok_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    pinterest_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    linkedin_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    stackadapt_stats", "language": "sql", "refs": [{"name": "google_ads__campaign_report", "package": null, "version": null}, {"name": "facebook_ads__campaign_report", "package": null, "version": null}, {"name": "tiktok_ads__campaign_report", "package": null, "version": null}, {"name": "pinterest_ads__campaign_report", "package": null, "version": null}, {"name": "microsoft_ads__campaign_report", "package": null, "version": null}, {"name": "linkedin_ads__campaign_report", "package": null, "version": null}, {"name": "unified_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__campaign_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.tiktok_ads__campaign_report", "model.ps_silver_gold.pinterest_ads__campaign_report", "model.ps_silver_gold.microsoft_ads__campaign_report", "model.ps_silver_gold.linkedin_ads__campaign_report", "model.ps_silver_gold.unified_data"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.device_unified_stats": {"database": "ps-silver-gold", "schema": "device_performance_dev", "name": "device_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\device_performance\\device_unified_stats.sql", "original_file_path": "models\\mart\\device_performance\\device_unified_stats.sql", "unique_id": "model.ps_silver_gold.device_unified_stats", "fqn": ["ps_silver_gold", "mart", "device_performance", "device_unified_stats"], "alias": "device_unified_stats", "checksum": {"name": "sha256", "checksum": "dc343fbc07f674bccd324ea5cf70578f73396352ed6c829efac4b3320488bdac"}, "config": {"enabled": true, "alias": null, "schema": "device_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'device_performance_' + target.name if target.name != 'prod' else 'device_performance' }}", "materialized": "table"}, "created_at": 1755717739.0231595, "relation_name": "`ps-silver-gold`.`device_performance_dev`.`device_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        segments_device as device_type,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion\r\n    FROM\r\n        {{ ref('google_ads__device_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        device_type,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('microsoft_ads__ad_group_report') }}\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats", "language": "sql", "refs": [{"name": "google_ads__device_report", "package": null, "version": null}, {"name": "microsoft_ads__ad_group_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__device_report", "model.ps_silver_gold.microsoft_ads__ad_group_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.geo_unified_stats": {"database": "ps-silver-gold", "schema": "geo_performance_dev", "name": "geo_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\geo_performance\\geo_unified_stats.sql", "original_file_path": "models\\mart\\geo_performance\\geo_unified_stats.sql", "unique_id": "model.ps_silver_gold.geo_unified_stats", "fqn": ["ps_silver_gold", "mart", "geo_performance", "geo_unified_stats"], "alias": "geo_unified_stats", "checksum": {"name": "sha256", "checksum": "bcbca9dd9ee9fcdedd4c0c4481ffa1838476bfcc1fc2c6a819339975c9bc7b44"}, "config": {"enabled": true, "alias": null, "schema": "geo_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'geo_performance_' + target.name if target.name != 'prod' else 'geo_performance' }}", "materialized": "table"}, "created_at": 1755717739.024495, "relation_name": "`ps-silver-gold`.`geo_performance_dev`.`geo_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        TRIM(SPLIT(geo_target, ',') [SAFE_OFFSET(2)]) AS country,\r\n        TRIM(SPLIT(geo_target, ',') [SAFE_OFFSET(1)]) AS region,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS dma,\r\n        TRIM(SPLIT(geo_target, ',') [SAFE_OFFSET(0)]) AS city_area,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value,\r\n        video_views,\r\n        engagements,\r\n        video_completion\r\n    FROM\r\n        {{ ref('google_ads__DMA_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS campaign_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS campaign_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS country,\r\n        region,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS dma,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS city,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        NULL AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('facebook_ads__region_report') }}\r\n),\r\npinterest_stats AS (\r\n    SELECT\r\n        DATE(date_day) AS date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS campaign_name,\r\n        country_name AS country,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS region,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS dma,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS city,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        total_conversions AS conversions,\r\n        total_conversions_value AS conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('pinterest_ads__campaign_country_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        CAST(\r\n            client_id AS STRING\r\n        ) AS client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        CAST(\r\n            campaign_id AS STRING\r\n        ) AS campaign_id,\r\n        campaign_name,\r\n        country AS country,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS region,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS dma,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS city,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS int64\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS float64\r\n        ) AS video_completion\r\n    FROM\r\n        {{ ref('microsoft_ads__campaign_region_report') }}\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    pinterest_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats", "language": "sql", "refs": [{"name": "google_ads__DMA_report", "package": null, "version": null}, {"name": "facebook_ads__region_report", "package": null, "version": null}, {"name": "pinterest_ads__campaign_country_report", "package": null, "version": null}, {"name": "microsoft_ads__campaign_region_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__DMA_report", "model.ps_silver_gold.facebook_ads__region_report", "model.ps_silver_gold.pinterest_ads__campaign_country_report", "model.ps_silver_gold.microsoft_ads__campaign_region_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.keyword_unified_stats": {"database": "ps-silver-gold", "schema": "keyword_performance_dev", "name": "keyword_unified_stats", "resource_type": "model", "package_name": "ps_silver_gold", "path": "mart\\keyword_performance\\keyword_unified_stats.sql", "original_file_path": "models\\mart\\keyword_performance\\keyword_unified_stats.sql", "unique_id": "model.ps_silver_gold.keyword_unified_stats", "fqn": ["ps_silver_gold", "mart", "keyword_performance", "keyword_unified_stats"], "alias": "keyword_unified_stats", "checksum": {"name": "sha256", "checksum": "822fb041a915271480c657593157891bdf990cbecbdb9edb4b0eede54ec1c02c"}, "config": {"enabled": true, "alias": null, "schema": "keyword_performance_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'keyword_performance_' + target.name if target.name != 'prod' else 'keyword_performance' }}", "materialized": "table"}, "created_at": 1755717739.0263686, "relation_name": "`ps-silver-gold`.`keyword_performance_dev`.`keyword_unified_stats`", "raw_code": "WITH google_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        keyword_id AS keyword_id,\r\n        keyword_text AS keyword_text,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS final_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS search_term,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS search_term_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_completes,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS match_type,\r\n        clicks,\r\n        impressions,\r\n        spend_usd AS spend,\r\n        conversions,\r\n        conversions_value\r\n    FROM\r\n        {{ ref('google_ads__keyword_report') }}\r\n),\r\nfacebook_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_set_id AS ad_group_id,\r\n        ad_set_name AS ad_group_name,\r\n        creative_id AS keyword_id,\r\n        creative_name AS keyword_text,\r\n        base_url AS final_url,\r\n        CAST(\r\n            utm_term AS STRING\r\n        ) AS search_term,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS search_term_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_completes,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS match_type,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value\r\n    FROM\r\n        {{ ref('facebook_ads__url_report') }}\r\n),\r\nbing_stats AS (\r\n    SELECT\r\n        date_day,\r\n        client_id,\r\n        client_name,\r\n        ad_platform,\r\n        sub_client_name,\r\n        campaign_id,\r\n        campaign_name,\r\n        ad_group_id,\r\n        ad_group_name,\r\n        keyword_id,\r\n        keyword_name,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS final_url,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS search_term,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS search_term_id,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS engagements,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_views,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS video_completes,\r\n        CAST(\r\n            NULL AS STRING\r\n        ) AS match_type,\r\n        clicks,\r\n        impressions,\r\n        spend,\r\n        conversions,\r\n        conversions_value\r\n    FROM\r\n        {{ ref('microsoft_ads__keyword_report') }}\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    google_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    facebook_stats\r\nUNION ALL\r\nSELECT\r\n    *\r\nFROM\r\n    bing_stats", "language": "sql", "refs": [{"name": "google_ads__keyword_report", "package": null, "version": null}, {"name": "facebook_ads__url_report", "package": null, "version": null}, {"name": "microsoft_ads__keyword_report", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.google_ads__keyword_report", "model.ps_silver_gold.facebook_ads__url_report", "model.ps_silver_gold.microsoft_ads__keyword_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__advertiser_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__advertiser_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__advertiser_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__advertiser_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__advertiser_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__advertiser_report"], "alias": "pinterest_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "fd6c5fec9eb2db26a7b823a9ba41659c96bd554b612e5498583449311fcaba1d"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0278316, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__advertiser_report`", "raw_code": "with report as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_report') }}\r\n\r\n), \r\n\r\nadvertisers as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n\r\n), \r\n\r\nmapping as (\r\n\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n\r\n), \r\n\r\nfields as (\r\n\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        advertisers.advertiser_name,\r\n        report.advertiser_id,\r\n        advertisers.currency_code,\r\n        advertisers.country,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n\r\n    from report\r\n    left join advertisers\r\n        on cast(report.advertiser_id as STRING) = cast(advertisers.advertiser_id as STRING)\r\n        and report.source_relation = advertisers.source_relation\r\n    left join mapping\r\n        on cast(report.advertiser_id as STRING) = cast(mapping.account_id as STRING)\r\n\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom fields", "language": "sql", "refs": [{"name": "stg_pinterest_ads__advertiser_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__advertiser_report", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__ad_group_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__ad_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__ad_group_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__ad_group_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__ad_group_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__ad_group_report"], "alias": "pinterest_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "78dcf076f79333fb073976108d769bd92df1edcd219d7e57a8fb669829b3a7e3"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0305927, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__ad_group_report`", "raw_code": "with report as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__ad_group_report') }}\r\n\r\n), \r\n\r\nadvertisers as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n\r\n), \r\n\r\ncampaigns as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n\r\n),\r\n\r\nad_groups as (\r\n\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__ad_group_history') }}\r\n\r\n), \r\n\r\nmapping as (\r\n\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n\r\n), \r\n\r\nfields as (\r\n\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        advertisers.advertiser_name,\r\n        advertisers.advertiser_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_status,\r\n        campaigns.campaign_id,\r\n        ad_groups.ad_group_name,\r\n        report.ad_group_id,\r\n        ad_groups.created_at,\r\n        ad_groups.start_time,\r\n        ad_groups.end_time,\r\n        ad_groups.ad_group_status,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n\r\n    from report\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns\r\n        on ad_groups.campaign_id = campaigns.campaign_id\r\n        and ad_groups.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    LEFT JOIN mapping\r\n        ON CAST(advertisers.advertiser_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom fields", "language": "sql", "refs": [{"name": "stg_pinterest_ads__ad_group_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__ad_group_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__ad_group_report", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__ad_group_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__campaign_country_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__campaign_country_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__campaign_country_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__campaign_country_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__campaign_country_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__campaign_country_report"], "alias": "pinterest_ads__campaign_country_report", "checksum": {"name": "sha256", "checksum": "0a7395fd1c81ab4b93e5ba585fc29982f489d6e833e799c7d0d4eb25b5a34170"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0340903, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__campaign_country_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_report') }}\r\n    where lower(targeting_type) = 'country'\r\n),\r\n\r\ncountries as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__targeting_geo') }}\r\n),\r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nadvertisers as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n),\r\n\r\nfields as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        countries.country_name,\r\n        countries.country_id,\r\n        report.campaign_id,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n    from report\r\n    left join countries\r\n        on report.targeting_value = countries.country_id\r\n        and report.source_relation = countries.source_relation\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        fields.*,\r\n        advertisers.advertiser_name,\r\n        advertisers.advertiser_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_status,\r\n        campaigns.daily_spend_cap,\r\n        campaigns.lifetime_spend_cap,\r\n        campaigns.created_at as campaign_created_at,\r\n        campaigns.default_ad_group_budget_in_micro_currency,\r\n        campaigns.end_time as campaign_end_time,\r\n        campaigns.is_campaign_budget_optimization,\r\n        campaigns.is_flexible_daily_budgets,\r\n        campaigns.objective_type as campaign_objective_type,\r\n        campaigns.start_time as campaign_start_time,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name\r\n    from fields\r\n    left join campaigns\r\n        on fields.campaign_id = campaigns.campaign_id\r\n        and fields.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    left join mapping\r\n        on cast(advertisers.advertiser_id as STRING) = cast(mapping.account_id as STRING)\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_pinterest_ads__pin_promotion_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__targeting_geo", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "model.ps_silver_gold.stg_pinterest_ads__targeting_geo", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__campaign_region_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__campaign_region_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__campaign_region_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__campaign_region_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__campaign_region_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__campaign_region_report"], "alias": "pinterest_ads__campaign_region_report", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0395374, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__campaign_region_report`", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__campaign_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__campaign_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__campaign_report"], "alias": "pinterest_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "a6b1ca3bc7792d0a9da16e0c0fdda165e50bd997ccb4deca2da7e7f8ba04b979"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0410473, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__campaign_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_report') }}\r\n),\r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nadvertisers as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n),\r\n\r\nfields as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        advertisers.advertiser_name,\r\n        advertisers.advertiser_id,\r\n        campaigns.campaign_name,\r\n        report.campaign_id,\r\n        campaigns.campaign_status,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n    from report\r\n    left join campaigns\r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        fields.*,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n    from fields\r\n    left join mapping\r\n        on cast(fields.advertiser_id as STRING) = cast(mapping.account_id as STRING)\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_pinterest_ads__campaign_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__campaign_report", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__keyword_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__keyword_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__keyword_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__keyword_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__keyword_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__keyword_report"], "alias": "pinterest_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "4437030a951df003aed792724801d7864c7081f1dd9f7e7215f8dc74d2219223"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.04425, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__keyword_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_report') }}\r\n), \r\n\r\npins as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__ad_group_history') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nadvertisers as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n), \r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        campaigns.advertiser_id,\r\n        advertisers.advertiser_name,\r\n        report.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_status,\r\n        report.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        pins.creative_type,\r\n        report.pin_promotion_id,\r\n        pins.pin_name,\r\n        pins.pin_status,\r\n        pins.destination_url,\r\n        pins.base_url,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n    from report \r\n    left join pins \r\n        on report.pin_promotion_id = pins.pin_promotion_id\r\n        and report.source_relation = pins.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns \r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        joined.*,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name\r\n    from joined\r\n    left join mapping\r\n        on cast(joined.advertiser_id as STRING) = cast(mapping.account_id as STRING)\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [{"name": "stg_pinterest_ads__pin_promotion_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__pin_promotion_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__pin_promotion_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__pin_promotion_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__pin_promotion_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__pin_promotion_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__pin_promotion_report"], "alias": "pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "e9e73e0260970b8c96634373ff0db103c19ec76f99cf98d3eb36350134441dfe"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0470638, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__pin_promotion_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_report') }}\r\n), \r\n\r\npins as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__ad_group_history') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nadvertisers as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        campaigns.advertiser_id,\r\n        advertisers.advertiser_name,\r\n        report.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_status,\r\n        report.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        pins.destination_url,\r\n        pins.creative_type,\r\n        report.pin_promotion_id,\r\n        pins.pin_name,\r\n        pins.pin_status,\r\n        pins.base_url,\r\n        pins.url_host,\r\n        pins.url_path,\r\n        pins.utm_source,\r\n        pins.utm_medium,\r\n        pins.utm_campaign,\r\n        pins.utm_content,\r\n        pins.utm_term,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n    from report \r\n    left join pins \r\n        on report.pin_promotion_id = pins.pin_promotion_id\r\n        and report.source_relation = pins.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns \r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    where pins.destination_url is not null\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        joined.*,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name\r\n    from joined\r\n    left join mapping\r\n        on cast(joined.advertiser_id as string) = cast(mapping.account_id as string)\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [{"name": "stg_pinterest_ads__pin_promotion_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__pin_promotion_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.pinterest_ads__url_report": {"database": "ps-silver-gold", "schema": "silver_pinterest_ads_dev", "name": "pinterest_ads__url_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\intermediate\\pinterest_ads__url_report.sql", "original_file_path": "models\\pinterest\\intermediate\\pinterest_ads__url_report.sql", "unique_id": "model.ps_silver_gold.pinterest_ads__url_report", "fqn": ["ps_silver_gold", "pinterest", "intermediate", "pinterest_ads__url_report"], "alias": "pinterest_ads__url_report", "checksum": {"name": "sha256", "checksum": "e9e73e0260970b8c96634373ff0db103c19ec76f99cf98d3eb36350134441dfe"}, "config": {"enabled": true, "alias": null, "schema": "silver_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_pinterest_ads_' + target.name if target.name != 'prod' else 'silver_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0502894, "relation_name": "`ps-silver-gold`.`silver_pinterest_ads_dev`.`pinterest_ads__url_report`", "raw_code": "with report as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_report') }}\r\n), \r\n\r\npins as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__pin_promotion_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__ad_group_history') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__campaign_history') }}\r\n    where is_most_recent_record = True\r\n),\r\n\r\nadvertisers as (\r\n    select *\r\n    from {{ ref('stg_pinterest_ads__advertiser_history') }}\r\n    where is_most_recent_record = True\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'pinterest'\r\n),\r\n\r\njoined as (\r\n    select\r\n        report.source_relation,\r\n        report.date_day,\r\n        campaigns.advertiser_id,\r\n        advertisers.advertiser_name,\r\n        report.campaign_id,\r\n        campaigns.campaign_name,\r\n        campaigns.campaign_status,\r\n        report.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ad_groups.ad_group_status,\r\n        pins.destination_url,\r\n        pins.creative_type,\r\n        report.pin_promotion_id,\r\n        pins.pin_name,\r\n        pins.pin_status,\r\n        pins.base_url,\r\n        pins.url_host,\r\n        pins.url_path,\r\n        pins.utm_source,\r\n        pins.utm_medium,\r\n        pins.utm_campaign,\r\n        pins.utm_content,\r\n        pins.utm_term,\r\n        sum(report.spend) as spend,\r\n        sum(report.clicks) as clicks,\r\n        sum(report.impressions) as impressions,\r\n        sum(report.total_conversions) as total_conversions,\r\n        sum(report.total_conversions_quantity) as total_conversions_quantity,\r\n        sum(report.total_conversions_value) as total_conversions_value\r\n    from report \r\n    left join pins \r\n        on report.pin_promotion_id = pins.pin_promotion_id\r\n        and report.source_relation = pins.source_relation\r\n    left join ad_groups\r\n        on report.ad_group_id = ad_groups.ad_group_id\r\n        and report.source_relation = ad_groups.source_relation\r\n    left join campaigns \r\n        on report.campaign_id = campaigns.campaign_id\r\n        and report.source_relation = campaigns.source_relation\r\n    left join advertisers\r\n        on campaigns.advertiser_id = advertisers.advertiser_id\r\n        and campaigns.source_relation = advertisers.source_relation\r\n    where pins.destination_url is not null\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        joined.*,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name\r\n    from joined\r\n    left join mapping\r\n        on cast(joined.advertiser_id as string) = cast(mapping.account_id as string)\r\n)\r\n\r\nselect * \r\nfrom final", "language": "sql", "refs": [{"name": "stg_pinterest_ads__pin_promotion_report", "package": null, "version": null}, {"name": "stg_pinterest_ads__pin_promotion_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__campaign_history", "package": null, "version": null}, {"name": "stg_pinterest_ads__advertiser_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__advertiser_history": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__advertiser_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__advertiser_history.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__advertiser_history.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__advertiser_history"], "alias": "stg_pinterest_ads__advertiser_history", "checksum": {"name": "sha256", "checksum": "bf605b88f247aa0874d9bce60b0691c4c38a9967cc6c376bcfe57dbeb8ed9ac7"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0537925, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__advertiser_history`", "raw_code": "with base as (\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.advertiser_history`\r\n),\r\n\r\nfinal as (\r\n    select\r\n        cast('' as STRING) as source_relation,\r\n        cast(id as STRING) as advertiser_id,\r\n        name as advertiser_name,\r\n        country,\r\n        created_time as created_at,\r\n        currency as currency_code,\r\n        owner_user_id,\r\n        owner_username,\r\n        account_permissions as advertiser_permissions,\r\n        updated_time as updated_at,\r\n        row_number() over (partition by cast('' as STRING), id order by updated_time desc) = 1 as is_most_recent_record\r\n    from base\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__advertiser_report": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__advertiser_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__advertiser_report.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__advertiser_report.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__advertiser_report", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__advertiser_report"], "alias": "stg_pinterest_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "9fe1c14750777191c046c2ae32962040bb0dd32513f1f0d2e1ced14914136783"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.056125, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__advertiser_report`", "raw_code": "WITH base AS (\r\n    SELECT * \r\n    FROM {{ var('bronze_project') }}.{{ var('pinterest_schema') }}.advertiser_report\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        CAST('' AS STRING) AS source_relation, \r\n        DATE_TRUNC(date, DAY) AS date_day,\r\n        CAST(advertiser_id AS STRING) AS advertiser_id,\r\n        COALESCE(impression_1, 0) + COALESCE(impression_2, 0) AS impressions,\r\n        COALESCE(clickthrough_1, 0) + COALESCE(clickthrough_2, 0) AS clicks,\r\n        COALESCE(spend_in_micro_dollar, 0) / 1000000.0 AS spend,\r\n        COALESCE(total_conversions, 0) AS total_conversions,\r\n        COALESCE(total_conversions_quantity, 0) AS total_conversions_quantity,\r\n        COALESCE(total_conversions_value_in_micro_dollar, 0) / 1000000.0 AS total_conversions_value\r\n    FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__ad_group_history": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__ad_group_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__ad_group_history.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__ad_group_history.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__ad_group_history"], "alias": "stg_pinterest_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "4e04a829b01e7a186aff6b42574ffa5cd66a0acc947b07cb7039aa75b7699af5"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.058513, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__ad_group_history`", "raw_code": "with base as (\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.ad_group_history`\r\n),\r\n\r\nfinal as (\r\n    select\r\n        cast('' as string) as source_relation,\r\n        cast(id as string) as ad_group_id,\r\n        name as ad_group_name,\r\n        status as ad_group_status,\r\n        ad_account_id as advertiser_id,\r\n        _fivetran_synced,\r\n        cast(campaign_id as string) as campaign_id,\r\n        created_time as created_at,\r\n        end_time,\r\n        pacing_delivery_type,\r\n        placement_group,\r\n        start_time,\r\n        summary_status,\r\n        row_number() over (partition by '', id order by _fivetran_synced desc) as rn\r\n    from base\r\n)\r\n\r\nselect *\r\nfrom final\r\nwhere rn = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__ad_group_report": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__ad_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__ad_group_report.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__ad_group_report.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__ad_group_report", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__ad_group_report"], "alias": "stg_pinterest_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "f8d9103689efed8a584a2630cc84e38e18c9111d2d49be791965cc2664a3bbed"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.06069, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__ad_group_report`", "raw_code": "with base as (\r\n    select * \r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.ad_group_report`\r\n),\r\n\r\nfinal as (\r\n    select\r\n        cast('' as string) as source_relation,\r\n        date_trunc(date, day) as date_day,\r\n        cast(ad_group_id as string) as ad_group_id,\r\n        ad_group_name,\r\n        ad_group_status,\r\n        cast(campaign_id as string) as campaign_id,\r\n        cast(advertiser_id as string) as advertiser_id,  -- <== MISSING COMMA FIXED HERE\r\n        coalesce(impression_1, 0) + coalesce(impression_2, 0) as impressions,\r\n        coalesce(clickthrough_1, 0) + coalesce(clickthrough_2, 0) as clicks,\r\n        coalesce(spend_in_micro_dollar, 0) / 1000000.0 as spend,\r\n        coalesce(total_conversions, 0) as total_conversions,\r\n        coalesce(total_conversions_quantity, 0) as total_conversions_quantity,\r\n        coalesce(total_conversions_value_in_micro_dollar, 0) / 1000000.0 as total_conversions_value\r\n    from base\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__campaign_history": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__campaign_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__campaign_history.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__campaign_history.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__campaign_history"], "alias": "stg_pinterest_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "78eea1b9c717c9ab3b3d0b42638fdb33e190a92c5b5b235be454ce36de0d28d1"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0629287, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__campaign_history`", "raw_code": "WITH base AS (\r\n    SELECT *\r\n    FROM `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.campaign_history`\r\n), \r\n\r\nfields AS (\r\n    SELECT\r\n        _fivetran_synced,\r\n        created_time,\r\n        default_ad_group_budget_in_micro_currency,\r\n        is_automated_campaign,\r\n        is_campaign_budget_optimization,\r\n        is_flexible_daily_budgets,\r\n        id,\r\n        advertiser_id,\r\n        name,\r\n        status,\r\n        start_time,\r\n        end_time,\r\n        daily_spend_cap,\r\n        lifetime_spend_cap,\r\n        objective_type,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n), \r\n\r\nfinal AS (\r\n    SELECT\r\n        source_relation, \r\n        CAST(id AS STRING) AS campaign_id,\r\n        name AS campaign_name,\r\n        CAST(advertiser_id AS STRING) AS advertiser_id,\r\n        default_ad_group_budget_in_micro_currency,\r\n        is_automated_campaign,\r\n        is_campaign_budget_optimization,\r\n        is_flexible_daily_budgets,\r\n        status AS campaign_status,\r\n        _fivetran_synced,\r\n        created_time AS created_at,\r\n        start_time,\r\n        end_time,\r\n        daily_spend_cap,\r\n        lifetime_spend_cap,\r\n        objective_type,\r\n        ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record\r\n    FROM fields\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__campaign_report": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__campaign_report.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__campaign_report", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__campaign_report"], "alias": "stg_pinterest_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "0d8dc2b4ec234dd0e0ba29aa098551ac40a4a1e9e89247a36f2a5e9fd465aa15"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.065353, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__campaign_report`", "raw_code": "WITH base AS (\r\n    SELECT * \r\n    FROM `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.campaign_report`\r\n),\r\n\r\nfields AS (\r\n    SELECT\r\n        _fivetran_synced,\r\n        advertiser_id,\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_status,\r\n        clickthrough_1,\r\n        clickthrough_2,\r\n        date,\r\n        impression_1,\r\n        impression_2,\r\n        spend_in_micro_dollar,\r\n        total_conversions,\r\n        total_conversions_quantity,\r\n        total_conversions_value_in_micro_dollar,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        source_relation, \r\n        DATE_TRUNC(date, DAY) AS date_day,\r\n        CAST(campaign_id AS STRING) AS campaign_id,\r\n        campaign_name,\r\n        campaign_status,\r\n        CAST(advertiser_id AS STRING) AS advertiser_id,\r\n        COALESCE(impression_1,0) + COALESCE(impression_2,0) AS impressions,\r\n        COALESCE(clickthrough_1,0) + COALESCE(clickthrough_2,0) AS clicks,\r\n        COALESCE(spend_in_micro_dollar, 0) / 1000000.0 AS spend,\r\n        COALESCE(total_conversions, 0) AS total_conversions,\r\n        COALESCE(total_conversions_quantity, 0) AS total_conversions_quantity,\r\n        COALESCE(total_conversions_value_in_micro_dollar, 0) / 1000000.0 AS total_conversions_value\r\n    FROM fields\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__keyword_history": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__keyword_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__keyword_history.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__keyword_history.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__keyword_history", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__keyword_history"], "alias": "stg_pinterest_ads__keyword_history", "checksum": {"name": "sha256", "checksum": "652590052ac50346ec42e7d907bc0698bdb5d9a3d72cf3c38c98485d157e98f6"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.067559, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__keyword_history`", "raw_code": "WITH base AS (\r\n    SELECT * \r\n    FROM `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.keyword_history`\r\n),\r\n\r\nfields AS (\r\n    SELECT\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        ad_group_id,\r\n        advertiser_id,\r\n        archived,\r\n        bid,\r\n        campaign_id,\r\n        id,\r\n        match_type,\r\n        parent_type,\r\n        value,\r\n        CAST('' AS STRING) AS source_relation\r\n    FROM base\r\n),\r\n\r\nfinal AS (\r\n    SELECT\r\n        source_relation,\r\n        CAST(id AS STRING) AS keyword_id,\r\n        value AS keyword_value,\r\n        _fivetran_id,\r\n        _fivetran_synced,\r\n        CAST(ad_group_id AS STRING) AS ad_group_id,\r\n        CAST(advertiser_id AS STRING) AS advertiser_id,\r\n        archived,\r\n        bid,\r\n        CAST(campaign_id AS STRING) AS campaign_id,\r\n        match_type,\r\n        parent_type,\r\n        ROW_NUMBER() OVER (PARTITION BY source_relation, id ORDER BY _fivetran_synced DESC) = 1 AS is_most_recent_record\r\n    FROM fields\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__keyword_report": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__keyword_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__keyword_report.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__keyword_report.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__keyword_report", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__keyword_report"], "alias": "stg_pinterest_ads__keyword_report", "checksum": {"name": "sha256", "checksum": "fd54d77b34b4d2a9c4b07b29da8c17de861bc83f9819d4751ded729b77df28e3"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0700607, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__keyword_report`", "raw_code": "with base as (\r\n    select * \r\n    from {{ var('bronze_project') }}.{{ var('pinterest_schema') }}.keyword_report\r\n),\r\n\r\nfields as (\r\n    select\r\n        _fivetran_synced as _fivetran_synced,\r\n        ad_group_id as ad_group_id,\r\n        ad_group_name as ad_group_name,\r\n        ad_group_status as ad_group_status,\r\n        advertiser_id as advertiser_id,\r\n        campaign_id as campaign_id,\r\n        clickthrough_2 as clickthrough_2,\r\n        date as date,\r\n        impression_2 as impression_2,\r\n        keyword_id as keyword_id,\r\n        pin_promotion_id as pin_promotion_id,\r\n        total_conversions as total_conversions,\r\n        total_conversions_quantity as total_conversions_quantity,\r\n        total_conversions_value_in_micro_dollar as total_conversions_value_in_micro_dollar,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n    select\r\n        source_relation,\r\n        date_trunc(date, DAY) as date_day,\r\n        cast(keyword_id as STRING) as keyword_id,\r\n        cast(pin_promotion_id as STRING) as pin_promotion_id,\r\n        cast(ad_group_id as STRING) as ad_group_id,\r\n        ad_group_name,\r\n        ad_group_status,\r\n        cast(campaign_id as STRING) as campaign_id,\r\n        cast(advertiser_id as STRING) as advertiser_id,\r\n        coalesce(impression_2, 0) as impressions,\r\n        coalesce(clickthrough_2, 0) as clicks,\r\n        coalesce(total_conversions, 0) as total_conversions,\r\n        coalesce(total_conversions_quantity, 0) as total_conversions_quantity,\r\n        coalesce(total_conversions_value_in_micro_dollar, 0) / 1000000.0 as total_conversions_value\r\n    from fields\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__pin_promotion_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__pin_promotion_history.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__pin_promotion_history.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__pin_promotion_history"], "alias": "stg_pinterest_ads__pin_promotion_history", "checksum": {"name": "sha256", "checksum": "e0efb9c33b3d09abfe1701d366c1e877d9dca184419d2690a9e9b90aaf657fae"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0722454, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__pin_promotion_history`", "raw_code": "with base as (\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.pin_promotion_history`\r\n), \r\n\r\nfields as (\r\n    select\r\n        _fivetran_synced as _fivetran_synced,\r\n        ad_group_id as ad_group_id,\r\n        ad_account_id as ad_account_id,\r\n        cast(null as STRING) as android_deep_link,\r\n        cast(null as STRING) as click_tracking_url,\r\n        created_time as created_time,\r\n        creative_type as creative_type,\r\n        destination_url as destination_url,\r\n        id as id,\r\n        cast(null as STRING) as ios_deep_link,\r\n        cast(null as BOOLEAN) as is_pin_deleted,\r\n        cast(null as BOOLEAN) as is_removable,\r\n        name as name,\r\n        pin_id as pin_id,\r\n        cast(null as STRING) as review_status,\r\n        status as status,\r\n        cast(null as TIMESTAMP) as updated_time,\r\n        cast(null as STRING) as view_tracking_url,\r\n        cast('' as STRING) as source_relation\r\n    from base\r\n), \r\n\r\nfinal as (\r\n    select\r\n        source_relation,\r\n        cast(id as STRING) as pin_promotion_id,\r\n        cast(ad_account_id as STRING) as advertiser_id,\r\n        cast(ad_group_id as STRING) as ad_group_id,\r\n        created_time as created_at,\r\n        destination_url,\r\n\r\n        -- base_url = part before '?'\r\n        SPLIT(destination_url, '?')[SAFE_OFFSET(0)] as base_url,\r\n\r\n        -- Cleaned url host:\r\n        -- remove android-app://, http://, https:// first\r\n        -- then get the part before first '/' or entire string if no '/'\r\n        (\r\n            select\r\n                case \r\n                    when strpos(clean_url, '/') > 0 \r\n                    then substr(clean_url, 0, strpos(clean_url, '/') - 1)\r\n                    else clean_url\r\n                end\r\n            from (\r\n                select\r\n                    replace(\r\n                        replace(\r\n                            replace(destination_url, 'android-app://', ''), \r\n                        'http://', ''), \r\n                    'https://', '') as clean_url\r\n            )\r\n        ) as url_host,\r\n\r\n        -- url_path: everything after the host part until '?' or end of string\r\n        (\r\n            select\r\n                '/' || \r\n                case \r\n                    when strpos(path_and_params, '?') > 0\r\n                    then substr(path_and_params, 0, strpos(path_and_params, '?') - 1)\r\n                    else path_and_params\r\n                end\r\n            from (\r\n                select\r\n                    substr(\r\n                        replace(\r\n                            replace(destination_url, 'http://', ''),\r\n                        'https://', ''),\r\n                        ifnull(nullif(strpos(replace(replace(destination_url, 'http://', ''), 'https://', ''), '/'), 0), length(replace(replace(destination_url, 'http://', ''), 'https://', ''))) + 1\r\n                    ) as path_and_params\r\n            )\r\n        ) as url_path,\r\n\r\n        -- UTM parameters extraction\r\n        nullif(\r\n            SPLIT(SPLIT(destination_url, 'utm_source=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)], ''\r\n        ) as utm_source,\r\n\r\n        nullif(\r\n            SPLIT(SPLIT(destination_url, 'utm_medium=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)], ''\r\n        ) as utm_medium,\r\n\r\n        nullif(\r\n            SPLIT(SPLIT(destination_url, 'utm_campaign=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)], ''\r\n        ) as utm_campaign,\r\n\r\n        nullif(\r\n            SPLIT(SPLIT(destination_url, 'utm_content=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)], ''\r\n        ) as utm_content,\r\n\r\n        nullif(\r\n            SPLIT(SPLIT(destination_url, 'utm_term=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)], ''\r\n        ) as utm_term,\r\n\r\n        name as pin_name,\r\n        cast(pin_id as STRING) as pin_id,\r\n        status as pin_status,\r\n        creative_type,\r\n        _fivetran_synced,\r\n\r\n        row_number() over (partition by source_relation, id order by _fivetran_synced desc) = 1 as is_most_recent_record\r\n\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__pin_promotion_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__pin_promotion_report.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__pin_promotion_report.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__pin_promotion_report"], "alias": "stg_pinterest_ads__pin_promotion_report", "checksum": {"name": "sha256", "checksum": "b3c9cd4f4822355c2fb17274e65c4674db7c93fe5310ca8cfb65535122a97795"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.07458, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__pin_promotion_report`", "raw_code": "with base as (\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.pin_promotion_targeting_report`\r\n),\r\n\r\nfields as (\r\n    select\r\n        _fivetran_synced,\r\n        date,\r\n        targeting_type,\r\n        targeting_value,\r\n        ad_group_id,\r\n        advertiser_id,\r\n        campaign_id,\r\n        pin_promotion_id,\r\n        clickthrough_2,\r\n        impression_2,\r\n        total_checkout_value_in_micro_dollar,  -- as an example of spend proxy\r\n        total_conversions,\r\n        total_conversions_quantity,\r\n        total_conversions_value_in_micro_dollar,\r\n        cast('' as string) as source_relation\r\n    from base\r\n),\r\n\r\nfinal as (\r\n    select\r\n        source_relation,\r\n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\r\n        cast(date as timestamp) as date_day,\r\n        targeting_type,\r\n        targeting_value,\r\n        cast(ad_group_id as string) as ad_group_id,\r\n        cast(advertiser_id as string) as advertiser_id,\r\n        cast(campaign_id as string) as campaign_id,\r\n        cast(pin_promotion_id as string) as pin_promotion_id,\r\n        coalesce(impression_2, 0) as impressions,\r\n        coalesce(clickthrough_2, 0) as clicks,\r\n        coalesce(total_checkout_value_in_micro_dollar, 0) / 1000000.0 as spend,  -- Using checkout value as spend proxy\r\n        coalesce(total_conversions, 0) as total_conversions,\r\n        coalesce(total_conversions_quantity, 0) as total_conversions_quantity,\r\n        coalesce(total_conversions_value_in_micro_dollar, 0) / 1000000.0 as total_conversions_value\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__targeting_geo": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__targeting_geo", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__targeting_geo.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__targeting_geo.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__targeting_geo", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__targeting_geo"], "alias": "stg_pinterest_ads__targeting_geo", "checksum": {"name": "sha256", "checksum": "3eaeb94455b1f961c9a63a9cab4bd9a52ef435abbae4513809092d45f6aca046"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0770159, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__targeting_geo`", "raw_code": "with base as (\r\n\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.targeting_geo`\r\n\r\n), fields as (\r\n\r\n    select\r\n        country_id,\r\n        country_name,\r\n        _fivetran_synced,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n), final as (\r\n    select\r\n        source_relation,\r\n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\r\n        cast(country_id as string) as country_id,\r\n        country_name\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_pinterest_ads__targeting_geo_region": {"database": "ps-silver-gold", "schema": "staging_pinterest_ads_dev", "name": "stg_pinterest_ads__targeting_geo_region", "resource_type": "model", "package_name": "ps_silver_gold", "path": "pinterest\\staging\\stg_pinterest_ads__targeting_geo_region.sql", "original_file_path": "models\\pinterest\\staging\\stg_pinterest_ads__targeting_geo_region.sql", "unique_id": "model.ps_silver_gold.stg_pinterest_ads__targeting_geo_region", "fqn": ["ps_silver_gold", "pinterest", "staging", "stg_pinterest_ads__targeting_geo_region"], "alias": "stg_pinterest_ads__targeting_geo_region", "checksum": {"name": "sha256", "checksum": "cde3d405d15aeab5c5b31d8f110ae9ef24591baef0aa715f832cad9d69cc068a"}, "config": {"enabled": true, "alias": null, "schema": "staging_pinterest_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_pinterest_ads_' + target.name if target.name != 'prod' else 'staging_pinterest_ads' }}", "materialized": "table"}, "created_at": 1755717739.0791857, "relation_name": "`ps-silver-gold`.`staging_pinterest_ads_dev`.`stg_pinterest_ads__targeting_geo_region`", "raw_code": "with base as (\r\n\r\n    select *\r\n    from `{{ var('bronze_project') }}.{{ var('pinterest_schema') }}.targeting_geo_region`\r\n\r\n), fields as (\r\n\r\n    select\r\n        _fivetran_synced,\r\n        country_id,\r\n        region_id,\r\n        region_name,\r\n        cast('' as string) as source_relation\r\n    from base\r\n\r\n), final as (\r\n    select\r\n        source_relation,\r\n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\r\n        cast(country_id as string) as country_id,\r\n        cast(region_id as string) as region_id,\r\n        region_name\r\n    from fields\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.unified_data": {"database": "ps-silver-gold", "schema": "silver_stackadapt_ads_dev", "name": "unified_data", "resource_type": "model", "package_name": "ps_silver_gold", "path": "stackadapt\\intermediate\\unified_data.sql", "original_file_path": "models\\stackadapt\\intermediate\\unified_data.sql", "unique_id": "model.ps_silver_gold.unified_data", "fqn": ["ps_silver_gold", "stackadapt", "intermediate", "unified_data"], "alias": "unified_data", "checksum": {"name": "sha256", "checksum": "5d5b15bf2de6002ae92418c1bf7ac4b1bd0282089f2f5b7ad256835e9ecf5c13"}, "config": {"enabled": true, "alias": null, "schema": "silver_stackadapt_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_stackadapt_ads_' + target.name if target.name != 'prod' else 'silver_stackadapt_ads' }}", "materialized": "table"}, "created_at": 1755717739.0815468, "relation_name": "`ps-silver-gold`.`silver_stackadapt_ads_dev`.`unified_data`", "raw_code": "{% set table_names = var('stackadapt_table_names', default=None) %}\r\n\r\n{{ log(\"Value of stackadapt_table_names: \" ~ table_names, info=True) }}\r\n\r\n{% if table_names is none %}\r\n  {{ exceptions.raise_compiler_error(\"Error: stackadapt_table_names variable is not set!\") }}\r\n{% elif table_names | length == 0 %}\r\n  {{ exceptions.raise_compiler_error(\"Error: stackadapt_table_names variable is empty!\") }}\r\n{% else %}\r\n\r\nWITH base AS (\r\n  {% for table_name in table_names %}\r\n    SELECT\r\n      {{ select_standard_stackadapt_columns('t') }},\r\n      '{{ table_name }}' AS source_table\r\n    FROM {{ var('bronze_project') }}.{{ var('stackadapt_schema') }}.StackAdapt_{{ table_name }}_table_bigquery AS t\r\n    {% if not loop.last %}\r\n      UNION ALL\r\n    {% endif %}\r\n  {% endfor %}\r\n),\r\n\r\nmapping AS (\r\n  SELECT *\r\n  FROM `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n  WHERE ad_platform = 'stackadapt'\r\n)\r\n\r\nSELECT \r\n  base.*,\r\n  mapping.client_name,\r\n  mapping.client_id,\r\n  mapping.ad_platform,\r\n  mapping.sub_client_name\r\nFROM base\r\nLEFT JOIN mapping\r\n  ON CAST(base.advertiser_id AS STRING) = CAST(mapping.account_id AS STRING)\r\n\r\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.ps_silver_gold.select_standard_stackadapt_columns"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads__advertiser_report": {"database": "ps-silver-gold", "schema": "silver_tiktok_ads_dev", "name": "tiktok_ads__advertiser_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\intermediate\\tiktok_ads__advertiser_report.sql", "original_file_path": "models\\tiktok\\intermediate\\tiktok_ads__advertiser_report.sql", "unique_id": "model.ps_silver_gold.tiktok_ads__advertiser_report", "fqn": ["ps_silver_gold", "tiktok", "intermediate", "tiktok_ads__advertiser_report"], "alias": "tiktok_ads__advertiser_report", "checksum": {"name": "sha256", "checksum": "802397a27ea9daf0041261e1c832bf50614ddf46eecdbb37701befe96982cf29"}, "config": {"enabled": true, "alias": null, "schema": "silver_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_tiktok_ads_' + target.name if target.name != 'prod' else 'silver_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.0871513, "relation_name": "`ps-silver-gold`.`silver_tiktok_ads_dev`.`tiktok_ads__advertiser_report`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_report_hourly') }}\r\n), \r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_group_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nadvertiser as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__advertiser') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'tiktok'\r\n), \r\n\r\naggregated as (\r\n    select\r\n        cast(hourly.stat_time_hour as date) as date_day,\r\n        ad_groups.advertiser_id,\r\n        advertiser.advertiser_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        hourly.ad_id,\r\n        ads.ad_name,\r\n        advertiser.currency,\r\n        ad_groups.category,\r\n        ad_groups.action_categories,\r\n        ad_groups.gender,\r\n        ad_groups.audience_type,\r\n        ad_groups.budget,\r\n        ad_groups.age_groups,\r\n        ad_groups.languages,\r\n        ad_groups.interest_category,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(hourly.impressions) as impressions,\r\n        sum(hourly.clicks) as clicks,\r\n        sum(hourly.spend) as spend,\r\n        sum(hourly.reach) as reach,\r\n        sum(hourly.conversion) as conversion,\r\n        sum(hourly.likes) as likes,\r\n        sum(hourly.comments) as comments,\r\n        sum(hourly.shares) as shares,\r\n        sum(hourly.profile_visits) as profile_visits,\r\n        sum(hourly.follows) as follows,\r\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\r\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\r\n        sum(hourly.video_views_p_25) as video_views_p_25,\r\n        sum(hourly.video_views_p_50) as video_views_p_50, \r\n        sum(hourly.video_views_p_75) as video_views_p_75,\r\n        sum(hourly.spend) / nullif(sum(hourly.clicks), 0) as daily_cpc,\r\n        (sum(hourly.spend) / nullif(sum(hourly.impressions), 0)) * 1000 as daily_cpm,\r\n        (sum(hourly.clicks) / nullif(sum(hourly.impressions), 0)) * 100 as daily_ctr\r\n    from hourly\r\n    left join ads\r\n        on hourly.ad_id = ads.ad_id\r\n    left join ad_groups \r\n        on ads.ad_group_id = ad_groups.ad_group_id\r\n    left join advertiser\r\n        on ads.advertiser_id = advertiser.advertiser_id\r\n    left join campaigns\r\n        on ads.campaign_id = campaigns.campaign_id\r\n    left join mapping\r\n        on cast(advertiser.advertiser_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_tiktok_ads__ad_report_hourly", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__advertiser", "package": null, "version": null}, {"name": "stg_tiktok_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads__ad_group_report": {"database": "ps-silver-gold", "schema": "silver_tiktok_ads_dev", "name": "tiktok_ads__ad_group_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\intermediate\\tiktok_ads__ad_group_report.sql", "original_file_path": "models\\tiktok\\intermediate\\tiktok_ads__ad_group_report.sql", "unique_id": "model.ps_silver_gold.tiktok_ads__ad_group_report", "fqn": ["ps_silver_gold", "tiktok", "intermediate", "tiktok_ads__ad_group_report"], "alias": "tiktok_ads__ad_group_report", "checksum": {"name": "sha256", "checksum": "93e392429db32838d201f9028aeea389ba4f50f647785c23d2eb6efae91fb008"}, "config": {"enabled": true, "alias": null, "schema": "silver_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_tiktok_ads_' + target.name if target.name != 'prod' else 'silver_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.090042, "relation_name": "`ps-silver-gold`.`silver_tiktok_ads_dev`.`tiktok_ads__ad_group_report`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_group_report_hourly') }}\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_group_history') }}\r\n    where is_most_recent_record\r\n), \r\n\r\nadvertiser as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__advertiser') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_history') }}\r\n    where is_most_recent_record\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'tiktok'\r\n), \r\n\r\naggregated as (\r\n    select\r\n        cast(hourly.stat_time_hour as date) as date_day,\r\n        ad_groups.advertiser_id,\r\n        advertiser.advertiser_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        hourly.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        advertiser.currency,\r\n        ad_groups.action_categories,\r\n        ad_groups.category,\r\n        ad_groups.gender,\r\n        ad_groups.audience_type,\r\n        ad_groups.budget,\r\n        ad_groups.age_groups,\r\n        ad_groups.languages,\r\n        ad_groups.interest_category,\r\n        sum(hourly.impressions) as impressions,\r\n        sum(hourly.clicks) as clicks,\r\n        sum(hourly.spend) as spend,\r\n        sum(hourly.reach) as reach,\r\n        sum(hourly.conversion) as conversion,\r\n        sum(hourly.likes) as likes,\r\n        sum(hourly.comments) as comments,\r\n        sum(hourly.shares) as shares,\r\n        sum(hourly.profile_visits) as profile_visits,\r\n        sum(hourly.follows) as follows,\r\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\r\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\r\n        sum(hourly.video_views_p_25) as video_views_p_25,\r\n        sum(hourly.video_views_p_50) as video_views_p_50, \r\n        sum(hourly.video_views_p_75) as video_views_p_75,\r\n        sum(hourly.spend)/nullif(sum(hourly.clicks), 0) as daily_cpc,\r\n        (sum(hourly.spend)/nullif(sum(hourly.impressions), 0)) * 1000 as daily_cpm,\r\n        (sum(hourly.clicks)/nullif(sum(hourly.impressions), 0)) * 100 as daily_ctr\r\n    from hourly\r\n    left join ad_groups \r\n        on hourly.ad_group_id = ad_groups.ad_group_id\r\n    left join advertiser\r\n        on ad_groups.advertiser_id = advertiser.advertiser_id\r\n    left join campaigns\r\n        on ad_groups.campaign_id = campaigns.campaign_id\r\n    group by all\r\n),\r\n\r\nfinal as (\r\n    select\r\n        aggregated.*,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name\r\n    from aggregated\r\n    left join mapping\r\n        on cast(aggregated.advertiser_id as string) = cast(mapping.account_id as string)\r\n)\r\n\r\nselect *\r\nfrom final", "language": "sql", "refs": [{"name": "stg_tiktok_ads__ad_group_report_hourly", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__advertiser", "package": null, "version": null}, {"name": "stg_tiktok_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads__ad_report": {"database": "ps-silver-gold", "schema": "silver_tiktok_ads_dev", "name": "tiktok_ads__ad_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\intermediate\\tiktok_ads__ad_report.sql", "original_file_path": "models\\tiktok\\intermediate\\tiktok_ads__ad_report.sql", "unique_id": "model.ps_silver_gold.tiktok_ads__ad_report", "fqn": ["ps_silver_gold", "tiktok", "intermediate", "tiktok_ads__ad_report"], "alias": "tiktok_ads__ad_report", "checksum": {"name": "sha256", "checksum": "535b303cb14e388aa05b22dabbf7f604846144c7d3bab7fed1e56610c5152f80"}, "config": {"enabled": true, "alias": null, "schema": "silver_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_tiktok_ads_' + target.name if target.name != 'prod' else 'silver_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.0939536, "relation_name": "`ps-silver-gold`.`silver_tiktok_ads_dev`.`tiktok_ads__ad_report`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_report_hourly') }}\r\n), \r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_group_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nadvertiser as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__advertiser') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_history') }}\r\n    where is_most_recent_record = true\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'tiktok'\r\n), \r\n\r\naggregated as (\r\n    select\r\n        cast(hourly.stat_time_hour as date) as date_day,\r\n        ad_groups.advertiser_id,\r\n        advertiser.advertiser_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        hourly.ad_id,\r\n        ads.ad_name,\r\n        advertiser.currency,\r\n        ad_groups.category,\r\n        ad_groups.action_categories,\r\n        ad_groups.gender,\r\n        ad_groups.audience_type,\r\n        ad_groups.budget,\r\n        ad_groups.age_groups,\r\n        ad_groups.languages,\r\n        ad_groups.interest_category,\r\n        mapping.client_name,\r\n        mapping.client_id,\r\n        mapping.ad_platform,    \r\n        mapping.sub_client_name,\r\n        sum(hourly.impressions) as impressions,\r\n        sum(hourly.clicks) as clicks,\r\n        sum(hourly.spend) as spend,\r\n        sum(hourly.reach) as reach,\r\n        sum(hourly.conversion) as conversion,\r\n        sum(hourly.likes) as likes,\r\n        sum(hourly.comments) as comments,\r\n        sum(hourly.shares) as shares,\r\n        sum(hourly.profile_visits) as profile_visits,\r\n        sum(hourly.follows) as follows,\r\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\r\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\r\n        sum(hourly.video_views_p_25) as video_views_p_25,\r\n        sum(hourly.video_views_p_50) as video_views_p_50, \r\n        sum(hourly.video_views_p_75) as video_views_p_75,\r\n        sum(hourly.spend) / nullif(sum(hourly.clicks), 0) as daily_cpc,\r\n        (sum(hourly.spend) / nullif(sum(hourly.impressions), 0)) * 1000 as daily_cpm,\r\n        (sum(hourly.clicks) / nullif(sum(hourly.impressions), 0)) * 100 as daily_ctr\r\n    from hourly\r\n    left join ads\r\n        on hourly.ad_id = ads.ad_id\r\n    left join ad_groups \r\n        on ads.ad_group_id = ad_groups.ad_group_id\r\n    left join advertiser\r\n        on ads.advertiser_id = advertiser.advertiser_id\r\n    left join campaigns\r\n        on ads.campaign_id = campaigns.campaign_id\r\n    left join mapping\r\n        on cast(advertiser.advertiser_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_tiktok_ads__ad_report_hourly", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__advertiser", "package": null, "version": null}, {"name": "stg_tiktok_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads__campaign_report": {"database": "ps-silver-gold", "schema": "silver_tiktok_ads_dev", "name": "tiktok_ads__campaign_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\intermediate\\tiktok_ads__campaign_report.sql", "original_file_path": "models\\tiktok\\intermediate\\tiktok_ads__campaign_report.sql", "unique_id": "model.ps_silver_gold.tiktok_ads__campaign_report", "fqn": ["ps_silver_gold", "tiktok", "intermediate", "tiktok_ads__campaign_report"], "alias": "tiktok_ads__campaign_report", "checksum": {"name": "sha256", "checksum": "614dfcbda65daa016de60bd738c4fa0daed057cafd2288807d7a277caa21361b"}, "config": {"enabled": true, "alias": null, "schema": "silver_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_tiktok_ads_' + target.name if target.name != 'prod' else 'silver_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.0965476, "relation_name": "`ps-silver-gold`.`silver_tiktok_ads_dev`.`tiktok_ads__campaign_report`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_report_hourly') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_history') }}\r\n    where is_most_recent_record = true\r\n), \r\n\r\nadvertiser as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__advertiser') }}\r\n),\r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'tiktok'\r\n), \r\n\r\naggregated as (\r\n    select\r\n        cast(hourly.stat_time_hour as date) as date_day,\r\n        advertiser.advertiser_id,\r\n        advertiser.advertiser_name,\r\n        hourly.campaign_id,\r\n        campaigns.campaign_name,\r\n        advertiser.currency,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.ad_platform,\r\n        mapping.sub_client_name,\r\n        sum(hourly.impressions) as impressions,\r\n        sum(hourly.clicks) as clicks,\r\n        sum(hourly.spend) as spend,\r\n        sum(hourly.reach) as reach,\r\n        sum(hourly.conversion) as conversion,\r\n        sum(hourly.likes) as likes,\r\n        sum(hourly.comments) as comments,\r\n        sum(hourly.shares) as shares,\r\n        sum(hourly.profile_visits) as profile_visits,\r\n        sum(hourly.follows) as follows,\r\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\r\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\r\n        sum(hourly.video_views_p_25) as video_views_p_25,\r\n        sum(hourly.video_views_p_50) as video_views_p_50, \r\n        sum(hourly.video_views_p_75) as video_views_p_75,\r\n        sum(hourly.spend) / nullif(sum(hourly.clicks), 0) as daily_cpc,\r\n        (sum(hourly.spend) / nullif(sum(hourly.impressions), 0)) * 1000 as daily_cpm,\r\n        (sum(hourly.clicks) / nullif(sum(hourly.impressions), 0)) * 100 as daily_ctr\r\n    from hourly\r\n    left join campaigns\r\n        on hourly.campaign_id = campaigns.campaign_id\r\n    left join advertiser\r\n        on campaigns.advertiser_id = advertiser.advertiser_id\r\n    left join mapping\r\n        on cast(advertiser.advertiser_id as string) = cast(mapping.account_id as string)\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_tiktok_ads__campaign_report_hourly", "package": null, "version": null}, {"name": "stg_tiktok_ads__campaign_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__advertiser", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__campaign_history", "model.ps_silver_gold.stg_tiktok_ads__advertiser"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.tiktok_ads__url_report": {"database": "ps-silver-gold", "schema": "silver_tiktok_ads_dev", "name": "tiktok_ads__url_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\intermediate\\tiktok_ads__url_report.sql", "original_file_path": "models\\tiktok\\intermediate\\tiktok_ads__url_report.sql", "unique_id": "model.ps_silver_gold.tiktok_ads__url_report", "fqn": ["ps_silver_gold", "tiktok", "intermediate", "tiktok_ads__url_report"], "alias": "tiktok_ads__url_report", "checksum": {"name": "sha256", "checksum": "2c54e66f0e76a11491c72f97c13658f3569b41925e5727df82b967cb1823b709"}, "config": {"enabled": true, "alias": null, "schema": "silver_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'silver_tiktok_ads_' + target.name if target.name != 'prod' else 'silver_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.0991604, "relation_name": "`ps-silver-gold`.`silver_tiktok_ads_dev`.`tiktok_ads__url_report`", "raw_code": "with hourly as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_report_hourly') }}\r\n), \r\n\r\nads as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_history') }}\r\n    where is_most_recent_record\r\n), \r\n\r\nad_groups as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__ad_group_history') }}\r\n    where is_most_recent_record\r\n), \r\n\r\nadvertiser as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__advertiser') }}\r\n), \r\n\r\ncampaigns as (\r\n    select *\r\n    from {{ ref('stg_tiktok_ads__campaign_history') }}\r\n    where is_most_recent_record\r\n), \r\n\r\nmapping as (\r\n    select *\r\n    from `{{ target.project }}.{{ var('mapping') }}.mapping`\r\n    where ad_platform = 'tiktok'\r\n), \r\n\r\naggregated as (\r\n    select\r\n        cast(hourly.stat_time_hour as date) as date_day,\r\n        ad_groups.advertiser_id,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.ad_platform,   \r\n        mapping.sub_client_name,    \r\n        advertiser.advertiser_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        hourly.ad_id,\r\n        ads.ad_name,\r\n        ads.base_url,\r\n        ads.url_host,\r\n        ads.url_path,\r\n        ads.utm_source,\r\n        ads.utm_medium,\r\n        ads.utm_campaign,\r\n        ads.utm_content,\r\n        ads.utm_term,\r\n        advertiser.currency,\r\n        ad_groups.action_categories,\r\n        ad_groups.category,\r\n        ad_groups.gender,\r\n        ad_groups.audience_type,\r\n        ad_groups.budget,\r\n        ad_groups.age_groups,\r\n        ad_groups.languages,\r\n        ad_groups.interest_category,\r\n        sum(hourly.impressions) as impressions,\r\n        sum(hourly.clicks) as clicks,\r\n        sum(hourly.spend) as spend,\r\n        sum(hourly.reach) as reach,\r\n        sum(hourly.conversion) as conversion,\r\n        sum(hourly.likes) as likes,\r\n        sum(hourly.comments) as comments,\r\n        sum(hourly.shares) as shares,\r\n        sum(hourly.profile_visits) as profile_visits,\r\n        sum(hourly.follows) as follows,\r\n        sum(hourly.video_watched_2_s) as video_watched_2_s,\r\n        sum(hourly.video_watched_6_s) as video_watched_6_s,\r\n        sum(hourly.video_views_p_25) as video_views_p_25,\r\n        sum(hourly.video_views_p_50) as video_views_p_50, \r\n        sum(hourly.video_views_p_75) as video_views_p_75,\r\n        sum(hourly.spend) / nullif(sum(hourly.clicks), 0) as daily_cpc,\r\n        (sum(hourly.spend) / nullif(sum(hourly.impressions), 0)) * 1000 as daily_cpm,\r\n        (sum(hourly.clicks) / nullif(sum(hourly.impressions), 0)) * 100 as daily_ctr\r\n    from hourly\r\n    left join ads\r\n        on hourly.ad_id = ads.ad_id\r\n    left join ad_groups \r\n        on ads.ad_group_id = ad_groups.ad_group_id\r\n    left join advertiser\r\n        on ads.advertiser_id = advertiser.advertiser_id\r\n    left join campaigns\r\n        on ads.campaign_id = campaigns.campaign_id\r\n    left join mapping\r\n        on cast(advertiser.advertiser_id as string) = cast(mapping.account_id as string)\r\n    where ads.landing_page_url is not null\r\n    group by all\r\n)\r\n\r\nselect *\r\nfrom aggregated", "language": "sql", "refs": [{"name": "stg_tiktok_ads__ad_report_hourly", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__ad_group_history", "package": null, "version": null}, {"name": "stg_tiktok_ads__advertiser", "package": null, "version": null}, {"name": "stg_tiktok_ads__campaign_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__advertiser": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__advertiser", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__advertiser.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__advertiser.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__advertiser", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__advertiser"], "alias": "stg_tiktok_ads__advertiser", "checksum": {"name": "sha256", "checksum": "06524a10d0065f2d1eb0858c7a575c630629dc68a61be12db00a06f844c9747e"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1019084, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__advertiser`", "raw_code": "-- stg_tiktok_ads__advertiser\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.advertiser`\r\n), \r\n\r\nfinal AS (\r\n  SELECT   \r\n    -- Identifiers\r\n    id                        AS advertiser_id,\r\n    name                      AS advertiser_name,\r\n\r\n    -- Contact Info\r\n    contacter,\r\n    email,\r\n    cellphone_number,\r\n    telephone_number,\r\n    address,\r\n\r\n    -- Company Info\r\n    company,\r\n    description,\r\n    industry,\r\n    country,\r\n    currency,\r\n    language,\r\n    timezone,\r\n    balance\r\n  FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__ad_group_history": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__ad_group_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__ad_group_history.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__ad_group_history.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__ad_group_history"], "alias": "stg_tiktok_ads__ad_group_history", "checksum": {"name": "sha256", "checksum": "19ac441efc600add92724498f508294c7b1cd653ef6caadfd3e65eee1e10d005"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1041672, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__ad_group_history`", "raw_code": "-- stg_tiktok_ads__ad_group_history\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.adgroup_history`\r\n), \r\n\r\nfinal AS (\r\n  SELECT\r\n    -- Identifiers\r\n    adgroup_id                           AS ad_group_id,\r\n    CAST(updated_at AS TIMESTAMP)       AS updated_at,\r\n    advertiser_id,\r\n    campaign_id,\r\n\r\n    -- Targeting & Audience\r\n    age_groups,\r\n    gender,\r\n    languages,\r\n    audience_type,\r\n    action_days,\r\n    action_categories,\r\n    interest_category_v_2               AS interest_category,\r\n\r\n    -- Ad Group Info\r\n    adgroup_name                         AS ad_group_name,\r\n    display_name,\r\n    category,\r\n    landing_page_url,\r\n\r\n    -- Budget & Frequency\r\n    budget,\r\n    frequency,\r\n    frequency_schedule,\r\n\r\n    -- Latest Record Flag\r\n    ROW_NUMBER() OVER (\r\n      PARTITION BY adgroup_id\r\n      ORDER BY updated_at DESC\r\n    ) = 1                               AS is_most_recent_record\r\n\r\n  FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__ad_group_report_hourly", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__ad_group_report_hourly.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__ad_group_report_hourly.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__ad_group_report_hourly"], "alias": "stg_tiktok_ads__ad_group_report_hourly", "checksum": {"name": "sha256", "checksum": "b5470a9ccb159edd2a6d982451e8339efde095208bdb3c41a5032c74ba8ab8b2"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1069086, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__ad_group_report_hourly`", "raw_code": "-- stg_tiktok_ads__ad_group_report_hourly\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.adgroup_report_hourly`\r\n), \r\n\r\nfinal AS (\r\n  SELECT  \r\n    -- Identifiers & Timestamps\r\n    adgroup_id                             AS ad_group_id,\r\n    CAST(stat_time_hour AS TIMESTAMP)     AS stat_time_hour,\r\n\r\n    -- Performance Metrics\r\n    impressions,\r\n    clicks,\r\n    ctr,\r\n    cpc,\r\n    cpm,\r\n    spend,\r\n    reach,\r\n\r\n    -- Conversion Metrics\r\n    conversion,\r\n    cost_per_conversion,\r\n    conversion_rate,\r\n\r\n    -- Engagement Metrics\r\n    likes,\r\n    comments,\r\n    shares,\r\n    profile_visits,\r\n    follows,\r\n\r\n    -- Video Metrics\r\n    video_play_actions,\r\n    video_watched_2_s,\r\n    video_watched_6_s,\r\n    video_views_p_25,\r\n    video_views_p_50,\r\n    video_views_p_75,\r\n    average_video_play,\r\n    average_video_play_per_user\r\n  FROM base\r\n) \r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__ad_history": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__ad_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__ad_history.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__ad_history.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__ad_history", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__ad_history"], "alias": "stg_tiktok_ads__ad_history", "checksum": {"name": "sha256", "checksum": "7f4c0b75e8b25aefe8d6e364fea961200a1f09caf2066f61be09cdde69bf5bd1"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1092005, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__ad_history`", "raw_code": "WITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.ad_history`\r\n),\r\n\r\nfields AS (\r\n  SELECT\r\n    ad_id,\r\n    ad_name,\r\n    adgroup_id,\r\n    advertiser_id,\r\n    call_to_action,\r\n    campaign_id,\r\n    click_tracking_url,\r\n    impression_tracking_url,\r\n    landing_page_url,\r\n    updated_at\r\n  FROM base\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    ad_id,\r\n    CAST(updated_at AS TIMESTAMP)              AS updated_at,\r\n    adgroup_id                                 AS ad_group_id,\r\n    advertiser_id,\r\n    campaign_id,\r\n    ad_name,\r\n    call_to_action,\r\n    click_tracking_url,\r\n    impression_tracking_url,\r\n\r\n    -- strip off everything from '?' onward\r\n    SPLIT(landing_page_url, '?')[OFFSET(0)]    AS base_url,\r\n\r\n    -- host = the part after protocol up to first slash\r\n    REGEXP_EXTRACT(\r\n      landing_page_url,\r\n      r'^(?:https?://|android-app://)?([^/]+)'\r\n    )                                           AS url_host,\r\n\r\n    -- path = slash + everything after host, up to '?'\r\n    COALESCE(\r\n      REGEXP_EXTRACT(\r\n        landing_page_url,\r\n        r'^(?:https?://|android-app://)?[^/]+(/[^?]*)'\r\n      ),\r\n      '/'  -- if there was no slash/path, return just '/'\r\n    )                                           AS url_path,\r\n\r\n    -- UTM parameters via regex\r\n    NULLIF(REGEXP_EXTRACT(landing_page_url, r'[?&]utm_source=([^&]+)'), '')   AS utm_source,\r\n    NULLIF(REGEXP_EXTRACT(landing_page_url, r'[?&]utm_medium=([^&]+)'), '')   AS utm_medium,\r\n    NULLIF(REGEXP_EXTRACT(landing_page_url, r'[?&]utm_campaign=([^&]+)'), '') AS utm_campaign,\r\n    NULLIF(REGEXP_EXTRACT(landing_page_url, r'[?&]utm_content=([^&]+)'), '')  AS utm_content,\r\n    NULLIF(REGEXP_EXTRACT(landing_page_url, r'[?&]utm_term=([^&]+)'), '')     AS utm_term,\r\n\r\n    landing_page_url,\r\n\r\n    -- flag the most recent per ad_id\r\n    ROW_NUMBER() OVER (\r\n      PARTITION BY ad_id\r\n      ORDER BY CAST(updated_at AS TIMESTAMP) DESC\r\n    ) = 1                                       AS is_most_recent_record\r\n\r\n  FROM fields\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__ad_report_hourly", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__ad_report_hourly.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__ad_report_hourly.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__ad_report_hourly"], "alias": "stg_tiktok_ads__ad_report_hourly", "checksum": {"name": "sha256", "checksum": "36bea6359047bbbdb0d3c64cab17e7666b9692863c176da246f92a59bfab3a45"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1116288, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__ad_report_hourly`", "raw_code": "-- stg_tiktok_ads__ad_report_hourly\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.ad_report_hourly`\r\n), \r\n\r\nfinal AS (\r\n  SELECT  \r\n    -- Identifiers & Timestamp\r\n    ad_id,\r\n    CAST(stat_time_hour AS TIMESTAMP) AS stat_time_hour,\r\n\r\n    -- Performance Metrics\r\n    impressions,\r\n    clicks,\r\n    ctr,\r\n    cpc,\r\n    cpm,\r\n    spend,\r\n    reach,\r\n\r\n    -- Conversion Metrics\r\n    conversion,\r\n    cost_per_conversion,\r\n    conversion_rate,\r\n\r\n    -- Engagement Metrics\r\n    likes,\r\n    comments,\r\n    shares,\r\n    profile_visits,\r\n    follows,\r\n\r\n    -- Video Metrics\r\n    video_play_actions,\r\n    video_watched_2_s,\r\n    video_watched_6_s,\r\n    video_views_p_25,\r\n    video_views_p_50,\r\n    video_views_p_75,\r\n    average_video_play,\r\n    average_video_play_per_user\r\n  FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__campaign_history": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__campaign_history", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__campaign_history.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__campaign_history.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__campaign_history", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__campaign_history"], "alias": "stg_tiktok_ads__campaign_history", "checksum": {"name": "sha256", "checksum": "ce224173880abf65452177b8e15845c6a7f9a7146e921400c15b8e8e7162888c"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1137693, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__campaign_history`", "raw_code": "-- stg_tiktok_ads__campaign_history\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.campaign_history`\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    campaign_id,\r\n    CAST(updated_at AS TIMESTAMP) AS updated_at,\r\n    advertiser_id,\r\n    campaign_name,\r\n    campaign_type,\r\n    split_test_variable,\r\n    ROW_NUMBER() OVER (PARTITION BY campaign_id ORDER BY updated_at DESC) = 1 AS is_most_recent_record\r\n  FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly": {"database": "ps-silver-gold", "schema": "staging_tiktok_ads_dev", "name": "stg_tiktok_ads__campaign_report_hourly", "resource_type": "model", "package_name": "ps_silver_gold", "path": "tiktok\\staging\\stg_tiktok_ads__campaign_report_hourly.sql", "original_file_path": "models\\tiktok\\staging\\stg_tiktok_ads__campaign_report_hourly.sql", "unique_id": "model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly", "fqn": ["ps_silver_gold", "tiktok", "staging", "stg_tiktok_ads__campaign_report_hourly"], "alias": "stg_tiktok_ads__campaign_report_hourly", "checksum": {"name": "sha256", "checksum": "af1cc8469d1d28f2ebf385c396dcf77c8202f7870d8524949e8ed757f48a9270"}, "config": {"enabled": true, "alias": null, "schema": "staging_tiktok_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "{{ 'staging_tiktok_ads_' + target.name if target.name != 'prod' else 'staging_tiktok_ads' }}", "materialized": "table"}, "created_at": 1755717739.1159735, "relation_name": "`ps-silver-gold`.`staging_tiktok_ads_dev`.`stg_tiktok_ads__campaign_report_hourly`", "raw_code": "-- stg_tiktok_ads__campaign_report_hourly\r\n\r\nWITH base AS (\r\n  SELECT *\r\n  FROM `{{ var('bronze_project') }}.{{ var('tiktok_schema') }}.campaign_report_hourly`\r\n),\r\n\r\nfinal AS (\r\n  SELECT  \r\n    campaign_id,\r\n    CAST(stat_time_hour AS TIMESTAMP) AS stat_time_hour,\r\n\r\n    -- Performance Metrics\r\n    cpc,\r\n    cpm,\r\n    ctr,\r\n    impressions,\r\n    clicks,\r\n    spend,\r\n    reach,\r\n    conversion,\r\n    cost_per_conversion,\r\n    conversion_rate,\r\n\r\n    -- Engagement Metrics\r\n    likes,\r\n    comments,\r\n    shares,\r\n    profile_visits,\r\n    follows,\r\n    video_play_actions,\r\n    video_watched_2_s,\r\n    video_watched_6_s,\r\n    video_views_p_25,\r\n    video_views_p_50,\r\n    video_views_p_75,\r\n    average_video_play,\r\n    average_video_play_per_user\r\n  FROM base\r\n)\r\n\r\nSELECT *\r\nFROM final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ps_silver_gold.google_ads__ad_conversions_report": {"database": "ps-silver-gold", "schema": "silver_google_ads_dev", "name": "google_ads__ad_conversions_report", "resource_type": "model", "package_name": "ps_silver_gold", "path": "google\\intermediate\\google_ads__ad_conversions_report.sql", "original_file_path": "models\\google\\intermediate\\google_ads__ad_conversions_report.sql", "unique_id": "model.ps_silver_gold.google_ads__ad_conversions_report", "fqn": ["ps_silver_gold", "google", "intermediate", "google_ads__ad_conversions_report"], "alias": "google_ads__ad_conversions_report", "checksum": {"name": "sha256", "checksum": "5ef1609d19c9f4a13da9382d42822249720162655ef99fc71490bd12ce1a03ca"}, "config": {"enabled": true, "alias": null, "schema": "silver_google_ads_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "This table contains daily ad conversion metrics, including conversions types (action_name) and their values.\n\n**Modeling Tip:** The `ad_id` is not a unique key in the source due to multiple campaigns using the same ad creative. To avoid fanout, a `GROUP BY` was used in the `ads` CTE to ensure a unique key before joining.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ps_silver_gold://models\\google\\intermediate\\google_ads_doc.yml", "build_path": null, "unrendered_config": {"schema": "{{ 'silver_google_ads_' + target.name if target.name != 'prod' else 'silver_google_ads' }}", "materialized": "table"}, "created_at": 1755719698.198753, "relation_name": "`ps-silver-gold`.`silver_google_ads_dev`.`google_ads__ad_conversions_report`", "raw_code": "WITH stats AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_conversion_stats') }}\r\n),\r\naccounts AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_account') }}\r\n),\r\ncampaigns AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_campaign') }}\r\n),\r\nad_groups AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        {{ ref('stg_google_ads_ad_group') }}\r\n),\r\nads AS (\r\n    SELECT\r\n        DISTINCT ad_group_ad_ad_id,\r\n        ad_group_ad_ad_type,\r\n        ad_group_ad_ad_final_urls,\r\n        ad_group_ad_ad_name,\r\n        ad_group_ad_ad_expanded_text_ad_description,\r\n        ad_group_ad_status\r\n    FROM\r\n        (\r\n            SELECT\r\n                *\r\n            FROM\r\n                `secure-electron-279822.google_ads_2025.ads_Ad_8196795413`\r\n            UNION ALL\r\n            SELECT\r\n                *\r\n            FROM\r\n                `{{ var('bronze_project') }}.{{ var('google_bluevine_schema') }}.ads_Ad_2828502255`\r\n        )\r\n    WHERE\r\n        AND _LATEST_DATE = _DATA_DATE\r\n    GROUP BY\r\n        ad_group_ad_ad_id,\r\n        ad_group_ad_ad_type,\r\n        ad_group_ad_ad_final_urls,\r\n        ad_group_ad_ad_name,\r\n        ad_group_ad_ad_expanded_text_ad_description,\r\n        ad_group_ad_status\r\n),\r\nmapping AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        `ps-silver-gold.mapping.mapping`\r\n),\r\nfields AS (\r\n    SELECT\r\n        stats.segments_date AS date_day,\r\n        ads.ad_group_ad_ad_id AS ad_id,\r\n        ads.ad_group_ad_ad_name AS ad_name,\r\n        ads.ad_group_ad_ad_expanded_text_ad_description AS ad_description,\r\n        campaigns.customer_id AS account_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ads.ad_group_ad_ad_type AS ad_type,\r\n        ads.ad_group_ad_status AS ad_status,\r\n        stats.segments_conversion_action_category AS action_category,\r\n        stats.segments_conversion_action_name AS action_name,\r\n        SUM(\r\n            stats.metrics_conversions\r\n        ) AS conversions,\r\n        SUM(\r\n            stats.metrics_conversions_value\r\n        ) AS conversions_value,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        mapping.ad_platform\r\n    FROM\r\n        stats\r\n        LEFT JOIN ads\r\n        ON stats.ad_group_ad_ad_id = ads.ad_group_ad_ad_id\r\n        LEFT JOIN ad_groups\r\n        ON stats.ad_group_id = ad_groups.ad_group_id\r\n        LEFT JOIN campaigns\r\n        ON ad_groups.campaign_id = campaigns.campaign_id\r\n        LEFT JOIN accounts\r\n        ON campaigns.customer_id = accounts.customer_id\r\n        LEFT JOIN mapping\r\n        ON CAST(\r\n            mapping.account_id AS STRING\r\n        ) = CAST(\r\n            campaigns.customer_id AS STRING\r\n        )\r\n    GROUP BY\r\n        stats.segments_date,\r\n        ads.ad_group_ad_ad_id,\r\n        ads.ad_group_ad_ad_expanded_text_ad_description,\r\n        campaigns.customer_id,\r\n        accounts.account_name,\r\n        campaigns.campaign_id,\r\n        campaigns.campaign_name,\r\n        ad_groups.ad_group_id,\r\n        ad_groups.ad_group_name,\r\n        ads.ad_group_ad_ad_type,\r\n        ads.ad_group_ad_ad_name,\r\n        stats.segments_conversion_action_category,\r\n        stats.segments_conversion_action_name,\r\n        mapping.client_id,\r\n        mapping.client_name,\r\n        mapping.sub_client_name,\r\n        ads.ad_group_ad_status,\r\n        mapping.ad_platform\r\n)\r\nSELECT\r\n    *\r\nFROM\r\n    fields", "language": "sql", "refs": [{"name": "stg_google_ads_ad_conversion_stats", "package": null, "version": null}, {"name": "stg_google_ads_account", "package": null, "version": null}, {"name": "stg_google_ads_campaign", "package": null, "version": null}, {"name": "stg_google_ads_ad_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.ps_silver_gold.stg_google_ads_ad_conversion_stats", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_ad_group"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}}, "sources": {}, "macros": {"macro.ps_silver_gold.clean_url": {"name": "clean_url", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\clean_url.sql", "original_file_path": "macros\\clean_url.sql", "unique_id": "macro.ps_silver_gold.clean_url", "macro_sql": "{% macro clean_url(url_field) %}\r\n    replace(\r\n        replace(\r\n            replace({{ url_field }}, 'android-app://', ''),\r\n            'http://', ''),\r\n        'https://', '')\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.381835, "supported_languages": null}, "macro.ps_silver_gold.create_external_brand_table": {"name": "create_external_brand_table", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\create_external_brand_table.sql", "original_file_path": "macros\\create_external_brand_table.sql", "unique_id": "macro.ps_silver_gold.create_external_brand_table", "macro_sql": "{% macro create_external_brand_table(schema) %}\r\n    {% set project_id = target.project %}\r\n    {% set table_name = 'brand' %}\r\n    {% set sheet_range = 'brand!A:O' %}\r\n\r\n    {# Check if table exists #}\r\n    {% set check_table_exists_query %}\r\n        SELECT COUNT(1) as table_exists\r\n        FROM `{{ project_id }}.{{ schema }}.__TABLES__`\r\n        WHERE table_id = '{{ table_name }}'\r\n    {% endset %}\r\n\r\n    {% set result = run_query(check_table_exists_query) %}\r\n    {% set table_exists = result[0][0] if execute else 0 %}\r\n\r\n    {% if execute and table_exists == 0 %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" does not exist. Creating it now.\", info=True) }}\r\n\r\n        {% set create_query %}\r\n        CREATE OR REPLACE EXTERNAL TABLE `{{ project_id }}.{{ schema }}.{{ table_name }}`\r\n        (\r\n            brand_id STRING,\r\n            Name STRING,\r\n            `company_code` STRING,\r\n            gags STRING,\r\n            Active INT64,\r\n            paid_media INT64,\r\n            data_analytics INT64,\r\n            meta_business_id STRING,\r\n            bing_ads_id STRING,\r\n            gads_id STRING,\r\n            ttads_id STRING,\r\n            pin_ads_id STRING,\r\n            snap_ad_id STRING,\r\n            stackadapt STRING,\r\n            zemanata STRING\r\n        )\r\n        OPTIONS (\r\n            format = 'GOOGLE_SHEETS',\r\n            uris = ['https://docs.google.com/spreadsheets/d/1Jryo7rB7K3BFF0Nc5TWEldjDfMQILziwtOiSfkhwb0Y/edit?gid=1440634672'],\r\n            sheet_range = '{{ sheet_range }}',\r\n            skip_leading_rows = 1\r\n        );\r\n        {% endset %}\r\n\r\n        {% do run_query(create_query) %}\r\n        {{ log(\"Successfully created external table: \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name, info=True) }}\r\n\r\n    {% else %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" already exists. Skipping creation.\", info=True) }}\r\n    {% endif %}\r\n\r\n    {{ return(table_name) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3830266, "supported_languages": null}, "macro.ps_silver_gold.create_external_client_table": {"name": "create_external_client_table", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\create_external_client_table.sql", "original_file_path": "macros\\create_external_client_table.sql", "unique_id": "macro.ps_silver_gold.create_external_client_table", "macro_sql": "{% macro create_external_client_table(schema) %}\r\n    {% set project_id = target.project %}\r\n    {% set table_name = 'client' %}\r\n    {% set sheet_range = 'client!A:P' %}\r\n\r\n    {# Check if table exists #}\r\n    {% set check_table_exists_query %}\r\n        SELECT COUNT(1) as table_exists\r\n        FROM `{{ project_id }}.{{ schema }}.__TABLES__`\r\n        WHERE table_id = '{{ table_name }}'\r\n    {% endset %}\r\n\r\n    {% set result = run_query(check_table_exists_query) %}\r\n    {% set exists = result[0][0] if execute else 0 %}\r\n\r\n    {% if execute and exists == 0 %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" does not exist. Creating it now.\", info=True) }}\r\n\r\n        {% set create_query %}\r\n        CREATE OR REPLACE EXTERNAL TABLE `{{ project_id }}.{{ schema }}.{{ table_name }}`\r\n        (\r\n            client_id STRING,\r\n            Name STRING,\r\n            `company_code` STRING,\r\n            Tags STRING,\r\n            `date_created` DATE,\r\n            active INT64,\r\n            paid_media INT64,\r\n            data_analytics INT64,\r\n            meta_business_id STRING,\r\n            bing_ads_id STRING,\r\n            gads_id STRING,\r\n            ttads_id STRING,\r\n            pin_ads_id STRING,\r\n            snap_ad_id STRING,\r\n            stackadapt STRING,\r\n            zemanata STRING\r\n        )\r\n        OPTIONS (\r\n            format = 'GOOGLE_SHEETS',\r\n            uris = ['https://docs.google.com/spreadsheets/d/1Jryo7rB7K3BFF0Nc5TWEldjDfMQILziwtOiSfkhwb0Y/edit?gid=212965495'],\r\n            sheet_range = '{{ sheet_range }}',\r\n            skip_leading_rows = 1\r\n        );\r\n        {% endset %}\r\n\r\n        {% do run_query(create_query) %}\r\n        {{ log(\"Successfully created external table: \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name, info=True) }}\r\n\r\n    {% else %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" already exists. Skipping creation.\", info=True) }}\r\n    {% endif %}\r\n\r\n    {{ return(table_name) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.384346, "supported_languages": null}, "macro.ps_silver_gold.create_external_mapping_table": {"name": "create_external_mapping_table", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\create_external_mapping_table.sql", "original_file_path": "macros\\create_external_mapping_table.sql", "unique_id": "macro.ps_silver_gold.create_external_mapping_table", "macro_sql": "{% macro create_external_mapping_table(schema) %}\r\n    {% set project_id = target.project %}\r\n    {% set table_name = 'mapping' %}\r\n    {% set sheet_range = 'mapping!A:H' %}\r\n\r\n    {# Check if table exists #}\r\n    {% set check_table_exists_query %}\r\n        SELECT COUNT(1) as table_exists\r\n        FROM `{{ project_id }}.{{ schema }}.__TABLES__`\r\n        WHERE table_id = '{{ table_name }}'\r\n    {% endset %}\r\n\r\n    {% set result = run_query(check_table_exists_query) %}\r\n    {% set exists = result[0][0] if execute else 0 %}\r\n\r\n    {% if execute and exists == 0 %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" does not exist. Creating it now.\", info=True) }}\r\n\r\n        {% set create_query %}\r\n        CREATE OR REPLACE EXTERNAL TABLE `{{ project_id }}.{{ schema }}.{{ table_name }}`\r\n        (\r\n            client_id STRING,\r\n            client_name STRING,\r\n            sub_client_name STRING,\r\n            ad_platform STRING,\r\n            account_id STRING,\r\n            account_name STRING,\r\n            `is_active` INT64,\r\n            paid_media INT64,\r\n            data_analytics INT64,\r\n        )\r\n        OPTIONS (\r\n            format = 'GOOGLE_SHEETS',\r\n            uris = ['https://docs.google.com/spreadsheets/d/1Jryo7rB7K3BFF0Nc5TWEldjDfMQILziwtOiSfkhwb0Y/edit?gid=212965495'],\r\n            sheet_range = '{{ sheet_range }}',\r\n            skip_leading_rows = 1\r\n        );\r\n        {% endset %}\r\n\r\n        {% do run_query(create_query) %}\r\n        {{ log(\"Successfully created external table: \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name, info=True) }}\r\n\r\n    {% else %}\r\n        {{ log(\"External table \" ~ project_id ~ \".\" ~ schema ~ \".\" ~ table_name ~ \" already exists. Skipping creation.\", info=True) }}\r\n    {% endif %}\r\n\r\n    {{ return(table_name) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3859863, "supported_languages": null}, "macro.ps_silver_gold.extract_utm_param": {"name": "extract_utm_param", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\extract_utm_param.sql", "original_file_path": "macros\\extract_utm_param.sql", "unique_id": "macro.ps_silver_gold.extract_utm_param", "macro_sql": "{% macro extract_utm_param(url_field, param_name) %}\r\n    nullif(\r\n        split(split({{ url_field }}, '{{ param_name }}=')[safe_offset(1)], '&')[safe_offset(0)],\r\n        ''\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3862195, "supported_languages": null}, "macro.ps_silver_gold.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "unique_id": "macro.ps_silver_gold.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3865075, "supported_languages": null}, "macro.ps_silver_gold.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\get_url_host.sql", "original_file_path": "macros\\get_url_host.sql", "unique_id": "macro.ps_silver_gold.get_url_host", "macro_sql": "{% macro get_url_host(url_field) %}\r\n    safe_cast(\r\n        split({{ clean_url(url_field) }}, '/')[safe_offset(0)] as string\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": ["macro.ps_silver_gold.clean_url"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3866594, "supported_languages": null}, "macro.ps_silver_gold.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\get_url_path.sql", "original_file_path": "macros\\get_url_path.sql", "unique_id": "macro.ps_silver_gold.get_url_path", "macro_sql": "{% macro get_url_path(url_field) %}\r\n    '/' || safe_cast(\r\n        split(\r\n            case \r\n                when length({{ clean_url(url_field) }}) - coalesce(\r\n                    nullif(strpos({{ clean_url(url_field) }}, '/'), 0),\r\n                    strpos({{ clean_url(url_field) }}, '?') - 1\r\n                ) = 0 then ''\r\n                else substr(\r\n                    {{ clean_url(url_field) }},\r\n                    -1 * (\r\n                        length({{ clean_url(url_field) }}) - coalesce(\r\n                            nullif(strpos({{ clean_url(url_field) }}, '/'), 0),\r\n                            strpos({{ clean_url(url_field) }}, '?') - 1\r\n                        )\r\n                    )\r\n                )\r\n            end,\r\n            '?'\r\n        )[safe_offset(0)] as string\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": ["macro.ps_silver_gold.clean_url"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3870523, "supported_languages": null}, "macro.ps_silver_gold.parse_final_url": {"name": "parse_final_url", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\parse_final_url.sql", "original_file_path": "macros\\parse_final_url.sql", "unique_id": "macro.ps_silver_gold.parse_final_url", "macro_sql": "{% macro parse_final_url(final_url_column) %}\r\n  SPLIT({{ final_url_column }}, '?')[SAFE_OFFSET(0)] AS base_url,\r\n\r\n  CAST(\r\n    SPLIT(\r\n      REGEXP_REPLACE(\r\n        REGEXP_REPLACE(\r\n          REGEXP_REPLACE({{ final_url_column }}, r'^(android-app://)', ''),\r\n          r'^(https?://)', ''\r\n        ), r'/.*$', ''\r\n      ),\r\n    '?')[SAFE_OFFSET(0)] AS STRING\r\n  ) AS url_host,\r\n\r\n  CONCAT(\r\n    '/',\r\n    CAST(\r\n      REGEXP_EXTRACT(\r\n        REGEXP_REPLACE({{ final_url_column }}, r'^(https?://)', ''),\r\n        r'[^/]+(/[^?]*)'\r\n      ) AS STRING\r\n    )\r\n  ) AS url_path,\r\n\r\n  NULLIF(\r\n    SPLIT(SPLIT({{ final_url_column }}, 'utm_source=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)],\r\n    ''\r\n  ) AS utm_source,\r\n\r\n  NULLIF(\r\n    SPLIT(SPLIT({{ final_url_column }}, 'utm_medium=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)],\r\n    ''\r\n  ) AS utm_medium,\r\n\r\n  NULLIF(\r\n    SPLIT(SPLIT({{ final_url_column }}, 'utm_campaign=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)],\r\n    ''\r\n  ) AS utm_campaign,\r\n\r\n  NULLIF(\r\n    SPLIT(SPLIT({{ final_url_column }}, 'utm_content=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)],\r\n    ''\r\n  ) AS utm_content,\r\n\r\n  NULLIF(\r\n    SPLIT(SPLIT({{ final_url_column }}, 'utm_term=')[SAFE_OFFSET(1)], '&')[SAFE_OFFSET(0)],\r\n    ''\r\n  ) AS utm_term\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3875756, "supported_languages": null}, "macro.ps_silver_gold.select_standard_stackadapt_columns": {"name": "select_standard_stackadapt_columns", "resource_type": "macro", "package_name": "ps_silver_gold", "path": "macros\\standardize_columns.sql", "original_file_path": "macros\\standardize_columns.sql", "unique_id": "macro.ps_silver_gold.select_standard_stackadapt_columns", "macro_sql": "{% macro select_standard_stackadapt_columns(source_table) %}\r\n  {% set columns = var('stackadapt_standard_columns') %}\r\n  {% set sql_parts = [] %}\r\n\r\n  {% for alias, original in columns.items() %}\r\n    {% do sql_parts.append('`' ~ source_table ~ '`.`' ~ original ~ '` AS ' ~ alias) %}\r\n  {% endfor %}\r\n\r\n  {{ sql_parts | join(',\\n  ') }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.388284, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3904123, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3908014, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3909218, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3910453, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.391168, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.391287, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.391426, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3916342, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3917606, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.392077, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3923728, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3928819, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.393027, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.393234, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3934433, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3935924, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3937907, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3941765, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3943713, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.39456, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.394774, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_relation.sql", "original_file_path": "macros\\catalog\\by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3954732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\by_schema.sql", "original_file_path": "macros\\catalog\\by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3962438, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3967822, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3968625, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3969529, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3972073, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.397316, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\catalog\\catalog.sql", "original_file_path": "macros\\catalog\\catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.3974998, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.397654, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.397768, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.398728, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite', 'microbatch'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite', 'microbatch'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% if strategy == 'microbatch' %}\n    {% do bq_validate_microbatch_config(config) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_validate_microbatch_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4000897, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.40044, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4019706, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% elif strategy == 'microbatch' %}\n\n    {% set build_sql = bq_generate_microbatch_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.402673, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy not in ['insert_overwrite', 'microbatch'] %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite' or 'microbatch'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {%- if tmp_relation_exists -%}\n    {{ adapter.drop_relation(tmp_relation) }}\n  {%- endif -%}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4058392, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.406105, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4062538, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override, model['config']['delimiter']) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4068344, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4071133, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.407257, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.407375, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4089956, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set enable_list_inference = config.get('enable_list_inference', true) -%}\n{%- set intermediate_format = config.get('intermediate_format', none) -%}\n\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\nspark.conf.set(\"enableListInference\", \"{{ enable_list_inference }}\")\n{% if intermediate_format %}\nspark.conf.set(\"intermediateFormat\", \"{{ intermediate_format }}\")\n{% endif %}\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\n# For writeMethod we need to use \"indirect\" if materializing a partitioned table\n# otherwise we can use \"direct\". Note that indirect will fail if the GCS bucket has a retention policy set on it.\n{%- if partition_config %}\n      {%- set write_method = 'indirect' -%}\n{%- else %}\n      {% set write_method = 'direct' -%}\n{%- endif %}\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"{{ write_method }}\") \\\n  .option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4100962, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4105299, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4114711, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.411954, "supported_languages": null}, "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter": {"name": "predicate_for_avoid_require_partition_filter", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\common.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\common.sql", "unique_id": "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro_sql": "{% macro predicate_for_avoid_require_partition_filter(target='DBT_INTERNAL_DEST') %}\n\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set predicate = none -%}\n\n    {% if partition_config and config.get('require_partition_filter') -%}\n        {%- set partition_field = partition_config.time_partitioning_field() if partition_config.time_ingestion_partitioning else partition_config.field -%}\n        {% set predicate %}\n            (\n                `{{ target }}`.`{{ partition_field }}` is null\n                or `{{ target }}`.`{{ partition_field }}` is not null\n            )\n        {% endset %}\n    {%- endif -%}\n\n    {{ return(predicate) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.412437, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4134152, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4142933, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4146786, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif %}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4153912, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4158928, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4169943, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\merge.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set avoid_require_partition_filter = predicate_for_avoid_require_partition_filter() -%}\n    {%- if avoid_require_partition_filter is not none -%}\n        {% do predicates.append(avoid_require_partition_filter) %}\n    {%- endif -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.predicate_for_avoid_require_partition_filter", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4180975, "supported_languages": null}, "macro.dbt_bigquery.bq_validate_microbatch_config": {"name": "bq_validate_microbatch_config", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_validate_microbatch_config", "macro_sql": "{% macro bq_validate_microbatch_config(config) %}\n  {% if config.get(\"partition_by\") is none %}\n    {% set missing_partition_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config.\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n  {% endif %}\n\n  {% if config.get(\"partition_by\").granularity != config.get('batch_size') %}\n    {% set invalid_partition_by_granularity_msg -%}\n    The 'microbatch' strategy requires a `partition_by` config with the same granularity as its configured `batch_size`.\n    Got:\n      `batch_size`: {{ config.get('batch_size') }}\n      `partition_by.granularity`: {{ config.get(\"partition_by\").granularity }}\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_partition_by_granularity_msg) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4190922, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_microbatch_build_sql": {"name": "bq_generate_microbatch_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\microbatch.sql", "unique_id": "macro.dbt_bigquery.bq_generate_microbatch_build_sql", "macro_sql": "{% macro bq_generate_microbatch_build_sql(\n      tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4194043, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4198534, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4203672, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4206545, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4211488, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "original_file_path": "macros\\materializations\\incremental_strategy\\time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4214168, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.421629, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\cluster.sql", "original_file_path": "macros\\relations\\cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.421978, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4221363, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\options.sql", "original_file_path": "macros\\relations\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.422457, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\partition.sql", "original_file_path": "macros\\relations\\partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4230053, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4231648, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4235175, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.423744, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4241626, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.424282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4244502, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_relation_config(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4248548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4249701, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\options.sql", "original_file_path": "macros\\relations\\table\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.425187, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4253268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.425442, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\options.sql", "original_file_path": "macros\\relations\\view\\options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4256456, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4257848, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4267528, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4269042, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.427073, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4272332, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4273732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4276035, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4277186, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date": {"name": "bigquery__date", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt_bigquery.bigquery__date", "macro_sql": "{% macro bigquery__date(year, month, day) -%}\n    date({{ year }}, {{ month }}, {{ day }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.427878, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4280539, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4283917, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4285312, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.42868, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4287682, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4292057, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4296443, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4297786, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\get_columns_spec_ddl.sql", "original_file_path": "macros\\utils\\get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4301286, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.430268, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4303603, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4306421, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4307876, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4309564, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n{%- if type.lower().startswith('array') and field is iterable and (field is not string and field is not mapping) and field | length > 0 -%}\n    {#-- Extract nested type from 'array<nested_type>' --#}\n    {% set nested_type = type.lower()[6:-1] %}\n    {#-- BigQuery does not support direct casts to arrays. instead, each element must be cast individually + reaggregated into an array --#}\n    {%- if cast_from_string_unsupported_for(nested_type)  %}\n        (select array_agg(safe_cast(i as {{ nested_type }})) from unnest([\n            {%- for nested_field in field %}\n                {{ nested_field.strip('\"').strip(\"'\") }}{{ ',' if not loop.last }}\n            {%- endfor %}\n        ]) i)\n    {%- else -%}\n        (select array_agg(safe_cast(i as {{nested_type}})) from unnest({{field}}) i)\n    {%- endif -%}\n\n{%- elif type.lower() == 'json' and field is mapping -%}\n    safe_cast(json {{ dbt.string_literal(tojson(field)) }} as json)\n{%- elif cast_from_string_unsupported_for(type) and field is string -%}\n    safe_cast({{field.strip('\"').strip(\"'\")}} as {{type}})\n{%- else -%}\n    safe_cast({{field}} as {{type}})\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.cast_from_string_unsupported_for", "macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4319067, "supported_languages": null}, "macro.dbt_bigquery.cast_from_string_unsupported_for": {"name": "cast_from_string_unsupported_for", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_bigquery.cast_from_string_unsupported_for", "macro_sql": "{% macro cast_from_string_unsupported_for(type) %}\n    {{ return(type.lower().startswith('struct') or type.lower() == 'geography') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.432275, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.432645, "supported_languages": null}, "macro.dbt_bigquery.bigquery__string_literal": {"name": "bigquery__string_literal", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\string_literal.sql", "original_file_path": "macros\\utils\\string_literal.sql", "unique_id": "macro.dbt_bigquery.bigquery__string_literal", "macro_sql": "{%- macro bigquery__string_literal(value) -%}\n    '''{{ value }}'''\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.432768, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.432892, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4330287, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4330928, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4343133, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4344304, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4345677, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4346673, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.434939, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4350953, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4352095, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4354496, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4357271, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4360352, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.436443, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.436672, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4372306, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4373887, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4375927, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4377828, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4386778, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4394047, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4395347, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4397674, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4399307, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4400969, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4402325, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4419138, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.442327, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4425187, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.442785, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4429517, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4434059, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.44359, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4443269, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4447622, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4450788, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4452283, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.445462, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4457972, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4459052, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4460275, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4463274, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4464638, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4465683, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4466865, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4467847, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.447303, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4474967, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4476404, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4478297, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4479618, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4480884, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4482236, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.448405, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4485545, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.448777, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.448911, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4490335, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.449166, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4492857, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4494085, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4495256, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4496746, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4498122, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4503112, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4506931, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.450958, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.451142, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4513729, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4522614, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4527776, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4529216, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4532595, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4535093, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.453711, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.454161, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.454476, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4546554, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4548655, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4555976, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4558394, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4559734, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.456267, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.456438, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4565718, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4567208, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4570327, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4572017, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4573884, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.457742, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4578621, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4579754, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4580622, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4583733, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.458498, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4585638, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4586859, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4588087, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4590116, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4591875, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.459691, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4605312, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4610596, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4612346, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4621186, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4625149, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4627285, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4631095, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4633412, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4635558, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4637294, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4639924, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.464281, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4645393, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4647396, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4650452, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.465258, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4654772, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4656901, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4659379, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.466194, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4671211, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4673738, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4675198, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4676564, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4677951, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4701731, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4705288, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.470743, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4720092, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.472203, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4726708, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.474143, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4755807, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4757764, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4758754, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.47782, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4780595, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.478194, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.478763, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4791677, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4796333, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4798038, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4803193, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4832096, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.483701, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.484715, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4867117, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4871101, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.48773, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4879372, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4884179, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4892461, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4901114, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.491008, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4916434, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4920945, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4922736, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4924207, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.492631, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.492775, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4929814, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4931254, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4933147, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4934564, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4935727, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4937124, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4938445, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.494058, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.49469, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4953618, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4955382, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.495914, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4960566, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.49617, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4962783, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4963734, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.496494, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4965875, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4969323, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.4970694, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.497936, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5001678, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.502539, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5028389, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5029998, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5030954, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5032313, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.503344, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.503518, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.503735, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5064754, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5066416, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5070052, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5073118, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5078776, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.508506, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.508782, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.509082, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.509551, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.509738, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5099335, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.513062, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5134397, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5141122, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.515988, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5161839, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5165174, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5173938, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.517552, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.51773, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5193982, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.520485, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.520897, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5211601, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.52134, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.521824, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.523574, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.524822, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5251026, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5254297, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5259614, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.526104, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.526873, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5272071, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.527683, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.528063, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.52814, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5284529, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5288255, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5290842, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5293124, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5295799, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.529793, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5301437, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5304797, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.530657, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5308468, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.531021, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5312858, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5314615, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.531809, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5321531, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5323281, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5325737, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.532825, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5330071, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.53352, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.534543, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5348265, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5350761, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5356364, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.535744, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5361633, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5363066, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5364215, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5374863, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5379894, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5383534, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5390134, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5391955, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.539436, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.539566, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5397909, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.539926, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5401363, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5405333, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5408046, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5409255, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5411463, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5412726, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.541461, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5415754, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5419679, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5420992, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5424092, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.542909, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5432498, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5433888, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5435252, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5437086, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5438035, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.543992, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.544104, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5442874, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5444005, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5446644, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5447867, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5449216, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5452378, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5454643, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5455859, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5458274, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5459695, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5463758, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5465162, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5473685, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5475264, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.547713, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5494106, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.549839, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.551298, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5514908, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.551585, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5518134, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5519145, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5521421, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.55231, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5527341, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5529504, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5533664, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5536318, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5538888, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5540082, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5544286, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5545585, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.554772, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5549264, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5551326, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5552492, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5557623, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5558949, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5560343, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5561635, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5563025, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5564296, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5565693, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5567172, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.556854, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5570037, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.557141, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5572627, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5573857, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5574949, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5577314, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5579455, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5581696, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5582922, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5585077, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.55885, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5592074, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.559648, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5598125, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5600731, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.560306, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.560438, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5607207, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5610118, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5612638, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5614026, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5616045, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.561678, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5620046, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5623317, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5624743, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.562919, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.563133, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5632653, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5634394, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.563508, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5637355, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5639303, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.564046, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5642343, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5643258, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5646396, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5649552, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5651512, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.565242, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5654492, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5655618, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.56579, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.56592, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5661266, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5662398, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5665624, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5667906, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5671296, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5672696, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5674486, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5678923, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5681665, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5684288, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1755717738.5690484, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.ps_silver_gold.microsoft_ads__account_report": ["model.ps_silver_gold.stg_microsoft_ads__account_daily_report", "model.ps_silver_gold.stg_microsoft_ads__account_history"], "model.ps_silver_gold.microsoft_ads__ad_group_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history"], "model.ps_silver_gold.microsoft_ads__ad_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history"], "model.ps_silver_gold.microsoft_ads__campaign_country_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report"], "model.ps_silver_gold.microsoft_ads__campaign_region_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report"], "model.ps_silver_gold.microsoft_ads__campaign_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report", "model.ps_silver_gold.stg_microsoft_ads__campaign_history"], "model.ps_silver_gold.microsoft_ads__keyword_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report", "model.ps_silver_gold.stg_microsoft_ads__keyword_history"], "model.ps_silver_gold.microsoft_ads__search_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history", "model.ps_silver_gold.stg_microsoft_ads__keyword_history", "model.ps_silver_gold.stg_microsoft_ads__search_daily_report"], "model.ps_silver_gold.microsoft_ads__url_report": ["model.ps_silver_gold.stg_microsoft_ads__account_history", "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report", "model.ps_silver_gold.stg_microsoft_ads__ad_group_history", "model.ps_silver_gold.stg_microsoft_ads__ad_history", "model.ps_silver_gold.stg_microsoft_ads__campaign_history"], "model.ps_silver_gold.stg_microsoft_ads__account_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__account_history": [], "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__ad_group_history": [], "model.ps_silver_gold.stg_microsoft_ads__ad_history": [], "model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__campaign_history": [], "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report": [], "model.ps_silver_gold.stg_microsoft_ads__keyword_history": [], "model.ps_silver_gold.stg_microsoft_ads__search_daily_report": [], "model.ps_silver_gold.int_facebook_ads__conversions": ["model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values", "model.ps_silver_gold.stg_facebook_ads__basic_ad_actions"], "model.ps_silver_gold.facebook_ads__account_report": ["model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__basic_ad"], "model.ps_silver_gold.facebook_ads__ad_report": ["model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__ad_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.stg_facebook_ads__campaign_history"], "model.ps_silver_gold.facebook_ads__ad_set_report": ["model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__ad_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.stg_facebook_ads__campaign_history"], "model.ps_silver_gold.facebook_ads__campaign_report": ["model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__ad_history", "model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.stg_facebook_ads__campaign_history"], "model.ps_silver_gold.facebook_ads__country_report": ["model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__demographics_country", "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions"], "model.ps_silver_gold.facebook_ads__region_report": ["model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__demographics_region", "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions"], "model.ps_silver_gold.facebook_ads__url_report": ["model.ps_silver_gold.int_facebook_ads__conversions", "model.ps_silver_gold.int_facebook_ads__creative_history", "model.ps_silver_gold.stg_facebook_ads__account_history", "model.ps_silver_gold.stg_facebook_ads__ad_history", "model.ps_silver_gold.stg_facebook_ads__ad_set_history", "model.ps_silver_gold.stg_facebook_ads__basic_ad", "model.ps_silver_gold.stg_facebook_ads__campaign_history"], "model.ps_silver_gold.facebook_ads__url_tags": ["model.ps_silver_gold.stg_facebook_ads__creative_history"], "model.ps_silver_gold.int_facebook_ads__creative_history": ["model.ps_silver_gold.facebook_ads__url_tags", "model.ps_silver_gold.stg_facebook_ads__creative_history"], "model.ps_silver_gold.stg_facebook_ads__account_history": [], "model.ps_silver_gold.stg_facebook_ads__ad_history": [], "model.ps_silver_gold.stg_facebook_ads__ad_set_history": [], "model.ps_silver_gold.stg_facebook_ads__basic_ad": [], "model.ps_silver_gold.stg_facebook_ads__basic_ad_actions": [], "model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values": [], "model.ps_silver_gold.stg_facebook_ads__campaign_history": [], "model.ps_silver_gold.stg_facebook_ads__creative_history": [], "model.ps_silver_gold.stg_facebook_ads__demographics_country": [], "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions": [], "model.ps_silver_gold.stg_facebook_ads__demographics_region": [], "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions": [], "model.ps_silver_gold.microsoft_ads_accounts": ["model.ps_silver_gold.microsoft_ads__account_report"], "model.ps_silver_gold.pinterest_ads_accounts": ["model.ps_silver_gold.pinterest_ads__advertiser_report"], "model.ps_silver_gold.tiktok_ads_accounts": ["model.ps_silver_gold.tiktok_ads__advertiser_report"], "model.ps_silver_gold.google_ads__account_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_account_stats", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__ad_group_report": ["model.ps_silver_gold.google_ads__PMAX_report", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_ad_group_stats", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__ad_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_ad_stats", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__age_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_age_stats", "model.ps_silver_gold.stg_google_ads_campaign"], "model.ps_silver_gold.google_ads__campaign_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_campaign_stats", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__device_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_ad_group_stats", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__DMA_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_geo_stats", "model.ps_silver_gold.stg_google_ads_video_stats"], "model.ps_silver_gold.google_ads__gender_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_gender_stats"], "model.ps_silver_gold.google_ads__keyword_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_keyword", "model.ps_silver_gold.stg_google_ads_keyword_stats"], "model.ps_silver_gold.google_ads__PMAX_report": ["model.ps_silver_gold.stg_google_ads_PMAX", "model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_campaign_stats"], "model.ps_silver_gold.google_ads__search_term_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_campaign", "model.ps_silver_gold.stg_google_ads_search_term", "model.ps_silver_gold.stg_google_ads_search_term_stats"], "model.ps_silver_gold.stg_google_ads_account": [], "model.ps_silver_gold.stg_google_ads_account_stats": [], "model.ps_silver_gold.stg_google_ads_ad_conversion_stats": [], "model.ps_silver_gold.stg_google_ads_ad_group": [], "model.ps_silver_gold.stg_google_ads_ad_group_stats": [], "model.ps_silver_gold.stg_google_ads_ad_stats": [], "model.ps_silver_gold.stg_google_ads_age_stats": [], "model.ps_silver_gold.stg_google_ads_campaign": [], "model.ps_silver_gold.stg_google_ads_campaign_stats": [], "model.ps_silver_gold.stg_google_ads_gender_stats": [], "model.ps_silver_gold.stg_google_ads_geo_stats": [], "model.ps_silver_gold.stg_google_ads_keyword": [], "model.ps_silver_gold.stg_google_ads_keyword_stats": [], "model.ps_silver_gold.stg_google_ads_PMAX": [], "model.ps_silver_gold.stg_google_ads_search_term": [], "model.ps_silver_gold.stg_google_ads_search_term_stats": [], "model.ps_silver_gold.stg_google_ads_video_stats": [], "model.ps_silver_gold.linkedin_ads__account_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign", "model.ps_silver_gold.stg_linkedin_ads__campaign_history"], "model.ps_silver_gold.linkedin_ads__campaign_group_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history"], "model.ps_silver_gold.linkedin_ads__campaign_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history"], "model.ps_silver_gold.linkedin_ads__creative_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__creative_history"], "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__geo", "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country"], "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__geo", "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region"], "model.ps_silver_gold.linkedin_ads__url_report": ["model.ps_silver_gold.stg_linkedin_ads__account_history", "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative", "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history", "model.ps_silver_gold.stg_linkedin_ads__campaign_history", "model.ps_silver_gold.stg_linkedin_ads__creative_history"], "model.ps_silver_gold.stg_linkedin_ads__account_history": [], "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign": [], "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative": [], "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history": [], "model.ps_silver_gold.stg_linkedin_ads__campaign_history": [], "model.ps_silver_gold.stg_linkedin_ads__creative_history": [], "model.ps_silver_gold.stg_linkedin_ads__geo": [], "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country": [], "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region": [], "model.ps_silver_gold.brand_metadata": [], "model.ps_silver_gold.client_metadata": [], "model.ps_silver_gold.mapping_metadata": [], "model.ps_silver_gold.account_unified_stats": ["model.ps_silver_gold.facebook_ads__account_report", "model.ps_silver_gold.google_ads__account_report", "model.ps_silver_gold.linkedin_ads__account_report", "model.ps_silver_gold.microsoft_ads__account_report", "model.ps_silver_gold.pinterest_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.unified_data"], "model.ps_silver_gold.ad_group_unified_stats": ["model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.microsoft_ads__ad_group_report", "model.ps_silver_gold.pinterest_ads__ad_group_report", "model.ps_silver_gold.tiktok_ads__ad_group_report", "model.ps_silver_gold.unified_data"], "model.ps_silver_gold.ad_unified_stats": ["model.ps_silver_gold.facebook_ads__url_report", "model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.tiktok_ads__url_report", "model.ps_silver_gold.unified_data"], "model.ps_silver_gold.campaign_unified_stats": ["model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.google_ads__campaign_report", "model.ps_silver_gold.linkedin_ads__campaign_report", "model.ps_silver_gold.microsoft_ads__campaign_report", "model.ps_silver_gold.pinterest_ads__campaign_report", "model.ps_silver_gold.tiktok_ads__campaign_report", "model.ps_silver_gold.unified_data"], "model.ps_silver_gold.device_unified_stats": ["model.ps_silver_gold.google_ads__device_report", "model.ps_silver_gold.microsoft_ads__ad_group_report"], "model.ps_silver_gold.geo_unified_stats": ["model.ps_silver_gold.facebook_ads__region_report", "model.ps_silver_gold.google_ads__DMA_report", "model.ps_silver_gold.microsoft_ads__campaign_region_report", "model.ps_silver_gold.pinterest_ads__campaign_country_report"], "model.ps_silver_gold.keyword_unified_stats": ["model.ps_silver_gold.facebook_ads__url_report", "model.ps_silver_gold.google_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__keyword_report"], "model.ps_silver_gold.pinterest_ads__advertiser_report": ["model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_report"], "model.ps_silver_gold.pinterest_ads__ad_group_report": ["model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__ad_group_report", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history"], "model.ps_silver_gold.pinterest_ads__campaign_country_report": ["model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report", "model.ps_silver_gold.stg_pinterest_ads__targeting_geo"], "model.ps_silver_gold.pinterest_ads__campaign_region_report": [], "model.ps_silver_gold.pinterest_ads__campaign_report": ["model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_report"], "model.ps_silver_gold.pinterest_ads__keyword_report": ["model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report"], "model.ps_silver_gold.pinterest_ads__pin_promotion_report": ["model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report"], "model.ps_silver_gold.pinterest_ads__url_report": ["model.ps_silver_gold.stg_pinterest_ads__ad_group_history", "model.ps_silver_gold.stg_pinterest_ads__advertiser_history", "model.ps_silver_gold.stg_pinterest_ads__campaign_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history", "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report"], "model.ps_silver_gold.stg_pinterest_ads__advertiser_history": [], "model.ps_silver_gold.stg_pinterest_ads__advertiser_report": [], "model.ps_silver_gold.stg_pinterest_ads__ad_group_history": [], "model.ps_silver_gold.stg_pinterest_ads__ad_group_report": [], "model.ps_silver_gold.stg_pinterest_ads__campaign_history": [], "model.ps_silver_gold.stg_pinterest_ads__campaign_report": [], "model.ps_silver_gold.stg_pinterest_ads__keyword_history": [], "model.ps_silver_gold.stg_pinterest_ads__keyword_report": [], "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history": [], "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report": [], "model.ps_silver_gold.stg_pinterest_ads__targeting_geo": [], "model.ps_silver_gold.stg_pinterest_ads__targeting_geo_region": [], "model.ps_silver_gold.unified_data": [], "model.ps_silver_gold.tiktok_ads__advertiser_report": ["model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"], "model.ps_silver_gold.tiktok_ads__ad_group_report": ["model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"], "model.ps_silver_gold.tiktok_ads__ad_report": ["model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"], "model.ps_silver_gold.tiktok_ads__campaign_report": ["model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history", "model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly"], "model.ps_silver_gold.tiktok_ads__url_report": ["model.ps_silver_gold.stg_tiktok_ads__ad_group_history", "model.ps_silver_gold.stg_tiktok_ads__ad_history", "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly", "model.ps_silver_gold.stg_tiktok_ads__advertiser", "model.ps_silver_gold.stg_tiktok_ads__campaign_history"], "model.ps_silver_gold.stg_tiktok_ads__advertiser": [], "model.ps_silver_gold.stg_tiktok_ads__ad_group_history": [], "model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly": [], "model.ps_silver_gold.stg_tiktok_ads__ad_history": [], "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly": [], "model.ps_silver_gold.stg_tiktok_ads__campaign_history": [], "model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly": [], "model.ps_silver_gold.google_ads__ad_conversions_report": ["model.ps_silver_gold.stg_google_ads_account", "model.ps_silver_gold.stg_google_ads_ad_conversion_stats", "model.ps_silver_gold.stg_google_ads_ad_group", "model.ps_silver_gold.stg_google_ads_campaign"]}, "child_map": {"model.ps_silver_gold.microsoft_ads__account_report": ["model.ps_silver_gold.account_unified_stats", "model.ps_silver_gold.microsoft_ads_accounts"], "model.ps_silver_gold.microsoft_ads__ad_group_report": ["model.ps_silver_gold.ad_group_unified_stats", "model.ps_silver_gold.device_unified_stats"], "model.ps_silver_gold.microsoft_ads__ad_report": ["model.ps_silver_gold.ad_unified_stats"], "model.ps_silver_gold.microsoft_ads__campaign_country_report": [], "model.ps_silver_gold.microsoft_ads__campaign_region_report": ["model.ps_silver_gold.geo_unified_stats"], "model.ps_silver_gold.microsoft_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.microsoft_ads__keyword_report": ["model.ps_silver_gold.keyword_unified_stats"], "model.ps_silver_gold.microsoft_ads__search_report": [], "model.ps_silver_gold.microsoft_ads__url_report": [], "model.ps_silver_gold.stg_microsoft_ads__account_daily_report": ["model.ps_silver_gold.microsoft_ads__account_report"], "model.ps_silver_gold.stg_microsoft_ads__account_history": ["model.ps_silver_gold.microsoft_ads__account_report", "model.ps_silver_gold.microsoft_ads__ad_group_report", "model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.microsoft_ads__campaign_country_report", "model.ps_silver_gold.microsoft_ads__campaign_region_report", "model.ps_silver_gold.microsoft_ads__campaign_report", "model.ps_silver_gold.microsoft_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__search_report", "model.ps_silver_gold.microsoft_ads__url_report"], "model.ps_silver_gold.stg_microsoft_ads__ad_daily_report": ["model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.microsoft_ads__url_report"], "model.ps_silver_gold.stg_microsoft_ads__ad_group_daily_report": ["model.ps_silver_gold.microsoft_ads__ad_group_report"], "model.ps_silver_gold.stg_microsoft_ads__ad_group_history": ["model.ps_silver_gold.microsoft_ads__ad_group_report", "model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.microsoft_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__search_report", "model.ps_silver_gold.microsoft_ads__url_report"], "model.ps_silver_gold.stg_microsoft_ads__ad_history": ["model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.microsoft_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__search_report", "model.ps_silver_gold.microsoft_ads__url_report"], "model.ps_silver_gold.stg_microsoft_ads__campaign_daily_report": ["model.ps_silver_gold.microsoft_ads__campaign_report"], "model.ps_silver_gold.stg_microsoft_ads__campaign_history": ["model.ps_silver_gold.microsoft_ads__ad_group_report", "model.ps_silver_gold.microsoft_ads__ad_report", "model.ps_silver_gold.microsoft_ads__campaign_country_report", "model.ps_silver_gold.microsoft_ads__campaign_region_report", "model.ps_silver_gold.microsoft_ads__campaign_report", "model.ps_silver_gold.microsoft_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__search_report", "model.ps_silver_gold.microsoft_ads__url_report"], "model.ps_silver_gold.stg_microsoft_ads__geographic_daily_report": ["model.ps_silver_gold.microsoft_ads__campaign_country_report", "model.ps_silver_gold.microsoft_ads__campaign_region_report"], "model.ps_silver_gold.stg_microsoft_ads__keyword_daily_report": ["model.ps_silver_gold.microsoft_ads__keyword_report"], "model.ps_silver_gold.stg_microsoft_ads__keyword_history": ["model.ps_silver_gold.microsoft_ads__keyword_report", "model.ps_silver_gold.microsoft_ads__search_report"], "model.ps_silver_gold.stg_microsoft_ads__search_daily_report": ["model.ps_silver_gold.microsoft_ads__search_report"], "model.ps_silver_gold.int_facebook_ads__conversions": ["model.ps_silver_gold.facebook_ads__account_report", "model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.facebook_ads__account_report": ["model.ps_silver_gold.account_unified_stats"], "model.ps_silver_gold.facebook_ads__ad_report": [], "model.ps_silver_gold.facebook_ads__ad_set_report": ["model.ps_silver_gold.ad_group_unified_stats"], "model.ps_silver_gold.facebook_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.facebook_ads__country_report": [], "model.ps_silver_gold.facebook_ads__region_report": ["model.ps_silver_gold.geo_unified_stats"], "model.ps_silver_gold.facebook_ads__url_report": ["model.ps_silver_gold.ad_unified_stats", "model.ps_silver_gold.keyword_unified_stats"], "model.ps_silver_gold.facebook_ads__url_tags": ["model.ps_silver_gold.int_facebook_ads__creative_history"], "model.ps_silver_gold.int_facebook_ads__creative_history": ["model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__account_history": ["model.ps_silver_gold.facebook_ads__account_report", "model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.facebook_ads__country_report", "model.ps_silver_gold.facebook_ads__region_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__ad_history": ["model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__ad_set_history": ["model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__basic_ad": ["model.ps_silver_gold.facebook_ads__account_report", "model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__basic_ad_actions": ["model.ps_silver_gold.int_facebook_ads__conversions"], "model.ps_silver_gold.stg_facebook_ads__basic_ad_action_values": ["model.ps_silver_gold.int_facebook_ads__conversions"], "model.ps_silver_gold.stg_facebook_ads__campaign_history": ["model.ps_silver_gold.facebook_ads__ad_report", "model.ps_silver_gold.facebook_ads__ad_set_report", "model.ps_silver_gold.facebook_ads__campaign_report", "model.ps_silver_gold.facebook_ads__url_report"], "model.ps_silver_gold.stg_facebook_ads__creative_history": ["model.ps_silver_gold.facebook_ads__url_tags", "model.ps_silver_gold.int_facebook_ads__creative_history"], "model.ps_silver_gold.stg_facebook_ads__demographics_country": ["model.ps_silver_gold.facebook_ads__country_report"], "model.ps_silver_gold.stg_facebook_ads__demographics_country_actions": ["model.ps_silver_gold.facebook_ads__country_report"], "model.ps_silver_gold.stg_facebook_ads__demographics_region": ["model.ps_silver_gold.facebook_ads__region_report"], "model.ps_silver_gold.stg_facebook_ads__demographics_region_actions": ["model.ps_silver_gold.facebook_ads__region_report"], "model.ps_silver_gold.microsoft_ads_accounts": [], "model.ps_silver_gold.pinterest_ads_accounts": [], "model.ps_silver_gold.tiktok_ads_accounts": [], "model.ps_silver_gold.google_ads__account_report": ["model.ps_silver_gold.account_unified_stats"], "model.ps_silver_gold.google_ads__ad_group_report": ["model.ps_silver_gold.ad_group_unified_stats"], "model.ps_silver_gold.google_ads__ad_report": ["model.ps_silver_gold.ad_unified_stats"], "model.ps_silver_gold.google_ads__age_report": [], "model.ps_silver_gold.google_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.google_ads__device_report": ["model.ps_silver_gold.device_unified_stats"], "model.ps_silver_gold.google_ads__DMA_report": ["model.ps_silver_gold.geo_unified_stats"], "model.ps_silver_gold.google_ads__gender_report": [], "model.ps_silver_gold.google_ads__keyword_report": ["model.ps_silver_gold.keyword_unified_stats"], "model.ps_silver_gold.google_ads__PMAX_report": ["model.ps_silver_gold.google_ads__ad_group_report"], "model.ps_silver_gold.google_ads__search_term_report": [], "model.ps_silver_gold.stg_google_ads_account": ["model.ps_silver_gold.google_ads__DMA_report", "model.ps_silver_gold.google_ads__PMAX_report", "model.ps_silver_gold.google_ads__account_report", "model.ps_silver_gold.google_ads__ad_conversions_report", "model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.google_ads__age_report", "model.ps_silver_gold.google_ads__campaign_report", "model.ps_silver_gold.google_ads__device_report", "model.ps_silver_gold.google_ads__gender_report", "model.ps_silver_gold.google_ads__keyword_report", "model.ps_silver_gold.google_ads__search_term_report"], "model.ps_silver_gold.stg_google_ads_account_stats": ["model.ps_silver_gold.google_ads__account_report"], "model.ps_silver_gold.stg_google_ads_ad_conversion_stats": ["model.ps_silver_gold.google_ads__ad_conversions_report"], "model.ps_silver_gold.stg_google_ads_ad_group": ["model.ps_silver_gold.google_ads__ad_conversions_report", "model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.google_ads__age_report", "model.ps_silver_gold.google_ads__device_report", "model.ps_silver_gold.google_ads__gender_report", "model.ps_silver_gold.google_ads__keyword_report", "model.ps_silver_gold.google_ads__search_term_report"], "model.ps_silver_gold.stg_google_ads_ad_group_stats": ["model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.google_ads__device_report"], "model.ps_silver_gold.stg_google_ads_ad_stats": ["model.ps_silver_gold.google_ads__ad_report"], "model.ps_silver_gold.stg_google_ads_age_stats": ["model.ps_silver_gold.google_ads__age_report"], "model.ps_silver_gold.stg_google_ads_campaign": ["model.ps_silver_gold.google_ads__DMA_report", "model.ps_silver_gold.google_ads__ad_conversions_report", "model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.google_ads__age_report", "model.ps_silver_gold.google_ads__campaign_report", "model.ps_silver_gold.google_ads__device_report", "model.ps_silver_gold.google_ads__gender_report", "model.ps_silver_gold.google_ads__keyword_report", "model.ps_silver_gold.google_ads__search_term_report"], "model.ps_silver_gold.stg_google_ads_campaign_stats": ["model.ps_silver_gold.google_ads__PMAX_report", "model.ps_silver_gold.google_ads__campaign_report"], "model.ps_silver_gold.stg_google_ads_gender_stats": ["model.ps_silver_gold.google_ads__gender_report"], "model.ps_silver_gold.stg_google_ads_geo_stats": ["model.ps_silver_gold.google_ads__DMA_report"], "model.ps_silver_gold.stg_google_ads_keyword": ["model.ps_silver_gold.google_ads__keyword_report"], "model.ps_silver_gold.stg_google_ads_keyword_stats": ["model.ps_silver_gold.google_ads__keyword_report"], "model.ps_silver_gold.stg_google_ads_PMAX": ["model.ps_silver_gold.google_ads__PMAX_report"], "model.ps_silver_gold.stg_google_ads_search_term": ["model.ps_silver_gold.google_ads__search_term_report"], "model.ps_silver_gold.stg_google_ads_search_term_stats": ["model.ps_silver_gold.google_ads__search_term_report"], "model.ps_silver_gold.stg_google_ads_video_stats": ["model.ps_silver_gold.google_ads__DMA_report", "model.ps_silver_gold.google_ads__account_report", "model.ps_silver_gold.google_ads__ad_group_report", "model.ps_silver_gold.google_ads__ad_report", "model.ps_silver_gold.google_ads__campaign_report", "model.ps_silver_gold.google_ads__device_report"], "model.ps_silver_gold.linkedin_ads__account_report": ["model.ps_silver_gold.account_unified_stats"], "model.ps_silver_gold.linkedin_ads__campaign_group_report": [], "model.ps_silver_gold.linkedin_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.linkedin_ads__creative_report": ["model.ps_silver_gold.ad_unified_stats"], "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report": [], "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report": [], "model.ps_silver_gold.linkedin_ads__url_report": [], "model.ps_silver_gold.stg_linkedin_ads__account_history": ["model.ps_silver_gold.linkedin_ads__account_report", "model.ps_silver_gold.linkedin_ads__campaign_group_report", "model.ps_silver_gold.linkedin_ads__campaign_report", "model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report", "model.ps_silver_gold.linkedin_ads__url_report"], "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_campaign": ["model.ps_silver_gold.linkedin_ads__account_report", "model.ps_silver_gold.linkedin_ads__campaign_group_report", "model.ps_silver_gold.linkedin_ads__campaign_report"], "model.ps_silver_gold.stg_linkedin_ads__ad_analytics_by_creative": ["model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.linkedin_ads__url_report"], "model.ps_silver_gold.stg_linkedin_ads__campaign_group_history": ["model.ps_silver_gold.linkedin_ads__campaign_group_report", "model.ps_silver_gold.linkedin_ads__campaign_report", "model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report", "model.ps_silver_gold.linkedin_ads__url_report"], "model.ps_silver_gold.stg_linkedin_ads__campaign_history": ["model.ps_silver_gold.linkedin_ads__account_report", "model.ps_silver_gold.linkedin_ads__campaign_group_report", "model.ps_silver_gold.linkedin_ads__campaign_report", "model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report", "model.ps_silver_gold.linkedin_ads__url_report"], "model.ps_silver_gold.stg_linkedin_ads__creative_history": ["model.ps_silver_gold.linkedin_ads__creative_report", "model.ps_silver_gold.linkedin_ads__url_report"], "model.ps_silver_gold.stg_linkedin_ads__geo": ["model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report", "model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report"], "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_country": ["model.ps_silver_gold.linkedin_ads__monthly_campaign_country_report"], "model.ps_silver_gold.stg_linkedin_ads__monthly_ad_analytics_by_region": ["model.ps_silver_gold.linkedin_ads__monthly_campaign_region_report"], "model.ps_silver_gold.brand_metadata": [], "model.ps_silver_gold.client_metadata": [], "model.ps_silver_gold.mapping_metadata": [], "model.ps_silver_gold.account_unified_stats": [], "model.ps_silver_gold.ad_group_unified_stats": [], "model.ps_silver_gold.ad_unified_stats": [], "model.ps_silver_gold.campaign_unified_stats": [], "model.ps_silver_gold.device_unified_stats": [], "model.ps_silver_gold.geo_unified_stats": [], "model.ps_silver_gold.keyword_unified_stats": [], "model.ps_silver_gold.pinterest_ads__advertiser_report": ["model.ps_silver_gold.account_unified_stats", "model.ps_silver_gold.pinterest_ads_accounts"], "model.ps_silver_gold.pinterest_ads__ad_group_report": ["model.ps_silver_gold.ad_group_unified_stats"], "model.ps_silver_gold.pinterest_ads__campaign_country_report": ["model.ps_silver_gold.geo_unified_stats"], "model.ps_silver_gold.pinterest_ads__campaign_region_report": [], "model.ps_silver_gold.pinterest_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.pinterest_ads__keyword_report": [], "model.ps_silver_gold.pinterest_ads__pin_promotion_report": [], "model.ps_silver_gold.pinterest_ads__url_report": [], "model.ps_silver_gold.stg_pinterest_ads__advertiser_history": ["model.ps_silver_gold.pinterest_ads__ad_group_report", "model.ps_silver_gold.pinterest_ads__advertiser_report", "model.ps_silver_gold.pinterest_ads__campaign_country_report", "model.ps_silver_gold.pinterest_ads__campaign_report", "model.ps_silver_gold.pinterest_ads__keyword_report", "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "model.ps_silver_gold.pinterest_ads__url_report"], "model.ps_silver_gold.stg_pinterest_ads__advertiser_report": ["model.ps_silver_gold.pinterest_ads__advertiser_report"], "model.ps_silver_gold.stg_pinterest_ads__ad_group_history": ["model.ps_silver_gold.pinterest_ads__ad_group_report", "model.ps_silver_gold.pinterest_ads__keyword_report", "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "model.ps_silver_gold.pinterest_ads__url_report"], "model.ps_silver_gold.stg_pinterest_ads__ad_group_report": ["model.ps_silver_gold.pinterest_ads__ad_group_report"], "model.ps_silver_gold.stg_pinterest_ads__campaign_history": ["model.ps_silver_gold.pinterest_ads__ad_group_report", "model.ps_silver_gold.pinterest_ads__campaign_country_report", "model.ps_silver_gold.pinterest_ads__campaign_report", "model.ps_silver_gold.pinterest_ads__keyword_report", "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "model.ps_silver_gold.pinterest_ads__url_report"], "model.ps_silver_gold.stg_pinterest_ads__campaign_report": ["model.ps_silver_gold.pinterest_ads__campaign_report"], "model.ps_silver_gold.stg_pinterest_ads__keyword_history": [], "model.ps_silver_gold.stg_pinterest_ads__keyword_report": [], "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_history": ["model.ps_silver_gold.pinterest_ads__keyword_report", "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "model.ps_silver_gold.pinterest_ads__url_report"], "model.ps_silver_gold.stg_pinterest_ads__pin_promotion_report": ["model.ps_silver_gold.pinterest_ads__campaign_country_report", "model.ps_silver_gold.pinterest_ads__keyword_report", "model.ps_silver_gold.pinterest_ads__pin_promotion_report", "model.ps_silver_gold.pinterest_ads__url_report"], "model.ps_silver_gold.stg_pinterest_ads__targeting_geo": ["model.ps_silver_gold.pinterest_ads__campaign_country_report"], "model.ps_silver_gold.stg_pinterest_ads__targeting_geo_region": [], "model.ps_silver_gold.unified_data": ["model.ps_silver_gold.account_unified_stats", "model.ps_silver_gold.ad_group_unified_stats", "model.ps_silver_gold.ad_unified_stats", "model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.tiktok_ads__advertiser_report": ["model.ps_silver_gold.account_unified_stats", "model.ps_silver_gold.tiktok_ads_accounts"], "model.ps_silver_gold.tiktok_ads__ad_group_report": ["model.ps_silver_gold.ad_group_unified_stats"], "model.ps_silver_gold.tiktok_ads__ad_report": [], "model.ps_silver_gold.tiktok_ads__campaign_report": ["model.ps_silver_gold.campaign_unified_stats"], "model.ps_silver_gold.tiktok_ads__url_report": ["model.ps_silver_gold.ad_unified_stats"], "model.ps_silver_gold.stg_tiktok_ads__advertiser": ["model.ps_silver_gold.tiktok_ads__ad_group_report", "model.ps_silver_gold.tiktok_ads__ad_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__campaign_report", "model.ps_silver_gold.tiktok_ads__url_report"], "model.ps_silver_gold.stg_tiktok_ads__ad_group_history": ["model.ps_silver_gold.tiktok_ads__ad_group_report", "model.ps_silver_gold.tiktok_ads__ad_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__url_report"], "model.ps_silver_gold.stg_tiktok_ads__ad_group_report_hourly": ["model.ps_silver_gold.tiktok_ads__ad_group_report"], "model.ps_silver_gold.stg_tiktok_ads__ad_history": ["model.ps_silver_gold.tiktok_ads__ad_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__url_report"], "model.ps_silver_gold.stg_tiktok_ads__ad_report_hourly": ["model.ps_silver_gold.tiktok_ads__ad_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__url_report"], "model.ps_silver_gold.stg_tiktok_ads__campaign_history": ["model.ps_silver_gold.tiktok_ads__ad_group_report", "model.ps_silver_gold.tiktok_ads__ad_report", "model.ps_silver_gold.tiktok_ads__advertiser_report", "model.ps_silver_gold.tiktok_ads__campaign_report", "model.ps_silver_gold.tiktok_ads__url_report"], "model.ps_silver_gold.stg_tiktok_ads__campaign_report_hourly": ["model.ps_silver_gold.tiktok_ads__campaign_report"], "model.ps_silver_gold.google_ads__ad_conversions_report": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}